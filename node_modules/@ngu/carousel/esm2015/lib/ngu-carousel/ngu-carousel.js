export class NguCarouselStore {
    constructor(touch = new Touch(), vertical = new Vertical(), interval, transform = new Transfrom(), button, visibleItems, deviceType, type = 'fixed', token = '', items = 0, load = 0, deviceWidth = 0, carouselWidth = 0, itemWidth = 0, slideItems = 0, itemWidthPer = 0, itemLength = 0, currentSlide = 0, easing = 'cubic-bezier(0, 0, 0.2, 1)', speed = 200, loop = false, dexVal = 0, touchTransform = 0, isEnd = false, isFirst = true, isLast = false, RTL = false, point = true, velocity = 1) {
        this.touch = touch;
        this.vertical = vertical;
        this.interval = interval;
        this.transform = transform;
        this.button = button;
        this.visibleItems = visibleItems;
        this.deviceType = deviceType;
        this.type = type;
        this.token = token;
        this.items = items;
        this.load = load;
        this.deviceWidth = deviceWidth;
        this.carouselWidth = carouselWidth;
        this.itemWidth = itemWidth;
        this.slideItems = slideItems;
        this.itemWidthPer = itemWidthPer;
        this.itemLength = itemLength;
        this.currentSlide = currentSlide;
        this.easing = easing;
        this.speed = speed;
        this.loop = loop;
        this.dexVal = dexVal;
        this.touchTransform = touchTransform;
        this.isEnd = isEnd;
        this.isFirst = isFirst;
        this.isLast = isLast;
        this.RTL = RTL;
        this.point = point;
        this.velocity = velocity;
    }
}
export class ItemsControl {
}
export class Vertical {
}
export class NguButton {
}
export class Touch {
}
export class Transfrom {
    constructor(xs = 0, sm = 0, md = 0, lg = 0, all = 0) {
        this.xs = xs;
        this.sm = sm;
        this.md = md;
        this.lg = lg;
        this.all = all;
        this.xl = 0;
    }
}
/**
 * Default values
 * {sm: 768, md: 992, lg: 1200, xl: 1200}
 *
 * Bootstrap values:
 * {sm: 576, md: 768, lg: 992, xl: 1200}
 */
export class Breakpoints {
    constructor(sm = 768, md = 992, lg = 1200, xl = 1200) {
        this.sm = sm;
        this.md = md;
        this.lg = lg;
        this.xl = xl;
    }
}
export class NguCarouselConfig {
}
export class NguCarouselOutletContext {
    constructor(data) {
        this.$implicit = data;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd1LWNhcm91c2VsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd1LWNhcm91c2VsL3NyYy9saWIvbmd1LWNhcm91c2VsL25ndS1jYXJvdXNlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCLFlBQ1MsUUFBUSxJQUFJLEtBQUssRUFBRSxFQUNuQixXQUFXLElBQUksUUFBUSxFQUFFLEVBQ3pCLFFBQTJCLEVBQzNCLFlBQVksSUFBSSxTQUFTLEVBQUUsRUFDM0IsTUFBa0IsRUFDbEIsWUFBMkIsRUFDM0IsVUFBdUIsRUFDdkIsT0FBTyxPQUFPLEVBQ2QsUUFBUSxFQUFFLEVBQ1YsUUFBUSxDQUFDLEVBQ1QsT0FBTyxDQUFDLEVBQ1IsY0FBYyxDQUFDLEVBQ2YsZ0JBQWdCLENBQUMsRUFDakIsWUFBWSxDQUFDLEVBQ2IsYUFBYSxDQUFDLEVBQ2QsZUFBZSxDQUFDLEVBQ2hCLGFBQWEsQ0FBQyxFQUNkLGVBQWUsQ0FBQyxFQUNoQixTQUFTLDRCQUE0QixFQUNyQyxRQUFRLEdBQUcsRUFDWCxPQUFPLEtBQUssRUFDWixTQUFTLENBQUMsRUFDVixpQkFBaUIsQ0FBQyxFQUNsQixRQUFRLEtBQUssRUFDYixVQUFVLElBQUksRUFDZCxTQUFTLEtBQUssRUFDZCxNQUFNLEtBQUssRUFDWCxRQUFRLElBQUksRUFDWixXQUFXLENBQUM7UUE1QlosVUFBSyxHQUFMLEtBQUssQ0FBYztRQUNuQixhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQUMzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLGlCQUFZLEdBQVosWUFBWSxDQUFlO1FBQzNCLGVBQVUsR0FBVixVQUFVLENBQWE7UUFDdkIsU0FBSSxHQUFKLElBQUksQ0FBVTtRQUNkLFVBQUssR0FBTCxLQUFLLENBQUs7UUFDVixVQUFLLEdBQUwsS0FBSyxDQUFJO1FBQ1QsU0FBSSxHQUFKLElBQUksQ0FBSTtRQUNSLGdCQUFXLEdBQVgsV0FBVyxDQUFJO1FBQ2Ysa0JBQWEsR0FBYixhQUFhLENBQUk7UUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBSTtRQUNiLGVBQVUsR0FBVixVQUFVLENBQUk7UUFDZCxpQkFBWSxHQUFaLFlBQVksQ0FBSTtRQUNoQixlQUFVLEdBQVYsVUFBVSxDQUFJO1FBQ2QsaUJBQVksR0FBWixZQUFZLENBQUk7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBK0I7UUFDckMsVUFBSyxHQUFMLEtBQUssQ0FBTTtRQUNYLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixXQUFNLEdBQU4sTUFBTSxDQUFJO1FBQ1YsbUJBQWMsR0FBZCxjQUFjLENBQUk7UUFDbEIsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNiLFlBQU8sR0FBUCxPQUFPLENBQU87UUFDZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLFVBQUssR0FBTCxLQUFLLENBQU87UUFDWixhQUFRLEdBQVIsUUFBUSxDQUFJO0lBQ2xCLENBQUM7Q0FDTDtBQUtELE1BQU0sT0FBTyxZQUFZO0NBR3hCO0FBRUQsTUFBTSxPQUFPLFFBQVE7Q0FJcEI7QUFFRCxNQUFNLE9BQU8sU0FBUztDQUdyQjtBQUVELE1BQU0sT0FBTyxLQUFLO0NBSWpCO0FBRUQsTUFBTSxPQUFPLFNBQVM7SUFFcEIsWUFBbUIsS0FBSyxDQUFDLEVBQVMsS0FBSyxDQUFDLEVBQVMsS0FBSyxDQUFDLEVBQVMsS0FBSyxDQUFDLEVBQVMsTUFBTSxDQUFDO1FBQW5FLE9BQUUsR0FBRixFQUFFLENBQUk7UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFJO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBSTtRQUFTLE9BQUUsR0FBRixFQUFFLENBQUk7UUFBUyxRQUFHLEdBQUgsR0FBRyxDQUFJO1FBRC9FLE9BQUUsR0FBSSxDQUFDLENBQUM7SUFDMEUsQ0FBQztDQUMzRjtBQUdEOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQW1CLEtBQUssR0FBRyxFQUFTLEtBQUssR0FBRyxFQUFTLEtBQUssSUFBSSxFQUFTLEtBQUssSUFBSTtRQUE3RCxPQUFFLEdBQUYsRUFBRSxDQUFNO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBTTtRQUFTLE9BQUUsR0FBRixFQUFFLENBQU87UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFPO0lBQUcsQ0FBQztDQUNyRjtBQUVELE1BQU0sT0FBTyxpQkFBaUI7Q0FrQjdCO0FBMkJELE1BQU0sT0FBTyx3QkFBd0I7SUFhbkMsWUFBWSxJQUFPO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBOZ3VDYXJvdXNlbFN0b3JlIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB0b3VjaCA9IG5ldyBUb3VjaCgpLFxyXG4gICAgcHVibGljIHZlcnRpY2FsID0gbmV3IFZlcnRpY2FsKCksXHJcbiAgICBwdWJsaWMgaW50ZXJ2YWw/OiBDYXJvdXNlbEludGVydmFsLFxyXG4gICAgcHVibGljIHRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zyb20oKSxcclxuICAgIHB1YmxpYyBidXR0b24/OiBOZ3VCdXR0b24sXHJcbiAgICBwdWJsaWMgdmlzaWJsZUl0ZW1zPzogSXRlbXNDb250cm9sLFxyXG4gICAgcHVibGljIGRldmljZVR5cGU/OiBEZXZpY2VUeXBlLFxyXG4gICAgcHVibGljIHR5cGUgPSAnZml4ZWQnLFxyXG4gICAgcHVibGljIHRva2VuID0gJycsXHJcbiAgICBwdWJsaWMgaXRlbXMgPSAwLFxyXG4gICAgcHVibGljIGxvYWQgPSAwLFxyXG4gICAgcHVibGljIGRldmljZVdpZHRoID0gMCxcclxuICAgIHB1YmxpYyBjYXJvdXNlbFdpZHRoID0gMCxcclxuICAgIHB1YmxpYyBpdGVtV2lkdGggPSAwLFxyXG4gICAgcHVibGljIHNsaWRlSXRlbXMgPSAwLFxyXG4gICAgcHVibGljIGl0ZW1XaWR0aFBlciA9IDAsXHJcbiAgICBwdWJsaWMgaXRlbUxlbmd0aCA9IDAsXHJcbiAgICBwdWJsaWMgY3VycmVudFNsaWRlID0gMCxcclxuICAgIHB1YmxpYyBlYXNpbmcgPSAnY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSknLFxyXG4gICAgcHVibGljIHNwZWVkID0gMjAwLFxyXG4gICAgcHVibGljIGxvb3AgPSBmYWxzZSxcclxuICAgIHB1YmxpYyBkZXhWYWwgPSAwLFxyXG4gICAgcHVibGljIHRvdWNoVHJhbnNmb3JtID0gMCxcclxuICAgIHB1YmxpYyBpc0VuZCA9IGZhbHNlLFxyXG4gICAgcHVibGljIGlzRmlyc3QgPSB0cnVlLFxyXG4gICAgcHVibGljIGlzTGFzdCA9IGZhbHNlLFxyXG4gICAgcHVibGljIFJUTCA9IGZhbHNlLFxyXG4gICAgcHVibGljIHBvaW50ID0gdHJ1ZSxcclxuICAgIHB1YmxpYyB2ZWxvY2l0eSA9IDFcclxuICApIHt9XHJcbn1cclxuZXhwb3J0IHR5cGUgRGV2aWNlVHlwZSA9ICd4cycgfCAnc20nIHwgJ21kJyB8ICdsZycgfCAneGwnIHwgJ2FsbCc7XHJcblxyXG5leHBvcnQgdHlwZSBCdXR0b25WaXNpYmxlID0gJ2Rpc2FibGVkJyB8ICdoaWRlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJdGVtc0NvbnRyb2wge1xyXG4gIHN0YXJ0OiBudW1iZXI7XHJcbiAgZW5kOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBWZXJ0aWNhbCB7XHJcbiAgZW5hYmxlZDogYm9vbGVhbjtcclxuICBoZWlnaHQ6IG51bWJlcjtcclxuICAvLyBudW1IZWlnaHQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOZ3VCdXR0b24ge1xyXG4gIHZpc2liaWxpdHk/OiBCdXR0b25WaXNpYmxlO1xyXG4gIGVsYXN0aWM/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUb3VjaCB7XHJcbiAgYWN0aXZlPzogYm9vbGVhbjtcclxuICBzd2lwZTogc3RyaW5nO1xyXG4gIHZlbG9jaXR5OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUcmFuc2Zyb20ge1xyXG4gIHB1YmxpYyB4bD8gPSAwO1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB4cyA9IDAsIHB1YmxpYyBzbSA9IDAsIHB1YmxpYyBtZCA9IDAsIHB1YmxpYyBsZyA9IDAsIHB1YmxpYyBhbGwgPSAwKSB7fVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIERlZmF1bHQgdmFsdWVzXHJcbiAqIHtzbTogNzY4LCBtZDogOTkyLCBsZzogMTIwMCwgeGw6IDEyMDB9XHJcbiAqXHJcbiAqIEJvb3RzdHJhcCB2YWx1ZXM6XHJcbiAqIHtzbTogNTc2LCBtZDogNzY4LCBsZzogOTkyLCB4bDogMTIwMH1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBCcmVha3BvaW50cyB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHNtID0gNzY4LCBwdWJsaWMgbWQgPSA5OTIsIHB1YmxpYyBsZyA9IDEyMDAsIHB1YmxpYyB4bCA9IDEyMDApIHt9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOZ3VDYXJvdXNlbENvbmZpZyB7XHJcbiAgZ3JpZDogVHJhbnNmcm9tO1xyXG4gIGdyaWRCcmVha3BvaW50cz86IEJyZWFrcG9pbnRzO1xyXG4gIHNsaWRlPzogbnVtYmVyO1xyXG4gIHNwZWVkPzogbnVtYmVyO1xyXG4gIGludGVydmFsPzogQ2Fyb3VzZWxJbnRlcnZhbDtcclxuICBhbmltYXRpb24/OiBBbmltYXRlO1xyXG4gIHBvaW50PzogUG9pbnQ7XHJcbiAgdHlwZT86IHN0cmluZztcclxuICBsb2FkPzogbnVtYmVyO1xyXG4gIGN1c3RvbT86IEN1c3RvbTtcclxuICBsb29wPzogYm9vbGVhbjtcclxuICB0b3VjaD86IGJvb2xlYW47XHJcbiAgZWFzaW5nPzogc3RyaW5nO1xyXG4gIFJUTD86IGJvb2xlYW47XHJcbiAgYnV0dG9uPzogTmd1QnV0dG9uO1xyXG4gIHZlcnRpY2FsPzogVmVydGljYWw7XHJcbiAgdmVsb2NpdHk/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEN1c3RvbSA9ICdiYW5uZXInO1xyXG5leHBvcnQgdHlwZSBBbmltYXRlID0gJ2xhenknO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQb2ludCB7XHJcbiAgdmlzaWJsZTogYm9vbGVhbjtcclxuICBoaWRlT25TaW5nbGVTbGlkZT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0aW9uIHtcclxuICB0eXBlPzogQW5pbWF0ZTtcclxuICBhbmltYXRlU3R5bGVzPzogQW5pbWF0aW9uU3R5bGVzO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvblN0eWxlcyB7XHJcbiAgc3R5bGU/OiBzdHJpbmc7XHJcbiAgb3Blbj86IHN0cmluZztcclxuICBjbG9zZT86IHN0cmluZztcclxuICBzdGFnZ2VyPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhcm91c2VsSW50ZXJ2YWwge1xyXG4gIHRpbWluZzogbnVtYmVyO1xyXG4gIGluaXRpYWxEZWxheT86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE5ndUNhcm91c2VsT3V0bGV0Q29udGV4dDxUPiB7XHJcbiAgLyoqIERhdGEgZm9yIHRoZSBub2RlLiAqL1xyXG4gICRpbXBsaWNpdDogVDtcclxuXHJcbiAgLyoqIERlcHRoIG9mIHRoZSBub2RlLiAqL1xyXG4gIGxldmVsOiBudW1iZXI7XHJcblxyXG4gIC8qKiBJbmRleCBsb2NhdGlvbiBvZiB0aGUgbm9kZS4gKi9cclxuICBpbmRleD86IG51bWJlcjtcclxuXHJcbiAgLyoqIExlbmd0aCBvZiB0aGUgbnVtYmVyIG9mIHRvdGFsIGRhdGFOb2Rlcy4gKi9cclxuICBjb3VudD86IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoZGF0YTogVCkge1xyXG4gICAgdGhpcy4kaW1wbGljaXQgPSBkYXRhO1xyXG4gIH1cclxufVxyXG4iXX0=