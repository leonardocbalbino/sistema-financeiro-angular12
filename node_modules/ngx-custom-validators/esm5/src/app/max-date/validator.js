import { FormControl, NgModel, Validators } from '@angular/forms';
import { isDate, isPresent, parseDate } from '../util/lang';
export var maxDate = function (maxInput) {
    var value;
    var subscribe = false;
    var maxValue = maxInput;
    var isForm = maxInput instanceof FormControl || maxInput instanceof NgModel;
    return function (control) {
        if (!subscribe && isForm) {
            subscribe = true;
            maxInput.valueChanges.subscribe(function () {
                control.updateValueAndValidity();
            });
        }
        if (isForm) {
            maxValue = maxInput.value;
        }
        value = parseDate(maxValue);
        if (!isDate(value) && !(value instanceof Function)) {
            if (value == null) {
                return null;
            }
            else if (isForm) {
                return { maxDate: { error: 'maxDate is invalid' } };
            }
            else {
                throw Error('maxDate value must be or return a formatted date');
            }
        }
        if (isPresent(Validators.required(control))) {
            return null;
        }
        var d = new Date(parseDate(control.value)).getTime();
        if (!isDate(d)) {
            return { value: true };
        }
        if (value instanceof Function) {
            value = value();
        }
        return d <= new Date(value).getTime() ? null : (isForm ? { maxDate: { control: maxInput, value: maxInput.value } } : { maxDate: { value: maxValue, control: undefined } });
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWN1c3RvbS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tYXgtZGF0ZS92YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFtQixXQUFXLEVBQUUsT0FBTyxFQUFpQyxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsSCxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFNUQsTUFBTSxDQUFDLElBQU0sT0FBTyxHQUFHLFVBQUMsUUFBYTtJQUNuQyxJQUFJLEtBQUssQ0FBQztJQUNWLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN0QixJQUFJLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDeEIsSUFBTSxNQUFNLEdBQUcsUUFBUSxZQUFZLFdBQVcsSUFBSSxRQUFRLFlBQVksT0FBTyxDQUFDO0lBQzlFLE9BQU8sVUFBQyxPQUF3QjtRQUM5QixJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU0sRUFBRTtZQUN4QixTQUFTLEdBQUcsSUFBSSxDQUFDO1lBQ2pCLFFBQVEsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDO2dCQUM5QixPQUFPLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxNQUFNLEVBQUU7WUFDVixRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztTQUMzQjtRQUVELEtBQUssR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLFFBQVEsQ0FBQyxFQUFFO1lBQ2xELElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDakIsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTSxJQUFJLE1BQU0sRUFBRTtnQkFDakIsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxvQkFBb0IsRUFBRSxFQUFFLENBQUM7YUFDckQ7aUJBQU07Z0JBQ0wsTUFBTSxLQUFLLENBQUMsa0RBQWtELENBQUMsQ0FBQzthQUNqRTtTQUNGO1FBRUQsSUFBSSxTQUFTLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO1lBQzNDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxJQUFNLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFFdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNkLE9BQU8sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDeEI7UUFDRCxJQUFJLEtBQUssWUFBWSxRQUFRLEVBQUU7WUFDN0IsS0FBSyxHQUFHLEtBQUssRUFBRSxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdLLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgRm9ybUNvbnRyb2wsIE5nTW9kZWwsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgaXNEYXRlLCBpc1ByZXNlbnQsIHBhcnNlRGF0ZSB9IGZyb20gJy4uL3V0aWwvbGFuZyc7XG5cbmV4cG9ydCBjb25zdCBtYXhEYXRlID0gKG1heElucHV0OiBhbnkpOiBWYWxpZGF0b3JGbiA9PiB7XG4gIGxldCB2YWx1ZTtcbiAgbGV0IHN1YnNjcmliZSA9IGZhbHNlO1xuICBsZXQgbWF4VmFsdWUgPSBtYXhJbnB1dDtcbiAgY29uc3QgaXNGb3JtID0gbWF4SW5wdXQgaW5zdGFuY2VvZiBGb3JtQ29udHJvbCB8fCBtYXhJbnB1dCBpbnN0YW5jZW9mIE5nTW9kZWw7XG4gIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyA9PiB7XG4gICAgaWYgKCFzdWJzY3JpYmUgJiYgaXNGb3JtKSB7XG4gICAgICBzdWJzY3JpYmUgPSB0cnVlO1xuICAgICAgbWF4SW5wdXQudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRm9ybSkge1xuICAgICAgbWF4VmFsdWUgPSBtYXhJbnB1dC52YWx1ZTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IHBhcnNlRGF0ZShtYXhWYWx1ZSk7XG5cbiAgICBpZiAoIWlzRGF0ZSh2YWx1ZSkgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2UgaWYgKGlzRm9ybSkge1xuICAgICAgICByZXR1cm4geyBtYXhEYXRlOiB7IGVycm9yOiAnbWF4RGF0ZSBpcyBpbnZhbGlkJyB9IH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcignbWF4RGF0ZSB2YWx1ZSBtdXN0IGJlIG9yIHJldHVybiBhIGZvcm1hdHRlZCBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzUHJlc2VudChWYWxpZGF0b3JzLnJlcXVpcmVkKGNvbnRyb2wpKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKHBhcnNlRGF0ZShjb250cm9sLnZhbHVlKSkuZ2V0VGltZSgpO1xuXG4gICAgaWYgKCFpc0RhdGUoZCkpIHtcbiAgICAgIHJldHVybiB7IHZhbHVlOiB0cnVlIH07XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgPD0gbmV3IERhdGUodmFsdWUpLmdldFRpbWUoKSA/IG51bGwgOiAoaXNGb3JtID8geyBtYXhEYXRlOiB7IGNvbnRyb2w6IG1heElucHV0LCB2YWx1ZTogbWF4SW5wdXQudmFsdWUgfSB9IDogeyBtYXhEYXRlOiB7IHZhbHVlOiBtYXhWYWx1ZSwgY29udHJvbDogdW5kZWZpbmVkIH0gfSk7XG4gIH07XG59O1xuIl19