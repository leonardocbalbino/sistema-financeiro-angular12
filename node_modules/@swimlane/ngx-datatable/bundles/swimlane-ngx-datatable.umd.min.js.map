{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@swimlane/ngx-datatable/lib/services/scrollbar-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/dimensions-helper.service.ts","ng://@swimlane/ngx-datatable/lib/services/column-changes.service.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer-template.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/visibility.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/draggable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/resizeable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/orderable.directive.ts","ng://@swimlane/ngx-datatable/lib/directives/long-press.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/scroller.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-group-header.directive.ts","ng://@swimlane/ngx-datatable/lib/utils/column-prop-getters.ts","ng://@swimlane/ngx-datatable/lib/utils/tree.ts","ng://@swimlane/ngx-datatable/lib/types/column-mode.type.ts","ng://@swimlane/ngx-datatable/lib/types/selection.type.ts","ng://@swimlane/ngx-datatable/lib/types/sort.type.ts","ng://@swimlane/ngx-datatable/lib/types/contextmenu.type.ts","ng://@swimlane/ngx-datatable/lib/utils/camel-case.ts","ng://@swimlane/ngx-datatable/lib/utils/id.ts","ng://@swimlane/ngx-datatable/lib/utils/column-helper.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-header.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column-cell.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/tree.directive.ts","ng://@swimlane/ngx-datatable/lib/components/columns/column.directive.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail-template.directive.ts","ng://@swimlane/ngx-datatable/lib/components/row-detail/row-detail.directive.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.directive.ts","ng://@swimlane/ngx-datatable/lib/utils/column.ts","ng://@swimlane/ngx-datatable/lib/utils/row-height-cache.ts","ng://@swimlane/ngx-datatable/lib/utils/prefixes.ts","ng://@swimlane/ngx-datatable/lib/utils/translate.ts","ng://@swimlane/ngx-datatable/lib/types/sort-direction.type.ts","ng://@swimlane/ngx-datatable/lib/components/body/body.component.ts","ng://@swimlane/ngx-datatable/lib/components/header/header.component.ts","ng://@swimlane/ngx-datatable/lib/utils/throttle.ts","ng://@swimlane/ngx-datatable/lib/utils/math.ts","ng://@swimlane/ngx-datatable/lib/utils/sort.ts","ng://@swimlane/ngx-datatable/lib/utils/keys.ts","ng://@swimlane/ngx-datatable/lib/components/datatable.component.ts","ng://@swimlane/ngx-datatable/lib/components/header/header-cell.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/footer.component.ts","ng://@swimlane/ngx-datatable/lib/components/footer/pager.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/progress-bar.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-row-wrapper.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/body-cell.component.ts","ng://@swimlane/ngx-datatable/lib/utils/selection.ts","ng://@swimlane/ngx-datatable/lib/components/body/selection.component.ts","ng://@swimlane/ngx-datatable/lib/components/body/summary/summary-row.component.ts","ng://@swimlane/ngx-datatable/lib/types/click.type.ts","ng://@swimlane/ngx-datatable/lib/ngx-datatable.module.ts","ng://@swimlane/ngx-datatable/lib/utils/elm-from-point.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__values","o","Symbol","iterator","m","next","value","done","TypeError","__read","e","ar","push","error","__spread","concat","ScrollbarHelper","document","width","getWidth","outer","createElement","style","visibility","msOverflowStyle","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","Inject","args","DOCUMENT","Injectable","DimensionsHelper","getDimensions","element","getBoundingClientRect","ColumnChangesService","columnInputChanges","Subject","asObservable","onInputChange","DataTableFooterTemplateDirective","template","TemplateRef","Directive","selector","VisibilityDirective","zone","isVisible","visible","EventEmitter","ngOnInit","runCheck","ngOnDestroy","clearTimeout","timeout","onVisibilityChange","_this","run","emit","check","_a","nativeElement","offsetHeight","runOutsideAngular","setTimeout","ElementRef","NgZone","HostBinding","Output","DraggableDirective","dragX","dragY","dragStart","dragging","dragEnd","isDragging","ngOnChanges","changes","currentValue","dragModel","onMousedown","_destroySubscription","onMouseup","event","classList","remove","subscription","model","contains","preventDefault","mouseDownPos_1","x","clientX","y","clientY","mouseup","fromEvent","subscribe","ev","mouseMoveSub","pipe","takeUntil","move","add","mouseDownPos","left","top","unsubscribe","undefined","Input","ResizeableDirective","renderer","resizeEnabled","resize","resizing","ngAfterViewInit","renderer2","resizeHandle","addClass","destroyNode","closed","clientWidth","isHandle","initialWidth","mouseDownScreenX","screenX","stopPropagation","newWidth","overMinWidth","minWidth","underMaxWidth","maxWidth","Renderer2","HostListener","host","[class.resizeable]","OrderableDirective","differs","reorder","targetChanged","differ","find","create","ngAfterContentInit","updateSubscriptions","draggables","bind","forEach","diffs","diff","createMapDiffs","unsubscribe_1","previousValue","forEachAddedItem","onDragStart","onDragging","onDragEnd","forEachRemovedItem","positions","_b","toArray","_c","dragger","elm","parseInt","offsetLeft","toString","prop","right","index","prevPos","isTarget","lastDraggingIndex","prevIndex","newIndex","initialIndex","targets","elementsFromPoint","pos","this_1","el","reduce","acc","curr","$$id","KeyValueDiffers","ContentChildren","descendants","LongPressDirective","pressEnabled","duration","longPressStart","longPressing","longPressEnd","mouseX","mouseY","pressing","isLongPressing","onMouseDown","which","pressModel","mouseEvent","onMouseMove","loop","xThres","Math","abs","yThres","endPress","ScrollerComponent","ngZone","scrollbarV","scrollbarH","scroll","scrollYPos","scrollXPos","prevScrollYPos","prevScrollXPos","_scrollEventListener","parentElement","onScrolled","addEventListener","removeEventListener","setOffset","offsetY","scrollTop","dom","currentTarget","requestAnimationFrame","scrollLeft","updateOffset","direction","Component","class","changeDetection","ChangeDetectionStrategy","OnPush","DatatableGroupHeaderTemplateDirective","DatatableGroupHeaderDirective","rowHeight","toggle","_templateInput","_templateQuery","toggleExpandGroup","group","type","expandAllGroups","collapseAllGroups","ContentChild","read","static","emptyStringGetter","getterForProp","numericIndexGetter","indexOf","deepValueGetter","shallowValueGetter","row","obj","fieldName","path","current","split","optionalGetterForProp","groupRowsByParents","rows","from","to","nodeById","l","node","TreeNode","uniqIDs","arr","item","toValue","parent_1","fromValue","parent","children","resolvedRows_1","flatten","ColumnMode","SelectionType","SortType","ContextmenuType","level","treeStatus","f","recursive","child","Array","slice","camelCase","str","replace","trim","toLowerCase","a","b","toUpperCase","deCamelCase","match","id","random","pow","setColumnDefaults","columns","treeColumnFound","columns_1","columns_1_1","column","isNullOrUndefined","name","$$valueGetter","String","resizeable","sortable","draggable","canAutoResize","isTreeColumn","translateTemplates","templates","result","templates_1","templates_1_1","temp","col","props","getOwnPropertyNames","props_1","e_3","props_1_1","headerTemplate","cellTemplate","summaryFunc","summaryTemplate","DataTableColumnHeaderDirective","DataTableColumnCellDirective","DataTableColumnCellTreeToggle","DataTableColumnDirective","columnChangesService","isFirstChange","_cellTemplateInput","_cellTemplateQuery","_headerTemplateInput","_headerTemplateQuery","_treeToggleTemplateInput","_treeToggleTemplateQuery","DatatableRowDetailTemplateDirective","DatatableRowDetailDirective","toggleExpandRow","expandAllRows","collapseAllRows","DatatableFooterDirective","columnsByPin","cols","ret","center","cols_1","cols_1_1","frozenLeft","frozenRight","columnGroupWidths","groups","all","columnTotalWidth","total","floor","totalWidth","parseFloat","columnsTotalWidth","columns_2","columns_2_1","columnsByPinArr","val","colsByPinArr","colsByPin","RowHeightCache","treeArray","clearCache","initCache","details","detailRowHeight","externalVirtual","rowCount","rowIndexes","rowExpansions","isFn","isDetailFn","isNaN","Error","currentRowHeight","expanded","has","get","update","getRowIndex","scrollY","calcRowIndex","atRowIndex","byRowHeight","query","atIndex","sum","queryBetween","atIndexA","atIndexB","dataLength","blockSize","nextPos","cache","testStyle","styles","window","getComputedStyle","documentElement","join","pre","RegExp","lowercase","css","js","substr","prefix","getVendorPrefixedName","property","transform","backfaceVisibility","hasCSSTransforms","hasCSS3DTransforms","ua","navigator","userAgent","isSafari","test","translateXY","SortDirection","DataTableBodyComponent","cd","selected","page","activate","select","detailToggle","rowContextmenu","treeAction","rowHeightsCache","indexes","WeakMap","getDetailRowHeight","rowDetail","rowTrackingFn","idx","trackByProp","_pageSize","recalcLayout","_rows","_columns","_offset","virtualization","_rowCount","innerWidth","_bodyHeight","selectionType","listener","toggleRowExpansion","toggleAllRows","updateIndexes","updateRows","markForCheck","groupHeader","updateOffsetY","offset","scroller","rowIndex","pageSize","onBodyScroll","offsetX","updatePage","first","ceil","last","groupedRows","set","g","_idx","getRowHeight","getGroupHeight","getRowAndDetailHeight","getRowExpanded","getRowsStyles","getBottomSummaryRowStyles","position","hideIndicator","loadingIndicator","height","bodyHeight","externalPaging","max","min","refreshRowHeightCache","Set","getAdjustedViewPortIndex","viewPortFirstRowIndex","rowExpandedIdx","getRowExpandedIdx","splice","currentIndex","columnTrackingFn","stylesByGroup","widths","bodyWidth","groupExpansionDefault","rowId","rowIdentity","findIndex","onTreeAction","ChangeDetectorRef","ViewChild","DataTableHeaderComponent","sort","columnContextmenu","_columnGroupWidths","_styleByGroup","destroyed","_innerWidth","colByPin","setStylesByGroup","_headerHeight","_columnsByPin","_offsetX","onLongPressStart","dragEventTarget","onLongPressEnd","trackByGroups","colGroup","onColumnResized","prevValue","newValue","onColumnReordered","getColumn","targetMarkerContext","onTargetChanged","oldColumn","newColumn","leftColumnCount","centerColumnCount","onSort","sorts","calcNewSorts","map","dir","sortType","single","calcStylesByGroup","detectChanges","throttle","func","wait","options","context","previous","later","leading","Date","now","remaining","trailing","throttleable","descriptor","configurable","enumerable","getTotalFlexGrow","totalFlexGrow","flexGrow","adjustColumnWidths","allColumns","expectedWidth","columnsWidth","colsByGroup","attr","e_2","_d","hasMinWidth","remainingWidth","widthPerFlexPoint","_e","_f","scaleColumns","forceFillColumnWidths","startIdx","allowBleed","defaultColWidth","columnsToResize","filter","columnsToResize_1","columnsToResize_1_1","$$oldWidth","additionWidthPerColumn","exceedsWindow","contentWidth","getContentWidth","columnsProcessed","columnsToResize_2","e_5","columnsToResize_2_1","newSize","removeProcessedColumns","columnsProcessed_1","columnsProcessed_1_1","allColumns_1","allColumns_1_1","nextSortDir","asc","orderByComparator","isFinite","sortRows","dirs","rowToIndexMap","Map","comparator","cachedDirs","valueGetter","compareFn","rowA","rowB","cachedDirs_1","cachedDirs_1_1","cachedDir","propA","propB","comparison","Keys","DatatableComponent","scrollbarHelper","dimensionsHelper","configuration","columnMode","standard","headerHeight","footerHeight","externalSorting","reorderable","swapColumns","cssClasses","sortAscending","sortDescending","pagerLeftArrow","pagerRightArrow","pagerPrevious","pagerNext","messages","emptyMessage","totalMessage","selectedMessage","selectAllRowsOnPage","summaryRow","summaryHeight","summaryPosition","tableContextmenu","BehaviorSubject","_count","_subscriptions","_groupRowsBy","rowDiffer","_internalRows","sortInternalRows","treeFromRelation","treeToRelation","recalculate","groupArrayBy","_internalColumns","recalculateColumns","_limit","checkbox","cell","multi","multiClick","_columnTemplates","translateColumns","allRowsSelected","bodyComponent","rowsOnPage","count","limit","columnTemplates","v","listenForColumnInputChanges","originalArray","groupBy","ngDoCheck","recalculatePages","recalculateDims","onWindowResize","forceIdx","force","flex","dims","calcPageSize","calcRowCount","onBodyPage","onFooterPage","size","onColumnContextmenu","header","content","onRowContextmenu","onColumnResize","onColumnReorder","prevCol","movedCol","onColumnSort","onHeaderSelect","allSelected","onBodySelect","columnInputChanges$","notifyOnChanges","SkipSelf","Optional","encapsulation","ViewEncapsulation","None","DataTableHeaderCellComponent","sortFn","selectFn","cellContext","sortDir","_allRowsSelected","_column","_sorts","calcSortDir","sortClass","calcSortClass","cls","headerClass","res","keys","keys_1","keys_1_1","k","checkboxable","headerCheckboxable","onContextmenu","$event","sortAscendingIcon","sortDescendingIcon","DataTableFooterComponent","selectedCount","DataTablePagerComponent","change","_page","_size","pages","calcPages","canPrevious","canNext","totalPages","prevPage","selectPage","nextPage","startPage","endPage","isMaxSized","maxSize","num","number","text","ProgressBarComponent","DataTableBodyRowComponent","_groupStyles","_element","_rowDiffer","buildStylesByGroup","isSelected","rowClass","onActivate","cellIndex","rowElement","onKeyDown","keyCode","isTargetRow","return","down","up","onMouseenter","DataTableRowWrapperComponent","groupContext","rowContext","_expanded","_rowIndex","getGroupHeaderStyle","DataTableBodyCellComponent","isFocused","onCheckboxChangeFn","onCheckboxChange","activateFn","_group","checkValueUpdates","_rowHeight","_isSelected","_row","_treeStatus","status","cellClass","clear","userPipe","sanitizedValue","stripHtml","onFocus","onBlur","onClick","cellElement","onDblClick","isTargetCell","html","calcLeftMargin","levelIndent","treeLevelIndent","ViewContainerRef","selectRows","comparefn","selectedIndex","selectRowsBetween","reverse","range","start","end","DataTableSelectionComponent","selectRow","selectEnabled","chkbox","shiftKey","getRowSelectedIdx","ctrlKey","metaKey","selectCheck","onKeyboardFocus","isCellSelection","focusCell","focusRow","nextRowElement","getPrevNextRow","focus","focusElement","previousElementSibling","nextElementSibling","nextCellElement","getElementsByClassName","getRowSelected","defaultSumFunc","cells","cellsWithValues","some","noopSumFunc","ClickType","DataTableSummaryRowComponent","updateInternalColumns","updateValues","cellsFromSingleColumn","sumFunc","getSummaryFunction","NgxDatatableModule","forRoot","ngModule","NgxDatatableModule_1","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports","elements","previousPointerEvents","elementFromPoint","getPropertyValue","priority","getPropertyPriority","setProperty"],"mappings":";;;;;;;;;;;;;;oFA6BO,IAAIA,EAAW,WAQlB,OAPAA,EAAWC,OAAOC,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAII,KADTL,EAAIG,UAAUF,GACOJ,OAAOS,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,IAE9E,OAAON,IAEKU,MAAMC,KAAMP,YAezB,SAASQ,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HC,EAAvHC,EAAId,UAAUC,OAAQc,EAAID,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOlB,OAAOsB,yBAAyBN,EAAQC,GAAOC,EACrH,GAAuB,iBAAZK,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAAST,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAId,EAAIW,EAAWR,OAAS,EAAGH,GAAK,EAAGA,KAASe,EAAIJ,EAAWX,MAAIiB,GAAKD,EAAI,EAAID,EAAEE,GAAKD,EAAI,EAAID,EAAEH,EAAQC,EAAKI,GAAKF,EAAEH,EAAQC,KAASI,GAChJ,OAAOD,EAAI,GAAKC,GAAKrB,OAAOyB,eAAeT,EAAQC,EAAKI,GAAIA,EAGzD,SAASK,EAAQC,EAAYC,GAChC,OAAO,SAAUZ,EAAQC,GAAOW,EAAUZ,EAAQC,EAAKU,IAiDpD,SAASE,EAASC,GACrB,IAAI3B,EAAsB,mBAAX4B,QAAyBA,OAAOC,SAAUC,EAAI9B,GAAK2B,EAAE3B,GAAIC,EAAI,EAC5E,GAAI6B,EAAG,OAAOA,EAAEtB,KAAKmB,GACrB,GAAIA,GAAyB,iBAAbA,EAAEvB,OAAqB,MAAO,CAC1C2B,KAAM,WAEF,OADIJ,GAAK1B,GAAK0B,EAAEvB,SAAQuB,OAAI,GACrB,CAAEK,MAAOL,GAAKA,EAAE1B,KAAMgC,MAAON,KAG5C,MAAM,IAAIO,UAAUlC,EAAI,0BAA4B,mCAGjD,SAASmC,EAAOR,EAAGzB,GACtB,IAAI4B,EAAsB,mBAAXF,QAAyBD,EAAEC,OAAOC,UACjD,IAAKC,EAAG,OAAOH,EACf,IAAmBT,EAAYkB,EAA3BnC,EAAI6B,EAAEtB,KAAKmB,GAAOU,EAAK,GAC3B,IACI,WAAc,IAANnC,GAAgBA,KAAM,MAAQgB,EAAIjB,EAAE8B,QAAQE,MAAMI,EAAGC,KAAKpB,EAAEc,OAExE,MAAOO,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQrB,IAAMA,EAAEe,OAASH,EAAI7B,EAAU,SAAI6B,EAAEtB,KAAKP,GAE1D,QAAkB,GAAImC,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAIpC,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3CoC,EAAKA,EAAGI,OAAON,EAAOhC,UAAUF,KACpC,OAAOoC,mBClIT,SAAAK,EAAsCC,GAAAjC,KAAAiC,SAAAA,EAFtCjC,KAAAkC,MAAgBlC,KAAKmC,WAuBvB,OAnBEH,EAAApC,UAAAuC,SAAA,WACE,IAAMC,EAAQpC,KAAKiC,SAASI,cAAc,OAC1CD,EAAME,MAAMC,WAAa,SACzBH,EAAME,MAAMJ,MAAQ,QACpBE,EAAME,MAAME,gBAAkB,YAC9BxC,KAAKiC,SAASQ,KAAKC,YAAYN,GAE/B,IAAMO,EAAgBP,EAAMQ,YAC5BR,EAAME,MAAMO,SAAW,SAEvB,IAAMC,EAAQ9C,KAAKiC,SAASI,cAAc,OAC1CS,EAAMR,MAAMJ,MAAQ,OACpBE,EAAMM,YAAYI,GAElB,IAAMC,EAAkBD,EAAMF,YAG9B,OAFAR,EAAMY,WAAWC,YAAYb,GAEtBO,EAAgBI,qEAnBZG,EAAAA,OAAMC,KAAA,CAACC,EAAAA,eAHTpB,EAAe/B,EAAA,CAD3BoD,EAAAA,aAIcxC,EAAA,EAAAqC,EAAAA,OAAOE,EAAAA,YAHTpB,mBCDb,SAAAsB,KAIA,OAHEA,EAAA1D,UAAA2D,cAAA,SAAcC,GACZ,OAAOA,EAAQC,yBAFNH,EAAgBrD,EAAA,CAD5BoD,EAAAA,cACYC,mBCEb,SAAAI,IACU1D,KAAA2D,mBAAqB,IAAIC,EAAAA,QASnC,OAPEzE,OAAAyB,eAAI8C,EAAA9D,UAAA,sBAAmB,KAAvB,WACE,OAAOI,KAAK2D,mBAAmBE,gDAGjCH,EAAA9D,UAAAkE,cAAA,WACE9D,KAAK2D,mBAAmBtC,QARfqC,EAAoBzD,EAAA,CADhCoD,EAAAA,cACYK,mBCLX,SAAAK,EAAmBC,GAAAhE,KAAAgE,SAAAA,EACrB,gDAD+BC,EAAAA,eADlBF,EAAgC9D,EAAA,CAD5CiE,EAAAA,UAAU,CAAEC,SAAU,qCACVJ,mBCmBX,SAAAK,EAAoBZ,EAA6Ba,GAA7BrE,KAAAwD,QAAAA,EAA6BxD,KAAAqE,KAAAA,EANjDrE,KAAAsE,WAAqB,EAEXtE,KAAAuE,QAA6B,IAAIC,EAAAA,aAwC7C,OAlCEJ,EAAAxE,UAAA6E,SAAA,WACEzE,KAAK0E,YAGPN,EAAAxE,UAAA+E,YAAA,WACEC,aAAa5E,KAAK6E,UAGpBT,EAAAxE,UAAAkF,mBAAA,WAAA,IAAAC,EAAA/E,KAEEA,KAAKqE,KAAKW,KAAI,WACZD,EAAKT,WAAY,EACjBS,EAAKR,QAAQU,MAAK,OAItBb,EAAAxE,UAAA8E,SAAA,WAAA,IAAAK,EAAA/E,KACQkF,EAAQ,WAEN,IAAAC,EAAAJ,EAAAvB,QAAA4B,cAAEC,EAAAF,EAAAE,aAAczC,EAAAuC,EAAAvC,YAElByC,GAAgBzC,GAClBgC,aAAaG,EAAKF,SAClBE,EAAKD,uBAELF,aAAaG,EAAKF,SAClBE,EAAKV,KAAKiB,mBAAkB,WAC1BP,EAAKF,QAAUU,YAAW,WAAM,OAAAL,MAAS,SAK/ClF,KAAK6E,QAAUU,YAAW,WAAM,OAAAL,iDAlCLM,EAAAA,kBAA0BC,EAAAA,UANvDxF,EAAA,CADCyF,EAAAA,YAAY,kDAGHzF,EAAA,CAAT0F,EAAAA,wCAJUvB,EAAmBnE,EAAA,CAD/BiE,EAAAA,UAAU,CAAEC,SAAU,0BACVC,mBCaX,SAAAwB,EAAYpC,GAXHxD,KAAA6F,OAAiB,EACjB7F,KAAA8F,OAAiB,EAEhB9F,KAAA+F,UAA+B,IAAIvB,EAAAA,aACnCxE,KAAAgG,SAA8B,IAAIxB,EAAAA,aAClCxE,KAAAiG,QAA6B,IAAIzB,EAAAA,aAG3CxE,KAAAkG,YAAsB,EAIpBlG,KAAKwD,QAAUA,EAAQ4B,cAgF3B,OA7EEQ,EAAAhG,UAAAuG,YAAA,SAAYC,GACNA,EAAyB,iBAAKA,EAAyB,gBAAEC,cAAgBrG,KAAKsG,UAAUN,UAC1FhG,KAAKuG,YAAYH,EAAyB,gBAAEC,eAIhDT,EAAAhG,UAAA+E,YAAA,WACE3E,KAAKwG,wBAGPZ,EAAAhG,UAAA6G,UAAA,SAAUC,GACH1G,KAAKkG,aAEVlG,KAAKkG,YAAa,EAClBlG,KAAKwD,QAAQmD,UAAUC,OAAO,YAE1B5G,KAAK6G,eACP7G,KAAKwG,uBACLxG,KAAKiG,QAAQhB,KAAK,CAChByB,MAAKA,EACLlD,QAASxD,KAAKwD,QACdsD,MAAO9G,KAAKsG,eAKlBV,EAAAhG,UAAA2G,YAAA,SAAYG,GAAZ,IAAA3B,EAAA/E,KAIE,GAFgC0G,EAAMvG,OAAQwG,UAAUI,SAAS,eAE/C/G,KAAK6F,OAAS7F,KAAK8F,OAAQ,CAC3CY,EAAMM,iBACNhH,KAAKkG,YAAa,EAElB,IAAMe,EAAe,CAAEC,EAAGR,EAAMS,QAASC,EAAGV,EAAMW,SAE5CC,EAAUC,EAAAA,UAAUtF,SAAU,WACpCjC,KAAK6G,aAAeS,EAAQE,WAAU,SAACC,GAAmB,OAAA1C,EAAK0B,UAAUgB,MAEzE,IAAMC,EAAeH,EAAAA,UAAUtF,SAAU,aACtC0F,KAAKC,EAAAA,UAAUN,IACfE,WAAU,SAACC,GAAmB,OAAA1C,EAAK8C,KAAKJ,EAAIR,MAE/CjH,KAAK6G,aAAaiB,IAAIJ,GAEtB1H,KAAK+F,UAAUd,KAAK,CAClByB,MAAKA,EACLlD,QAASxD,KAAKwD,QACdsD,MAAO9G,KAAKsG,cAKlBV,EAAAhG,UAAAiI,KAAA,SAAKnB,EAAmBqB,GACtB,GAAK/H,KAAKkG,WAAV,CAEA,IAAMgB,EAAIR,EAAMS,QAAUY,EAAab,EACjCE,EAAIV,EAAMW,QAAUU,EAAaX,EAEnCpH,KAAK6F,QAAO7F,KAAKwD,QAAQlB,MAAM0F,KAAUd,EAAC,MAC1ClH,KAAK8F,QAAO9F,KAAKwD,QAAQlB,MAAM2F,IAASb,EAAC,MAE7CpH,KAAKwD,QAAQmD,UAAUmB,IAAI,YAE3B9H,KAAKgG,SAASf,KAAK,CACjByB,MAAKA,EACLlD,QAASxD,KAAKwD,QACdsD,MAAO9G,KAAKsG,cAIRV,EAAAhG,UAAA4G,qBAAR,WACMxG,KAAK6G,eACP7G,KAAK6G,aAAaqB,cAClBlI,KAAK6G,kBAAesB,6CA9EH3C,EAAAA,cAbZvF,EAAA,CAARmI,EAAAA,+CACQnI,EAAA,CAARmI,EAAAA,yCACQnI,EAAA,CAARmI,EAAAA,qCACQnI,EAAA,CAARmI,EAAAA,qCAESnI,EAAA,CAAT0F,EAAAA,0CACS1F,EAAA,CAAT0F,EAAAA,yCACS1F,EAAA,CAAT0F,EAAAA,wCARUC,EAAkB3F,EAAA,CAD9BiE,EAAAA,UAAU,CAAEC,SAAU,iBACVyB,mBCmBX,SAAAyC,EAAY7E,EAA6B8E,GAAAtI,KAAAsI,SAAAA,EAXhCtI,KAAAuI,eAAyB,EAIxBvI,KAAAwI,OAA4B,IAAIhE,EAAAA,aAI1CxE,KAAAyI,UAAoB,EAIlBzI,KAAKwD,QAAUA,EAAQ4B,cAuE3B,OApEEiD,EAAAzI,UAAA8I,gBAAA,WACE,IAAMC,EAAY3I,KAAKsI,SACvBtI,KAAK4I,aAAeD,EAAUtG,cAAc,QACxCrC,KAAKuI,cACPI,EAAUE,SAAS7I,KAAK4I,aAAc,iBAEtCD,EAAUE,SAAS7I,KAAK4I,aAAc,gCAExCD,EAAUjG,YAAY1C,KAAKwD,QAASxD,KAAK4I,eAG3CP,EAAAzI,UAAA+E,YAAA,WACE3E,KAAKwG,uBACDxG,KAAKsI,SAASQ,YAChB9I,KAAKsI,SAASQ,YAAY9I,KAAK4I,cACtB5I,KAAK4I,cACd5I,KAAKsI,SAASrF,YAAYjD,KAAKsI,SAAStF,WAAWhD,KAAK4I,cAAe5I,KAAK4I,eAIhFP,EAAAzI,UAAA6G,UAAA,WACEzG,KAAKyI,UAAW,EAEZzI,KAAK6G,eAAiB7G,KAAK6G,aAAakC,SAC1C/I,KAAKwG,uBACLxG,KAAKwI,OAAOvD,KAAKjF,KAAKwD,QAAQwF,eAKlCX,EAAAzI,UAAA2G,YAAA,SAAYG,GADZ,IAAA3B,EAAA/E,KAEQiJ,EAAyBvC,EAAMvG,OAAQwG,UAAUI,SAAS,iBAC1DmC,EAAelJ,KAAKwD,QAAQwF,YAC5BG,EAAmBzC,EAAM0C,QAE/B,GAAIH,EAAU,CACZvC,EAAM2C,kBACNrJ,KAAKyI,UAAW,EAEhB,IAAMnB,EAAUC,EAAAA,UAAUtF,SAAU,WACpCjC,KAAK6G,aAAeS,EAAQE,WAAU,SAACC,GAAmB,OAAA1C,EAAK0B,eAE/D,IAAMiB,EAAeH,EAAAA,UAAUtF,SAAU,aACtC0F,KAAKC,EAAAA,UAAUN,IACfE,WAAU,SAAC9F,GAAkB,OAAAqD,EAAK8C,KAAKnG,EAAGwH,EAAcC,MAE3DnJ,KAAK6G,aAAaiB,IAAIJ,KAI1BW,EAAAzI,UAAAiI,KAAA,SAAKnB,EAAmBwC,EAAsBC,GAC5C,IACMG,EAAWJ,GADCxC,EAAM0C,QAAUD,GAG5BI,GAAgBvJ,KAAKwJ,UAAYF,GAAYtJ,KAAKwJ,SAClDC,GAAiBzJ,KAAK0J,UAAYJ,GAAYtJ,KAAK0J,SAErDH,GAAgBE,IAClBzJ,KAAKwD,QAAQlB,MAAMJ,MAAWoH,EAAQ,OAIlCjB,EAAAzI,UAAA4G,qBAAR,WACMxG,KAAK6G,eACP7G,KAAK6G,aAAaqB,cAClBlI,KAAK6G,kBAAesB,6CArEH3C,EAAAA,kBAA8BmE,EAAAA,aAX1C1J,EAAA,CAARmI,EAAAA,6CACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,wCAESnI,EAAA,CAAT0F,EAAAA,uCAyCD1F,EAAA,CADC2J,EAAAA,aAAa,YAAa,CAAC,4CA7CjBvB,EAAmBpI,EAAA,CAN/BiE,EAAAA,UAAU,CACTC,SAAU,eACV0F,KAAM,CACJC,qBAAsB,oBAGbzB,mBCMX,SAAA0B,EAAYC,EAAoD/H,GAAAjC,KAAAiC,SAAAA,EAVtDjC,KAAAiK,QAA6B,IAAIzF,EAAAA,aACjCxE,KAAAkK,cAAmC,IAAI1F,EAAAA,aAU/CxE,KAAKmK,OAASH,EAAQI,KAAK,IAAIC,SA+HnC,OA5HEN,EAAAnK,UAAA0K,mBAAA,WAEEtK,KAAKuK,sBACLvK,KAAKwK,WAAWpE,QAAQoB,UAAUxH,KAAKuK,oBAAoBE,KAAKzK,QAGlE+J,EAAAnK,UAAA+E,YAAA,WACE3E,KAAKwK,WAAWE,SAAQ,SAAApK,GACtBA,EAAEyF,UAAUmC,cACZ5H,EAAE0F,SAASkC,cACX5H,EAAE2F,QAAQiC,kBAId6B,EAAAnK,UAAA2K,oBAAA,WAAA,IAAAxF,EAAA/E,KACQ2K,EAAQ3K,KAAKmK,OAAOS,KAAK5K,KAAK6K,kBAEpC,GAAIF,EAAO,CACT,IAUMG,EAAc,SAAC3F,OAAE4F,EAAA5F,EAAA4F,cACjBA,IACFA,EAAchF,UAAUmC,cACxB6C,EAAc/E,SAASkC,cACvB6C,EAAc9E,QAAQiC,gBAI1ByC,EAAMK,kBAlBY,SAAC7F,OAAEkB,EAAAlB,EAAAkB,aAAc0E,EAAA5F,EAAA4F,cACjCD,EAAY,CAAEC,cAAaA,IAEvB1E,IACFA,EAAaN,UAAUyB,UAAUzC,EAAKkG,YAAYR,KAAK1F,IACvDsB,EAAaL,SAASwB,UAAUzC,EAAKmG,WAAWT,KAAK1F,IACrDsB,EAAaJ,QAAQuB,UAAUzC,EAAKoG,UAAUV,KAAK1F,QAcvD4F,EAAMS,mBAAmBN,KAI7Bf,EAAAnK,UAAAqL,YAAA,mBACEjL,KAAKqL,UAAY,GAEjB,IAAI9L,EAAI,MACR,IAAsB,IAAA+L,EAAAtK,EAAAhB,KAAKwK,WAAWe,WAASC,EAAAF,EAAAjK,QAAAmK,EAAAjK,KAAAiK,EAAAF,EAAAjK,OAAE,CAA5C,IAAMoK,EAAOD,EAAAlK,MACVoK,EAAMD,EAAQjI,QACdwE,EAAO2D,SAASD,EAAIE,WAAWC,WAAY,GACjD7L,KAAKqL,UAAUI,EAAQnF,UAAUwF,MAAQ,CACvC9D,KAAIA,EACJ+D,MAAO/D,EAAO2D,SAASD,EAAI9I,YAAYiJ,WAAY,GACnDG,MAAOzM,IACPiE,QAASkI,uGAKf3B,EAAAnK,UAAAsL,WAAA,SAAW/F,GAAEA,EAAA3B,YAASsD,EAAA3B,EAAA2B,MAAOJ,EAAAvB,EAAAuB,MACrBuF,EAAUjM,KAAKqL,UAAUvE,EAAMgF,MAC/B3L,EAASH,KAAKkM,SAASpF,EAAOJ,GAEhCvG,EACEH,KAAKmM,oBAAsBhM,EAAOZ,IACpCS,KAAKkK,cAAcjF,KAAK,CACtBmH,UAAWpM,KAAKmM,kBAChBE,SAAUlM,EAAOZ,EACjB+M,aAAcL,EAAQD,QAExBhM,KAAKmM,kBAAoBhM,EAAOZ,GAEzBS,KAAKmM,oBAAsBF,EAAQD,QAC5ChM,KAAKkK,cAAcjF,KAAK,CACtBmH,UAAWpM,KAAKmM,kBAChBG,aAAcL,EAAQD,QAExBhM,KAAKmM,kBAAoBF,EAAQD,QAIrCjC,EAAAnK,UAAAuL,UAAA,SAAUhG,OAAE3B,EAAA2B,EAAA3B,QAASsD,EAAA3B,EAAA2B,MAAOJ,EAAAvB,EAAAuB,MACpBuF,EAAUjM,KAAKqL,UAAUvE,EAAMgF,MAE/B3L,EAASH,KAAKkM,SAASpF,EAAOJ,GAChCvG,GACFH,KAAKiK,QAAQhF,KAAK,CAChBmH,UAAWH,EAAQD,MACnBK,SAAUlM,EAAOZ,EACjBuH,MAAKA,IAIT9G,KAAKmM,uBAAoBhE,EACzB3E,EAAQlB,MAAM0F,KAAO,QAGvB+B,EAAAnK,UAAAsM,SAAA,SAASpF,EAAYJ,GACnB,IAAInH,EAAI,EACF2H,EAAIR,EAAMQ,GAAKR,EAAMS,QACrBC,EAAIV,EAAMU,GAAKV,EAAMW,QACrBkF,EAAUvM,KAAKiC,SAASuK,kBAAkBtF,EAAGE,cAExC0E,GAET,IAAMW,EAAMC,EAAKrB,UAAUS,GAG3B,GAAIhF,EAAMgF,OAASA,GAAQS,EAAQnC,MAAK,SAACuC,GAAY,OAAAA,IAAOF,EAAIjJ,wBACvD,CACLiJ,IAAGA,EACHlN,EAACA,IAILA,YAZF,IAAK,IAAMuM,KAAQ9L,KAAKqL,UAAS,SAAtBS,0CAgBL/B,EAAAnK,UAAAiL,eAAR,WACE,OAAO7K,KAAKwK,WAAWe,UAAUqB,QAAO,SAACC,EAAKC,GAE5C,OADAD,EAAIC,EAAKxG,UAAUyG,MAAQD,EACpBD,IACN,8CA9HgBG,EAAAA,gDAAkB9J,EAAAA,OAAMC,KAAA,CAACC,EAAAA,eAVpCnD,EAAA,CAAT0F,EAAAA,wCACS1F,EAAA,CAAT0F,EAAAA,8CAGD1F,EAAA,CADCgN,EAAAA,gBAAgBrH,EAAoB,CAAEsH,aAAa,sCAJzCnD,EAAkB9J,EAAA,CAD9BiE,EAAAA,UAAU,CAAEC,SAAU,gBAYkBtD,EAAA,EAAAqC,EAAAA,OAAOE,EAAAA,YAXnC2G,mBCTb,SAAAoD,IACWnN,KAAAoN,cAAwB,EAExBpN,KAAAqN,SAAmB,IAElBrN,KAAAsN,eAAoC,IAAI9I,EAAAA,aACxCxE,KAAAuN,aAAkC,IAAI/I,EAAAA,aACtCxE,KAAAwN,aAAkC,IAAIhJ,EAAAA,aAKhDxE,KAAAyN,OAAiB,EACjBzN,KAAA0N,OAAiB,EAmGnB,OA9FEvO,OAAAyB,eAAIuM,EAAAvN,UAAA,QAAK,KAAT,WACE,OAAOI,KAAK2N,0CAIdxO,OAAAyB,eAAIuM,EAAAvN,UAAA,cAAW,KAAf,WACE,OAAOI,KAAK4N,gDAIdT,EAAAvN,UAAAiO,YAAA,SAAYnH,GADZ,IAAA3B,EAAA/E,KAGE,GAAoB,IAAhB0G,EAAMoH,OAAgB9N,KAAKoN,eAGH1G,EAAMvG,OACvBwG,UAAUI,SAAS,iBAA9B,CAEA/G,KAAKyN,OAAS/G,EAAMS,QACpBnH,KAAK0N,OAAShH,EAAMW,QAEpBrH,KAAK2N,UAAW,EAChB3N,KAAK4N,gBAAiB,EAEtB,IAAMtG,EAAUC,EAAAA,UAAUtF,SAAU,WACpCjC,KAAK6G,aAAeS,EAAQE,WAAU,SAACC,GAAmB,OAAA1C,EAAK0B,eAE/DzG,KAAK6E,QAAUU,YAAW,WACxBR,EAAK6I,gBAAiB,EACtB7I,EAAKuI,eAAerI,KAAK,CACvByB,MAAKA,EACLI,MAAO/B,EAAKgJ,aAGdhJ,EAAK8B,aAAaiB,IAChBP,EAAAA,UAAUtF,SAAU,aACjB0F,KAAKC,EAAAA,UAAUN,IACfE,WAAU,SAACwG,GAA2B,OAAAjJ,EAAKkJ,YAAYD,OAG5DjJ,EAAKmJ,KAAKxH,KACT1G,KAAKqN,UAERrN,KAAKkO,KAAKxH,KAGZyG,EAAAvN,UAAAqO,YAAA,SAAYvH,GACV,GAAI1G,KAAK2N,WAAa3N,KAAK4N,eAAgB,CACzC,IAAMO,EAASC,KAAKC,IAAI3H,EAAMS,QAAUnH,KAAKyN,QAAU,GACjDa,EAASF,KAAKC,IAAI3H,EAAMW,QAAUrH,KAAK0N,QAAU,IAEnDS,GAAUG,IACZtO,KAAKuO,aAKXpB,EAAAvN,UAAAsO,KAAA,SAAKxH,GAAL,IAAA3B,EAAA/E,KACMA,KAAK4N,iBACP5N,KAAK6E,QAAUU,YAAW,WACxBR,EAAKwI,aAAatI,KAAK,CACrByB,MAAKA,EACLI,MAAO/B,EAAKgJ,aAEdhJ,EAAKmJ,KAAKxH,KACT,MAIPyG,EAAAvN,UAAA2O,SAAA,WACE3J,aAAa5E,KAAK6E,SAClB7E,KAAK4N,gBAAiB,EACtB5N,KAAK2N,UAAW,EAChB3N,KAAKwG,uBAELxG,KAAKwN,aAAavI,KAAK,CACrB6B,MAAO9G,KAAK+N,cAIhBZ,EAAAvN,UAAA6G,UAAA,WACEzG,KAAKuO,YAGPpB,EAAAvN,UAAA+E,YAAA,WACE3E,KAAKwG,wBAGC2G,EAAAvN,UAAA4G,qBAAR,WACMxG,KAAK6G,eACP7G,KAAK6G,aAAaqB,cAClBlI,KAAK6G,kBAAesB,IA5GflI,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,wCAESnI,EAAA,CAAT0F,EAAAA,+CACS1F,EAAA,CAAT0F,EAAAA,6CACS1F,EAAA,CAAT0F,EAAAA,6CAWD1F,EAAA,CADCyF,EAAAA,YAAY,0CAMbzF,EAAA,CADCyF,EAAAA,YAAY,oDAMbzF,EAAA,CADC2J,EAAAA,aAAa,YAAa,CAAC,4CA3BjBuD,EAAkBlN,EAAA,CAD9BiE,EAAAA,UAAU,CAAEC,SAAU,kBACVgJ,mBC0CX,SAAAqB,EAAoBC,EAAgBjL,EAA6B8E,GAA7CtI,KAAAyO,OAAAA,EAA6CzO,KAAAsI,SAAAA,EAvBxDtI,KAAA0O,YAAsB,EACtB1O,KAAA2O,YAAsB,EAUrB3O,KAAA4O,OAA4B,IAAIpK,EAAAA,aAE1CxE,KAAA6O,WAAqB,EACrB7O,KAAA8O,WAAqB,EACrB9O,KAAA+O,eAAyB,EACzB/O,KAAAgP,eAAyB,EAKjBhP,KAAAiP,qBAA4B,KAGlCjP,KAAKwD,QAAUA,EAAQ4B,cAoD3B,OAjDEoJ,EAAA5O,UAAA6E,SAAA,WAEE,GAAIzE,KAAK0O,YAAc1O,KAAK2O,WAAY,CACtC,IAAMrG,EAAWtI,KAAKsI,SACtBtI,KAAKkP,cAAgB5G,EAAStF,WAAWsF,EAAStF,WAAWhD,KAAKwD,UAClExD,KAAKiP,qBAAuBjP,KAAKmP,WAAW1E,KAAKzK,MACjDA,KAAKkP,cAAcE,iBAAiB,SAAUpP,KAAKiP,wBAIvDT,EAAA5O,UAAA+E,YAAA,WACM3E,KAAKiP,uBACPjP,KAAKkP,cAAcG,oBAAoB,SAAUrP,KAAKiP,sBACtDjP,KAAKiP,qBAAuB,OAIhCT,EAAA5O,UAAA0P,UAAA,SAAUC,GACJvP,KAAKkP,gBACPlP,KAAKkP,cAAcM,UAAYD,IAInCf,EAAA5O,UAAAuP,WAAA,SAAWzI,GAAX,IAAA3B,EAAA/E,KACQyP,EAAwB/I,EAAMgJ,cACpCC,uBAAsB,WACpB5K,EAAK8J,WAAaY,EAAID,UACtBzK,EAAK+J,WAAaW,EAAIG,WACtB7K,EAAK8K,mBAITrB,EAAA5O,UAAAiQ,aAAA,WACE,IAAIC,EACA9P,KAAK6O,WAAa7O,KAAK+O,eACzBe,EAAY,OACH9P,KAAK6O,WAAa7O,KAAK+O,iBAChCe,EAAY,MAGd9P,KAAK4O,OAAO3J,KAAK,CACf6K,UAASA,EACTjB,WAAY7O,KAAK6O,WACjBC,WAAY9O,KAAK8O,aAGnB9O,KAAK+O,eAAiB/O,KAAK6O,WAC3B7O,KAAKgP,eAAiBhP,KAAK8O,qDAnDDrJ,EAAAA,cAAiBD,EAAAA,kBAA8BmE,EAAAA,aAvBlE1J,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,0CAIDnI,EAAA,CAFCyF,EAAAA,YAAY,mBACZ0C,EAAAA,4CAKDnI,EAAA,CAFCyF,EAAAA,YAAY,kBACZ0C,EAAAA,2CAGSnI,EAAA,CAAT0F,EAAAA,uCAZU6I,EAAiBvO,EAAA,CAR7B8P,EAAAA,UAAU,CACT5L,SAAU,qBACVH,SAAU,8BACV6F,KAAM,CACJmG,MAAO,oBAETC,gBAAiBC,EAAAA,wBAAwBC,UAE9B3B,mBClBX,SAAA4B,EAAmBpM,GAAAhE,KAAAgE,SAAAA,EACrB,gDAD+BC,EAAAA,eADlBmM,EAAqCnQ,EAAA,CAHjDiE,EAAAA,UAAU,CACTC,SAAU,2CAECiM,mBCDb,SAAAC,IAIWrQ,KAAAsQ,UAAgE,EAe/DtQ,KAAAuQ,OAA4B,IAAI/L,EAAAA,aA+B5C,OAtCErF,OAAAyB,eAAIyP,EAAAzQ,UAAA,WAAQ,KAAZ,WACE,OAAOI,KAAKwQ,gBAAkBxQ,KAAKyQ,gDAWrCJ,EAAAzQ,UAAA8Q,kBAAA,SAAkBC,GAChB3Q,KAAKuQ,OAAOtL,KAAK,CACf2L,KAAM,QACNtP,MAAOqP,KAOXN,EAAAzQ,UAAAiR,gBAAA,WACE7Q,KAAKuQ,OAAOtL,KAAK,CACf2L,KAAM,MACNtP,OAAO,KAOX+O,EAAAzQ,UAAAkR,kBAAA,WACE9Q,KAAKuQ,OAAOtL,KAAK,CACf2L,KAAM,MACNtP,OAAO,KA3CFrB,EAAA,CAARmI,EAAAA,yCAGDnI,EAAA,CADCmI,EAAAA,MAAM,kDAIPnI,EAAA,CADC8Q,EAAAA,aAAaX,EAAuC,CAAEY,KAAM/M,EAAAA,YAAagN,QAAQ,0CAUxEhR,EAAA,CAAT0F,EAAAA,uCAnBU0K,EAA6BpQ,EAAA,CADzCiE,EAAAA,UAAU,CAAEC,SAAU,gCACVkM,eCKGa,IACd,MAAO,YAOOC,EAAcrF,GAC5B,OAAY,MAARA,EACKoF,EAGW,iBAATpF,EACFsF,GAGoB,IAAvBtF,EAAKuF,QAAQ,KACRC,EAEAC,WAWGH,EAAmBI,EAAYxF,GAC7C,GAAW,MAAPwF,EACF,MAAO,GAGT,IAAKA,GAAgB,MAATxF,EACV,OAAOwF,EAGT,IAAMlQ,EAAQkQ,EAAIxF,GAClB,OAAa,MAAT1K,EACK,GAEFA,WASOiQ,EAAmBE,EAAUC,GAC3C,GAAW,MAAPD,EACF,MAAO,GAET,IAAKA,IAAQC,EACX,OAAOD,EAGT,IAAMnQ,EAAQmQ,EAAIC,GAClB,OAAa,MAATpQ,EACK,GAEFA,WAMOgQ,EAAgBG,EAAUE,GACxC,GAAW,MAAPF,EACF,MAAO,GAET,IAAKA,IAAQE,EACX,OAAOF,EAKT,IAAIG,EAAUH,EAAIE,GAClB,QAAgBxJ,IAAZyJ,EACF,OAAOA,EAGTA,EAAUH,EACV,IAAMI,EAAQF,EAAKE,MAAM,KAEzB,GAAIA,EAAMnS,OACR,IAAK,IAAIH,EAAI,EAAGA,EAAIsS,EAAMnS,OAAQH,IAIhC,GAAIqS,OAHJA,EAAUA,EAAQC,EAAMtS,KAItB,MAAO,GAKb,OAAOqS,WCzGOE,EAAsBhG,GACpC,OAAOA,GAAI,SAAK0F,GAAO,OAAAL,EAAcrF,EAAdqF,CAAoBK,EAAK1F,aAuClCiG,EAAmBC,EAAaC,EAA4BC,GAC1E,GAAID,GAAQC,EAAI,CACd,IAAMC,EAAW,GACXC,EAAIJ,EAAKtS,OACX2S,EAAwB,KAE5BF,EAAS,GAAK,IAAIG,EAUlB,IARA,IAAMC,EAAUP,EAAKpF,QAAO,SAAC4F,EAAKC,GAChC,IAAMC,EAAUR,EAAGO,GAInB,OAH8B,IAA1BD,EAAInB,QAAQqB,IACdF,EAAI5Q,KAAK8Q,GAEJF,IACN,IAEMjT,EAAI,EAAGA,EAAI6S,EAAG7S,IAErB4S,EAASD,EAAGF,EAAKzS,KAAO,IAAI+S,EAASN,EAAKzS,IAG5C,IAASA,EAAI,EAAGA,EAAI6S,EAAG7S,IAAK,CAG1B,IAAIoT,EAAS,EACPC,EAAYX,GAFlBI,EAAOF,EAASD,EAAGF,EAAKzS,MAEIiS,KACtBoB,GAAaL,EAAQlB,QAAQuB,IAAc,IAC/CD,EAASC,GAEXP,EAAKQ,OAASV,EAASQ,GACvBN,EAAKb,IAAW,MAAIa,EAAKQ,OAAOrB,IAAW,MAAI,EAC/Ca,EAAKQ,OAAOC,SAASlR,KAAKyQ,GAG5B,IAAIU,EAAsB,GAK1B,OAJAZ,EAAS,GAAGa,SAAQ,WAClBD,EAAYjR,EAAOiR,EAAY,CAAE/S,KAAKwR,SACrC,GAEIuB,EAEP,OAAOf,EAIX,ICzFYiB,ECAAC,ECAAC,ECAAC,EJyFZd,EAAA,WAKE,SAAAA,EAAYd,QAAA,IAAAA,IAAAA,EAAA,MACLA,IACHA,EAAM,CACJ6B,OAAQ,EACRC,WAAY,aAGhBtT,KAAKwR,IAAMA,EACXxR,KAAK6S,OAAS,KACd7S,KAAK8S,SAAW,GAYpB,OATER,EAAA1S,UAAAoT,QAAA,SAAQO,EAAQC,GACd,GAA+B,aAA3BxT,KAAKwR,IAAgB,WACvB,IAAK,IAAIjS,EAAI,EAAG6S,EAAIpS,KAAK8S,SAASpT,OAAQH,EAAI6S,EAAG7S,IAAK,CACpD,IAAMkU,EAAQzT,KAAK8S,SAASvT,GAC5BgU,EAAExT,MAAM0T,EAAOC,MAAM9T,UAAU+T,MAAM7T,KAAKL,UAAW,IACjD+T,GAAWC,EAAMT,QAAQjT,MAAM0T,EAAOhU,aAIlD6S,EA1BA,YKrFgBsB,EAAUC,GAiBxB,OAJAA,GANAA,GAHAA,GAFAA,EAAMA,EAAIC,QAAQ,iBAAkB,MAE1BA,QAAQ,oBAAqB,QAIpCA,QAAQ,2BAA4B,IACpCC,OACAC,eAGOF,QAAQ,wBAAwB,SAAUG,EAAGC,EAAG3T,GACxD,OAAO2T,EAAEH,OAASxT,EAAE4T,0BAURC,EAAYP,GAC1B,OAAOA,EAAIC,QAAQ,YAAY,SAAAO,GAAS,MAAA,IAAIA,KAASP,QAAQ,MAAM,SAAAO,GAAS,OAAAA,EAAMF,0BCzBpEG,IACd,OAAQ,QAAWlG,KAAKmG,SAAWnG,KAAKoG,IAAI,GAAI,IAAO,GAAG3I,SAAS,KAAK8H,OAAO,YCIjEc,EAAkBC,WAChC,GAAKA,EAAL,CAKA,IAAIC,GAA2B,MAE/B,IAAqB,IAAAC,EAAA5T,EAAA0T,GAAOG,EAAAD,EAAAvT,QAAAwT,EAAAtT,KAAAsT,EAAAD,EAAAvT,OAAE,CAAzB,IAAMyT,EAAMD,EAAAvT,MACVwT,EAAO/H,OACV+H,EAAO/H,KAAOuH,KAKZS,EAAkBD,EAAOhJ,OAASgJ,EAAOE,OAC3CF,EAAOhJ,KAAO8H,EAAUkB,EAAOE,OAG5BF,EAAOG,gBACVH,EAAOG,cAAgB9D,EAAc2D,EAAOhJ,QAIzCiJ,EAAkBD,EAAOhJ,OAASiJ,EAAkBD,EAAOE,QAC9DF,EAAOE,KAAOZ,EAAYc,OAAOJ,EAAOhJ,QAGtCiJ,EAAkBD,EAAOhJ,OAASiJ,EAAkBD,EAAOE,QAC7DF,EAAOE,KAAO,IAGXF,EAAOjV,eAAe,gBACzBiV,EAAOK,YAAa,GAGjBL,EAAOjV,eAAe,cACzBiV,EAAOM,UAAW,GAGfN,EAAOjV,eAAe,eACzBiV,EAAOO,WAAY,GAGhBP,EAAOjV,eAAe,mBACzBiV,EAAOQ,eAAgB,GAGpBR,EAAOjV,eAAe,WACzBiV,EAAO5S,MAAQ,KAGZ4S,EAAOjV,eAAe,iBAGrBiV,EAAOS,eAAiBZ,EAG1BA,GAAkB,EALpBG,EAAOS,cAAe,+GAeZR,EAAqBzT,GACnC,OAAOA,MAAAA,WAMOkU,EAAmBC,eAC3BC,EAAgB,OACtB,IAAmB,IAAAC,EAAA3U,EAAAyU,GAASG,EAAAD,EAAAtU,QAAAuU,EAAArU,KAAAqU,EAAAD,EAAAtU,OAAE,CAAzB,IAAMwU,EAAID,EAAAtU,MACPwU,EAAW,GAEXC,EAAQ5W,OAAO6W,oBAAoBH,OACzC,IAAmB,IAAAI,GAAAC,OAAA,EAAAlV,EAAA+U,IAAKI,EAAAF,EAAA5U,QAAA8U,EAAA5U,KAAA4U,EAAAF,EAAA5U,OAAE,CAArB,IAAMyK,EAAIqK,EAAA7U,MACbwU,EAAIhK,GAAQ+J,EAAK/J,qGAGf+J,EAAKO,iBACPN,EAAIM,eAAiBP,EAAKO,gBAGxBP,EAAKQ,eACPP,EAAIO,aAAeR,EAAKQ,cAGtBR,EAAKS,cACPR,EAAIQ,YAAcT,EAAKS,aAGrBT,EAAKU,kBACPT,EAAIS,gBAAkBV,EAAKU,iBAG7Bb,EAAO9T,KAAKkU,qGAGd,OAAOJ,GNjHGzC,EAAAA,EAAAA,aAAAA,EAAAA,WAAU,KACpB,SAAA,WACAA,EAAA,KAAA,OACAA,EAAA,MAAA,SCHUC,EAAAA,EAAAA,gBAAAA,EAAAA,cAAa,KACvB,OAAA,SACAA,EAAA,MAAA,QACAA,EAAA,WAAA,aACAA,EAAA,KAAA,OACAA,EAAA,SAAA,YCLUC,EAAAA,EAAAA,WAAAA,EAAAA,SAAQ,KAClB,OAAA,SACAA,EAAA,MAAA,SCFUC,EAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KACzB,OAAA,SACAA,EAAA,KAAA,wBIEA,SAAAoD,EAAmBxS,GAAAhE,KAAAgE,SAAAA,EACrB,gDAD+BC,EAAAA,eADlBuS,EAA8BvW,EAAA,CAD1CiE,EAAAA,UAAU,CAAEC,SAAU,qCACVqS,mBCCX,SAAAC,EAAmBzS,GAAAhE,KAAAgE,SAAAA,EACrB,gDAD+BC,EAAAA,eADlBwS,EAA4BxW,EAAA,CADxCiE,EAAAA,UAAU,CAAEC,SAAU,mCACVsS,mBCCX,SAAAC,EAAmB1S,GAAAhE,KAAAgE,SAAAA,EACrB,gDAD+BC,EAAAA,eADlByS,EAA6BzW,EAAA,CADzCiE,EAAAA,UAAU,CAAEC,SAAU,iCACVuS,mBC6DX,SAAAC,EAAoBC,GAAA5W,KAAA4W,qBAAAA,EAFZ5W,KAAA6W,eAAgB,EAW1B,OAnCE1X,OAAAyB,eAAI+V,EAAA/W,UAAA,eAAY,KAAhB,WACE,OAAOI,KAAK8W,oBAAsB9W,KAAK+W,oDASzC5X,OAAAyB,eAAI+V,EAAA/W,UAAA,iBAAc,KAAlB,WACE,OAAOI,KAAKgX,sBAAwBhX,KAAKiX,sDAS3C9X,OAAAyB,eAAI+V,EAAA/W,UAAA,qBAAkB,KAAtB,WACE,OAAOI,KAAKkX,0BAA4BlX,KAAKmX,0DAO/CR,EAAA/W,UAAAuG,YAAA,WACMnG,KAAK6W,cACP7W,KAAK6W,eAAgB,EAErB7W,KAAK4W,qBAAqB9S,0DANYJ,KAvDjCzD,EAAA,CAARmI,EAAAA,oCACQnI,EAAA,CAARmI,EAAAA,oCACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,oCACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,yCACQnI,EAAA,CAARmI,EAAAA,6CACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,qCACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,kDACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,yCACQnI,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,+CACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,+CAGDnI,EAAA,CADCmI,EAAAA,MAAM,0DAIPnI,EAAA,CADC8Q,EAAAA,aAAa0F,EAA8B,CAAEzF,KAAM/M,EAAAA,YAAagN,QAAQ,8CAQzEhR,EAAA,CADCmI,EAAAA,MAAM,8DAIPnI,EAAA,CADC8Q,EAAAA,aAAayF,EAAgC,CAAExF,KAAM/M,EAAAA,YAAagN,QAAQ,gDAQ3EhR,EAAA,CADCmI,EAAAA,MAAM,sEAIPnI,EAAA,CADC8Q,EAAAA,aAAa2F,EAA+B,CAAE1F,KAAM/M,EAAAA,YAAagN,QAAQ,oDA/C/D0F,EAAwB1W,EAAA,CADpCiE,EAAAA,UAAU,CAAEC,SAAU,0BACVwS,mBCFX,SAAAS,EAAmBpT,GAAAhE,KAAAgE,SAAAA,EACrB,gDAD+BC,EAAAA,eADlBmT,EAAmCnX,EAAA,CAH/CiE,EAAAA,UAAU,CACTC,SAAU,yCAECiT,mBCDb,SAAAC,IAKWrX,KAAAsQ,UAA8D,EAe7DtQ,KAAAuQ,OAA4B,IAAI/L,EAAAA,aA+B5C,OAtCErF,OAAAyB,eAAIyW,EAAAzX,UAAA,WAAQ,KAAZ,WACE,OAAOI,KAAKwQ,gBAAkBxQ,KAAKyQ,gDAWrC4G,EAAAzX,UAAA0X,gBAAA,SAAgB9F,GACdxR,KAAKuQ,OAAOtL,KAAK,CACf2L,KAAM,MACNtP,MAAOkQ,KAOX6F,EAAAzX,UAAA2X,cAAA,WACEvX,KAAKuQ,OAAOtL,KAAK,CACf2L,KAAM,MACNtP,OAAO,KAOX+V,EAAAzX,UAAA4X,gBAAA,WACExX,KAAKuQ,OAAOtL,KAAK,CACf2L,KAAM,MACNtP,OAAO,KA3CFrB,EAAA,CAARmI,EAAAA,yCAGDnI,EAAA,CADCmI,EAAAA,MAAM,kDAIPnI,EAAA,CADC8Q,EAAAA,aAAaqG,EAAqC,CAAEpG,KAAM/M,EAAAA,YAAagN,QAAQ,0CAUtEhR,EAAA,CAAT0F,EAAAA,uCApBU0R,EAA2BpX,EAAA,CADvCiE,EAAAA,UAAU,CAAEC,SAAU,8BACVkT,mBCAb,SAAAI,KAkBA,OAHEtY,OAAAyB,eAAI6W,EAAA7X,UAAA,WAAQ,KAAZ,WACE,OAAOI,KAAKwQ,gBAAkBxQ,KAAKyQ,gDAf5BxQ,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,+CACQnI,EAAA,CAARmI,EAAAA,kDACQnI,EAAA,CAARmI,EAAAA,mDACQnI,EAAA,CAARmI,EAAAA,iDACQnI,EAAA,CAARmI,EAAAA,6CAGDnI,EAAA,CADCmI,EAAAA,MAAM,kDAIPnI,EAAA,CADC8Q,EAAAA,aAAahN,EAAkC,CAAEiN,KAAM/M,EAAAA,oDAZ7CwT,EAAwBxX,EAAA,CADpCiE,EAAAA,UAAU,CAAEC,SAAU,0BACVsT,eCDGC,EAAaC,WACrBC,EAA8C,CAClD5P,KAAM,GACN6P,OAAQ,GACR9L,MAAO,IAGT,GAAI4L,MACF,IAAkB,IAAAG,EAAA9W,EAAA2W,GAAII,EAAAD,EAAAzW,QAAA0W,EAAAxW,KAAAwW,EAAAD,EAAAzW,OAAE,CAAnB,IAAMyU,EAAGiC,EAAAzW,MACRwU,EAAIkC,WACNJ,EAAI5P,KAAKpG,KAAKkU,GACLA,EAAImC,YACbL,EAAI7L,MAAMnK,KAAKkU,GAEf8B,EAAIC,OAAOjW,KAAKkU,qGAKtB,OAAO8B,WAMOM,EAAkBC,EAAaC,GAC7C,MAAO,CACLpQ,KAAMqQ,EAAiBF,EAAOnQ,MAC9B6P,OAAQQ,EAAiBF,EAAON,QAChC9L,MAAOsM,EAAiBF,EAAOpM,OAC/BuM,MAAOlK,KAAKmK,MAAMF,EAAiBD,cAOvBC,EAAiB3D,EAAgB5I,WAC3C0M,EAAa,EAEjB,GAAI9D,MACF,IAAgB,IAAAE,EAAA5T,EAAA0T,GAAOG,EAAAD,EAAAvT,QAAAwT,EAAAtT,KAAAsT,EAAAD,EAAAvT,OAAE,CAApB,IAAMd,EAACsU,EAAAvT,MAEJY,EADM4J,GAAQvL,EAAEuL,GACFvL,EAAEuL,GAAQvL,EAAE2B,MAChCsW,GAA0BC,WAAWvW,qGAIzC,OAAOsW,WAMOE,EAAkBhE,EAAc5I,WAC1C0M,EAAa,MAEjB,IAAqB,IAAAG,EAAA3X,EAAA0T,GAAOkE,EAAAD,EAAAtX,QAAAuX,EAAArX,KAAAqX,EAAAD,EAAAtX,OAAE,CAAzB,IAAMyT,EAAM8D,EAAAtX,MAEfkX,GADY1M,GAAQgJ,EAAOhJ,GACMgJ,EAAOhJ,GAAQgJ,EAAO5S,wGAGzD,OAAOsW,WAGOK,EAAgBC,GAC9B,IAAMC,EAAe,GACfC,EAAYtB,EAAaoB,GAM/B,OAJAC,EAAanX,KAAK,CAAEgP,KAAM,OAAQ8D,QAASsE,EAAgB,OAC3DD,EAAanX,KAAK,CAAEgP,KAAM,SAAU8D,QAASsE,EAAkB,SAC/DD,EAAanX,KAAK,CAAEgP,KAAM,QAAS8D,QAASsE,EAAiB,QAEtDD,mBCnET,SAAAE,IAMUjZ,KAAAkZ,UAAsB,GA2IhC,OAtIED,EAAArZ,UAAAuZ,WAAA,WACEnZ,KAAKkZ,UAAY,IAUnBD,EAAArZ,UAAAwZ,UAAA,SAAUC,GACA,IAAArH,EAAAqH,EAAArH,KAAM1B,EAAA+I,EAAA/I,UAAWgJ,EAAAD,EAAAC,gBAAiBC,EAAAF,EAAAE,gBAAiBC,EAAAH,EAAAG,SAAUC,EAAAJ,EAAAI,WAAYC,EAAAL,EAAAK,cAC3EC,EAA4B,mBAAdrJ,EACdsJ,EAAwC,mBAApBN,EAE1B,IAAKK,GAAQE,MAAMvJ,GACjB,MAAM,IAAIwJ,MAAM,yHACqBxJ,EAAS,mCAIhD,IAAKsJ,GAAcC,MAAMP,GACvB,MAAM,IAAIQ,MAAM,+HACqBR,EAAe,mCAGtD,IAAM9Z,EAAI+Z,EAAkBC,EAAWxH,EAAKtS,OAC5CM,KAAKkZ,UAAY,IAAIxF,MAAMlU,GAE3B,IAAK,IAAID,EAAI,EAAGA,EAAIC,IAAKD,EACvBS,KAAKkZ,UAAU3Z,GAAK,EAGtB,IAASA,EAAI,EAAGA,EAAIC,IAAKD,EAAG,CAC1B,IAAMiS,EAAMQ,EAAKzS,GACbwa,EAAmBzJ,EACnBqJ,IACFI,EAAmBzJ,EAAUkB,IAK/B,IAAMwI,EAAWN,EAAcO,IAAIzI,GACnC,GAAIA,GAAOwI,EACT,GAAIJ,EAEFG,GAAoBT,EAAgB9H,EADtBiI,EAAWS,IAAI1I,SAG7BuI,GAAoBT,EAIxBtZ,KAAKma,OAAO5a,EAAGwa,KAQnBd,EAAArZ,UAAAwa,YAAA,SAAYC,GACV,OAAgB,IAAZA,EAAsB,EACnBra,KAAKsa,aAAaD,IAO3BpB,EAAArZ,UAAAua,OAAA,SAAOI,EAAoBC,GACzB,IAAKxa,KAAKkZ,UAAUxZ,OAClB,MAAM,IAAIoa,MAAM,mBAAmBS,EAAU,eAAeC,EAAW,uDAIzE,IAAMhb,EAAIQ,KAAKkZ,UAAUxZ,OAGzB,IAFA6a,GAAc,EAEPA,EAAa/a,GAClBQ,KAAKkZ,UAAUqB,IAAeC,EAC9BD,GAAcA,EAAa,GAO/BtB,EAAArZ,UAAA6a,MAAA,SAAMC,GACJ,IAAK1a,KAAKkZ,UAAUxZ,OAClB,MAAM,IAAIoa,MAAM,kBAAkBY,EAAO,gDAG3C,IAAIC,EAAM,EAGV,IAFAD,GAAW,EAEJA,GAAW,GAChBC,GAAO3a,KAAKkZ,UAAUwB,GACtBA,GAAWA,EAAWA,EAAU,GAAM,EAGxC,OAAOC,GAMT1B,EAAArZ,UAAAgb,aAAA,SAAaC,EAAkBC,GAC7B,OAAO9a,KAAKya,MAAMK,GAAY9a,KAAKya,MAAMI,EAAW,IAO9C5B,EAAArZ,UAAA0a,aAAR,SAAqBK,GACnB,IAAK3a,KAAKkZ,UAAUxZ,OAAQ,OAAO,EAQnC,IANA,IAAI+M,GAAO,EACLsO,EAAa/a,KAAKkZ,UAAUxZ,OAKzBsb,EAFU5M,KAAKoG,IAAI,EAAGuG,EAAWlP,SAAS,GAAGnM,OAAS,GAEhB,IAAdsb,EAAiBA,IAAc,EAAG,CACjE,IAAMC,EAAUxO,EAAMuO,EAClBC,EAAUF,GAAcJ,GAAO3a,KAAKkZ,UAAU+B,KAChDN,GAAO3a,KAAKkZ,UAAU+B,GACtBxO,EAAMwO,GAIV,OAAOxO,EAAM,GAEjBwM,KCxJMiC,GAAQ,GACRC,GAAgC,oBAAblZ,SAA2BA,SAASI,cAAc,OAAOC,WAAQ6F,KAI1E,WACd,IAAMiT,EAA2B,oBAAXC,OAAyBA,OAAOC,iBAAiBrZ,SAASsZ,gBAAiB,SAAMpT,EACjGkM,OACc,IAAX+G,EACH1H,MAAM9T,UAAU+T,MACb7T,KAAKsb,GACLI,KAAK,IACLnH,MAAM,qBACT,KACAoH,EAAgB,OAAVpH,EAAiBA,EAAM,QAAKlM,EAElCsH,OAAqB,IAARgM,EAAsB,kBAAkBpH,MAAM,IAAIqH,OAAO,IAAMD,EAAM,IAAK,MAAM,QAAKtT,EAExG,OAAOsH,EACH,CACEA,IAAGA,EACHkM,UAAWF,EACXG,IAAK,IAAIH,EAAG,IACZI,GAAIJ,EAAI,GAAGtH,cAAgBsH,EAAIK,OAAO,SAExC3T,GApBA4T,GAAS,cAuBCC,GAAsBC,GACpC,IAAMjH,EAAOpB,EAAUqI,GAUvB,OARKf,GAAMlG,UACM7M,IAAX4T,SAA6D5T,IAArCgT,GAAUY,GAAOH,IAAMK,GACjDf,GAAMlG,GAAQ+G,GAAOH,IAAMK,OACM9T,IAAxBgT,GAAUc,KACnBf,GAAMlG,GAAQiH,IAIXf,GAAMlG,GCrCf,IAAMkH,GAA8B,oBAAXb,OAAyBW,GAAsB,kBAAe7T,EACjFgU,GAAuC,oBAAXd,OAAyBW,GAAsB,2BAAwB7T,EACnGiU,GAAqC,oBAAXf,SAA2BW,GAAsB,kBAAe7T,EAC1FkU,GAAuC,oBAAXhB,SAA2BW,GAAsB,oBAAiB7T,EAC9FmU,GAAuB,oBAAXjB,OAAyBA,OAAOkB,UAAUC,UAAY,SAClEC,GAAW,WAAWC,KAAKJ,MAAQ,WAAWI,KAAKJ,aAEzCK,GAAYvB,EAAalU,EAAWE,QACzB,IAAd8U,IAA6BE,IACjCK,IAAYJ,IACfjB,EAAOc,IAAa,eAAehV,EAAC,OAAOE,EAAC,SAC5CgU,EAAOe,IAAsB,UAE7Bf,EAAOxH,EAAUsI,KAAc,aAAahV,EAAC,OAAOE,EAAC,OAGvDgU,EAAOnT,IAASb,EAAC,KACjBgU,EAAOpT,KAAUd,EAAC,UCrBV0V,iBC4QV,SAAAC,EAAoBC,GAApB,IAAA/X,EAAA/E,KAAoBA,KAAA8c,GAAAA,EA3IX9c,KAAA+c,SAAkB,GAwFjB/c,KAAA4O,OAA4B,IAAIpK,EAAAA,aAChCxE,KAAAgd,KAA0B,IAAIxY,EAAAA,aAC9BxE,KAAAid,SAA8B,IAAIzY,EAAAA,aAClCxE,KAAAkd,OAA4B,IAAI1Y,EAAAA,aAChCxE,KAAAmd,aAAkC,IAAI3Y,EAAAA,aACtCxE,KAAAod,eAAiB,IAAI5Y,EAAAA,cAA8C,GACnExE,KAAAqd,WAAgC,IAAI7Y,EAAAA,aAwB9CxE,KAAAsd,gBAAkC,IAAIrE,EACtCjZ,KAAA6V,KAAc,GACd7V,KAAAuP,QAAU,EACVvP,KAAAud,QAAe,GAKfvd,KAAAyZ,WAAkB,IAAI+D,QACtBxd,KAAA0Z,cAAuB,GA2OvB1Z,KAAAyd,mBAAqB,SAACjM,EAAWxF,GAC/B,IAAKjH,EAAK2Y,UACR,OAAO,EAET,IAAMpN,EAAYvL,EAAK2Y,UAAUpN,UACjC,MAA4B,mBAAdA,EAA2BA,EAAUkB,EAAKxF,GAAUsE,GAlOlEtQ,KAAK2d,cAAgB,SAAC3R,EAAewF,GACnC,IAAMoM,EAAM7Y,EAAKqV,YAAY5I,GAC7B,OAAIzM,EAAK8Y,YACArM,EAAIzM,EAAK8Y,aAETD,GA0gBf,OA3oBWze,OAAAyB,eAAIic,EAAAjd,UAAA,WAAQ,KAKrB,WACE,OAAOI,KAAK8d,eANL,SAAahF,GACpB9Y,KAAK8d,UAAYhF,EACjB9Y,KAAK+d,gDAOE5e,OAAAyB,eAAIic,EAAAjd,UAAA,OAAI,KAKjB,WACE,OAAOI,KAAKge,WANL,SAASlF,GAChB9Y,KAAKge,MAAQlF,EACb9Y,KAAK+d,gDAOE5e,OAAAyB,eAAIic,EAAAjd,UAAA,UAAO,KAMpB,WACE,OAAOI,KAAKie,cAPL,SAAYnF,GACnB9Y,KAAKie,SAAWnF,EAChB,IAAME,EAAYtB,EAAaoB,GAC/B9Y,KAAKkY,kBAAoBA,EAAkBc,EAAWF,oCAO/C3Z,OAAAyB,eAAIic,EAAAjd,UAAA,SAAM,KAKnB,WACE,OAAOI,KAAKke,aANL,SAAWpF,GAClB9Y,KAAKke,QAAUpF,IACV9Y,KAAK0O,YAAe1O,KAAK0O,aAAe1O,KAAKme,iBAAiBne,KAAK+d,gDAOjE5e,OAAAyB,eAAIic,EAAAjd,UAAA,WAAQ,KAKrB,WACE,OAAOI,KAAKoe,eANL,SAAatF,GACpB9Y,KAAKoe,UAAYtF,EACjB9Y,KAAK+d,gDAQP5e,OAAAyB,eAAIic,EAAAjd,UAAA,YAAS,KAAb,WACE,OAAII,KAAK2O,WACA3O,KAAKqe,WAAa,KAElB,wCAMXlf,OAAAyB,eAAIic,EAAAjd,UAAA,aAAU,KAUd,WACE,OAAOI,KAAKse,iBAXd,SAAexF,GACT9Y,KAAK0O,WACP1O,KAAKse,YAAcxF,EAAM,KAEzB9Y,KAAKse,YAAc,OAGrBte,KAAK+d,gDAoBP5e,OAAAyB,eAAIic,EAAAjd,UAAA,gBAAa,KAAjB,WACE,QAASI,KAAKue,+CAQhBpf,OAAAyB,eAAIic,EAAAjd,UAAA,eAAY,KAAhB,WACE,GAAII,KAAK0O,YAAc1O,KAAKme,gBAAkBne,KAAKwZ,SACjD,OAAOxZ,KAAKsd,gBAAgB7C,MAAMza,KAAKwZ,SAAW,oCA0CtDqD,EAAAjd,UAAA6E,SAAA,WAAA,IAAAM,EAAA/E,KACMA,KAAK0d,YACP1d,KAAKwe,SAAWxe,KAAK0d,UAAUnN,OAAO/I,WAAU,SAACrC,OAAEyL,EAAAzL,EAAAyL,KAAMtP,EAAA6D,EAAA7D,MAC1C,QAATsP,GACF7L,EAAK0Z,mBAAmBnd,GAEb,QAATsP,GACF7L,EAAK2Z,cAAcpd,GAKrByD,EAAK4Z,gBACL5Z,EAAK6Z,aACL7Z,EAAK+X,GAAG+B,mBAIR7e,KAAK8e,cACP9e,KAAKwe,SAAWxe,KAAK8e,YAAYvO,OAAO/I,WAAU,SAACrC,OAAEyL,EAAAzL,EAAAyL,KAAMtP,EAAA6D,EAAA7D,MAC5C,UAATsP,GACF7L,EAAK0Z,mBAAmBnd,GAEb,QAATsP,GACF7L,EAAK2Z,cAAcpd,GAKrByD,EAAK4Z,gBACL5Z,EAAK6Z,aACL7Z,EAAK+X,GAAG+B,oBAQdhC,EAAAjd,UAAA+E,YAAA,YACM3E,KAAK0d,WAAa1d,KAAK8e,cACzB9e,KAAKwe,SAAStW,eAOlB2U,EAAAjd,UAAAmf,cAAA,SAAcC,GAEZ,GAAKhf,KAAKif,SAAV,CAIA,GAAIjf,KAAK0O,YAAc1O,KAAKme,gBAAkBa,EAAQ,CAEpD,IAAME,EAAWlf,KAAKmf,SAAWH,EACjCA,EAAShf,KAAKsd,gBAAgB7C,MAAMyE,EAAW,QACtClf,KAAK0O,aAAe1O,KAAKme,iBAClCa,EAAS,GAGXhf,KAAKif,SAAS3P,UAAU0P,GAAU,KAOpCnC,EAAAjd,UAAAwf,aAAA,SAAa1Y,GACX,IAAMmI,EAAqBnI,EAAMmI,WAC3BC,EAAqBpI,EAAMoI,WAI7B9O,KAAKuP,UAAYV,GAAc7O,KAAKqf,UAAYvQ,GAClD9O,KAAK4O,OAAO3J,KAAK,CACfsK,QAASV,EACTwQ,QAASvQ,IAIb9O,KAAKuP,QAAUV,EACf7O,KAAKqf,QAAUvQ,EAEf9O,KAAK2e,gBACL3e,KAAKsf,WAAW5Y,EAAMoJ,WACtB9P,KAAK4e,cAMP/B,EAAAjd,UAAA0f,WAAA,SAAWxP,GACT,IAAIkP,EAAShf,KAAKud,QAAQgC,MAAQvf,KAAKmf,SAErB,OAAdrP,EACFkP,EAAS5Q,KAAKoR,KAAKR,GACI,SAAdlP,IACTkP,EAAS5Q,KAAKmK,MAAMyG,SAGJ7W,IAAd2H,GAA4B+J,MAAMmF,IACpChf,KAAKgd,KAAK/X,KAAK,CAAE+Z,OAAMA,KAO3BnC,EAAAjd,UAAAgf,WAAA,WAAA,IAAA7Z,EAAA/E,KACQmF,EAAAnF,KAAAud,QAAEgC,EAAApa,EAAAoa,MAAOE,EAAAta,EAAAsa,KACXP,EAAWK,EACX3B,EAAM,EACJ/H,EAAc,GAKpB,GAAI7V,KAAK0f,YAAa,CAQpB,IAJgC,IAA5B1f,KAAK0f,YAAYhgB,QACDM,KAAK0f,YAAY,GAAGpe,MAAM5B,OAGvCwf,EAAWO,GAAQP,EAAWlf,KAAK0f,YAAYhgB,QAAQ,CAE5D,IAAMiR,EAAQ3Q,KAAK0f,YAAYR,GAC/Blf,KAAKyZ,WAAWkG,IAAIhP,EAAOuO,GAEvBvO,EAAMrP,OAERqP,EAAMrP,MAAMoJ,SAAQ,SAACkV,EAAQrgB,GAC3B,IAAMsgB,EAAUX,EAAQ,IAAI3f,EAC5BwF,EAAK0U,WAAWkG,IAAIC,EAAGC,MAG3BhK,EAAK+H,GAAOjN,EACZiN,IAGAsB,UAGF,KAAOA,EAAWO,GAAQP,EAAWlf,KAAKwZ,UAAU,CAClD,IAAMhI,EAAMxR,KAAKgS,KAAKkN,GAElB1N,IAEFxR,KAAKyZ,WAAWkG,IAAInO,EAAK0N,GACzBrJ,EAAK+H,GAAOpM,GAGdoM,IACAsB,IAIJlf,KAAK6V,KAAOA,GAMdgH,EAAAjd,UAAAkgB,aAAA,SAAatO,GAEX,MAA8B,mBAAnBxR,KAAKsQ,UACPtQ,KAAKsQ,UAAUkB,GAGjBxR,KAAKsQ,WAMduM,EAAAjd,UAAAmgB,eAAA,SAAepP,GACb,IAAIL,EAAY,EAEhB,GAAIK,EAAMrP,MACR,IAAK,IAAI0K,EAAQ,EAAGA,EAAQ2E,EAAMrP,MAAM5B,OAAQsM,IAC9CsE,GAAatQ,KAAKggB,sBAAsBrP,EAAMrP,MAAM0K,IAIxD,OAAOsE,GAMTuM,EAAAjd,UAAAogB,sBAAA,SAAsBxO,GACpB,IAAIlB,EAAYtQ,KAAK8f,aAAatO,GAQlC,OAPiBxR,KAAKigB,eAAezO,KAInClB,GAAatQ,KAAKyd,mBAAmBjM,IAGhClB,GAkCTuM,EAAAjd,UAAAsgB,cAAA,SAAclO,GACZ,IAAMoJ,EAAc,GAOpB,GAJIpb,KAAK0f,cACPtE,EAAOlZ,MAAQlC,KAAKkY,kBAAkBI,OAGpCtY,KAAK0O,YAAc1O,KAAKme,eAAgB,CAC1C,IAAIP,EAAM,EAEV,GAAI5d,KAAK0f,YAAa,CAEpB,IAAMlO,EAAMQ,EAAKA,EAAKtS,OAAS,GAC/Bke,EAAMpM,EAAMxR,KAAKoa,YAAY5I,GAAO,OAEpCoM,EAAM5d,KAAKoa,YAAYpI,GAQzB2K,GAAYvB,EAAQ,EAFRpb,KAAKsd,gBAAgB7C,MAAMmD,EAAM,IAK/C,OAAOxC,GAYTyB,EAAAjd,UAAAugB,0BAAA,WACE,IAAKngB,KAAK0O,aAAe1O,KAAKgS,OAAShS,KAAKgS,KAAKtS,OAC/C,OAAO,KAGT,IAAM0b,EAAS,CAAEgF,SAAU,YAK3B,OAFAzD,GAAYvB,EAAQ,EAFRpb,KAAKsd,gBAAgB7C,MAAMza,KAAKgS,KAAKtS,OAAS,IAInD0b,GAMTyB,EAAAjd,UAAAygB,cAAA,WAAA,IAAAtb,EAAA/E,KACEuF,YAAW,WAAM,OAACR,EAAKub,kBAAmB,IAAQ,MAMpDzD,EAAAjd,UAAA+e,cAAA,WACE,IAAIY,EAAQ,EACRE,EAAO,EAEX,GAAIzf,KAAK0O,WACP,GAAI1O,KAAKme,eAAgB,CAIvB,IAAMoC,EAAS5U,SAAS3L,KAAKwgB,WAAY,GACzCjB,EAAQvf,KAAKsd,gBAAgBlD,YAAYpa,KAAKuP,SAC9CkQ,EAAOzf,KAAKsd,gBAAgBlD,YAAYmG,EAASvgB,KAAKuP,SAAW,OAIjEgQ,EAAQ,EACRE,EAAOzf,KAAKwZ,cAKTxZ,KAAKygB,iBACRlB,EAAQnR,KAAKsS,IAAI1gB,KAAKgf,OAAShf,KAAKmf,SAAU,IAEhDM,EAAOrR,KAAKuS,IAAIpB,EAAQvf,KAAKmf,SAAUnf,KAAKwZ,UAG9CxZ,KAAKud,QAAU,CAAEgC,MAAKA,EAAEE,KAAIA,IAO9B5C,EAAAjd,UAAAghB,sBAAA,mBACE,GAAK5gB,KAAK0O,cAAe1O,KAAK0O,YAAe1O,KAAKme,kBAOlDne,KAAKsd,gBAAgBnE,aAGjBnZ,KAAKgS,MAAQhS,KAAKgS,KAAKtS,QAAQ,CACjC,IAAMga,EAAgB,IAAImH,QAC1B,IAAkB,IAAAvV,EAAAtK,EAAAhB,KAAKgS,MAAIxG,EAAAF,EAAAjK,QAAAmK,EAAAjK,KAAAiK,EAAAF,EAAAjK,OAAE,CAAxB,IAAMmQ,EAAGhG,EAAAlK,MACRtB,KAAKigB,eAAezO,IACtBkI,EAAc5R,IAAI0J,qGAItBxR,KAAKsd,gBAAgBlE,UAAU,CAC7BpH,KAAMhS,KAAKgS,KACX1B,UAAWtQ,KAAKsQ,UAChBgJ,gBAAiBtZ,KAAKyd,mBACtBlE,gBAAiBvZ,KAAK0O,YAAc1O,KAAKygB,eACzCjH,SAAUxZ,KAAKwZ,SACfC,WAAYzZ,KAAKyZ,WACjBC,cAAaA,MAQnBmD,EAAAjd,UAAAkhB,yBAAA,WAIE,IAAMC,EAAwB/gB,KAAKud,QAAQgC,MAE3C,OAAIvf,KAAK0O,YAAc1O,KAAKme,gBACLne,KAAKsd,gBAAgB7C,MAAMsG,EAAwB,IACjD/gB,KAAKuP,QAAUwR,EAAwB,EAGzDA,GASTlE,EAAAjd,UAAA6e,mBAAA,SAAmBjN,GAEjB,IAAMuP,EAAwB/gB,KAAK8gB,2BAC7BE,EAAiBhhB,KAAKihB,kBAAkBzP,EAAKxR,KAAK0Z,eAClDM,EAAWgH,GAAkB,EAGnC,GAAIhhB,KAAK0O,YAAc1O,KAAKme,eAAgB,CAC1C,IAAM7E,EAAkBtZ,KAAKyd,mBAAmBjM,IAAQwI,GAAY,EAAI,GAElE4D,EAAM5d,KAAKoa,YAAY5I,GAC7BxR,KAAKsd,gBAAgBnD,OAAOyD,EAAKtE,GAI/BU,EACFha,KAAK0Z,cAAcwH,OAAOF,EAAgB,GAE1ChhB,KAAK0Z,cAAc9X,KAAK4P,GAG1BxR,KAAKmd,aAAalY,KAAK,CACrB+M,KAAM,CAACR,GACP2P,aAAcJ,KAOlBlE,EAAAjd,UAAA8e,cAAA,SAAc1E,WAEZha,KAAK0Z,cAAgB,GAGrB,IAAMqH,EAAwB/gB,KAAK8gB,2BAEnC,GAAI9G,MACF,IAAkB,IAAA1O,EAAAtK,EAAAhB,KAAKgS,MAAIxG,EAAAF,EAAAjK,QAAAmK,EAAAjK,KAAAiK,EAAAF,EAAAjK,OAAE,CAAxB,IAAMmQ,EAAGhG,EAAAlK,MACZtB,KAAK0Z,cAAc9X,KAAK4P,qGAIxBxR,KAAK0O,YAEP1O,KAAK+d,eAIP/d,KAAKmd,aAAalY,KAAK,CACrB+M,KAAMhS,KAAKgS,KACXmP,aAAcJ,KAOlBlE,EAAAjd,UAAAme,aAAA,WACE/d,KAAK4gB,wBACL5gB,KAAK2e,gBACL3e,KAAK4e,cAMP/B,EAAAjd,UAAAwhB,iBAAA,SAAiBpV,EAAe8I,GAC9B,OAAOA,EAAO/H,MAMhB8P,EAAAjd,UAAAyhB,cAAA,SAAc1Q,GACZ,IAAM2Q,EAASthB,KAAKkY,kBACdmH,EAAUrf,KAAKqf,QAEfjE,EAAS,CACblZ,MAAUof,EAAO3Q,GAAM,MAGzB,GAAc,SAAVA,EACFgM,GAAYvB,EAAQiE,EAAS,QACxB,GAAc,UAAV1O,EAAmB,CAC5B,IAAM4Q,EAAY5V,SAAS3L,KAAKqe,WAAa,GAAI,GAIjD1B,GAAYvB,GADiB,GAFXkG,EAAOhJ,MAAQiJ,EACFlC,GAEH,GAG9B,OAAOjE,GAMTyB,EAAAjd,UAAAqgB,eAAA,SAAezO,WACb,GAAkC,IAA9BxR,KAAK0Z,cAAcha,QAAgBM,KAAKwhB,0BAC1C,IAAoB,IAAAlW,EAAAtK,EAAAhB,KAAK0f,aAAWlU,EAAAF,EAAAjK,QAAAmK,EAAAjK,KAAAiK,EAAAF,EAAAjK,OAAE,CAAjC,IAAMsP,EAAKnF,EAAAlK,MACdtB,KAAK0Z,cAAc9X,KAAK+O,qGAI5B,OAAO3Q,KAAKihB,kBAAkBzP,EAAKxR,KAAK0Z,gBAAkB,GAG5DmD,EAAAjd,UAAAqhB,kBAAA,SAAkBzP,EAAUwI,GAA5B,IAAAjV,EAAA/E,KACE,IAAKga,IAAaA,EAASta,OAAQ,OAAQ,EAE3C,IAAM+hB,EAAQzhB,KAAK0hB,YAAYlQ,GAC/B,OAAOwI,EAAS2H,WAAU,SAAAnhB,GAExB,OADWuE,EAAK2c,YAAYlhB,KACdihB,MAOlB5E,EAAAjd,UAAAwa,YAAA,SAAY5I,GACV,OAAOxR,KAAKyZ,WAAWS,IAAI1I,IAAQ,GAGrCqL,EAAAjd,UAAAgiB,aAAA,SAAapQ,GACXxR,KAAKqd,WAAWpY,KAAK,CAAEuM,IAAGA,8CA/gBJqQ,EAAAA,qBAnJf5hB,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,gDACQnI,EAAA,CAARmI,EAAAA,8CACQnI,EAAA,CAARmI,EAAAA,yCACQnI,EAAA,CAARmI,EAAAA,uCACQnI,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,6CACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,yCACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,qDACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,8CACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,+CACQnI,EAAA,CAARmI,EAAAA,6CAEQnI,EAAA,CAARmI,EAAAA,sCASQnI,EAAA,CAARmI,EAAAA,kCASQnI,EAAA,CAARmI,EAAAA,qCAUQnI,EAAA,CAARmI,EAAAA,oCASQnI,EAAA,CAARmI,EAAAA,sCAUDnI,EAAA,CADCyF,EAAAA,YAAY,8CAWbzF,EAAA,CAFCmI,EAAAA,QACA1C,EAAAA,YAAY,gDAeHzF,EAAA,CAAT0F,EAAAA,uCACS1F,EAAA,CAAT0F,EAAAA,qCACS1F,EAAA,CAAT0F,EAAAA,yCACS1F,EAAA,CAAT0F,EAAAA,uCACS1F,EAAA,CAAT0F,EAAAA,6CACS1F,EAAA,CAAT0F,EAAAA,+CACS1F,EAAA,CAAT0F,EAAAA,2CAE6B1F,EAAA,CAA7B6hB,EAAAA,UAAUtT,mCAzGAqO,EAAsB5c,EAAA,CAtGlC8P,EAAAA,UAAU,CACT5L,SAAU,iBACVH,SAAU,iiHA+FViM,gBAAiBC,EAAAA,wBAAwBC,OACzCtG,KAAM,CACJmG,MAAO,qBAGE6M,oBC0CX,SAAAkF,EAAoBjF,GAAA9c,KAAA8c,GAAAA,EAtBV9c,KAAAgiB,KAA0B,IAAIxd,EAAAA,aAC9BxE,KAAAiK,QAA6B,IAAIzF,EAAAA,aACjCxE,KAAAwI,OAA4B,IAAIhE,EAAAA,aAChCxE,KAAAkd,OAA4B,IAAI1Y,EAAAA,aAChCxE,KAAAiiB,kBAAoB,IAAIzd,EAAAA,cAAiD,GAGnFxE,KAAAkiB,mBAA0B,CACxB5J,MAAO,KAMTtY,KAAAmiB,cAAwC,CACtCna,KAAM,GACN6P,OAAQ,GACR9L,MAAO,IAGD/L,KAAAoiB,WAAY,EA8KtB,OA/PWjjB,OAAAyB,eAAImhB,EAAAniB,UAAA,aAAU,KAWvB,WACE,OAAOI,KAAKqiB,iBAZL,SAAevJ,GAAxB,IAAA/T,EAAA/E,KACEA,KAAKqiB,YAAcvJ,EACnBvT,YAAW,WACT,GAAIR,EAAKkZ,SAAU,CACjB,IAAMqE,EAAW5K,EAAa3S,EAAKkZ,UACnClZ,EAAKmd,mBAAqBhK,EAAkBoK,EAAUvd,EAAKkZ,UAC3DlZ,EAAKwd,wDAmBXpjB,OAAAyB,eAAImhB,EAAAniB,UAAA,eAAY,KAQhB,WACE,OAAOI,KAAKwiB,mBATd,SAAiB1J,GAEb9Y,KAAKwiB,cADK,SAAR1J,EACsBA,EAAG,KAENA,mCAQhB3Z,OAAAyB,eAAImhB,EAAAniB,UAAA,UAAO,KAWpB,WACE,OAAOI,KAAKie,cAZL,SAAYnF,GAArB,IAAA/T,EAAA/E,KACEA,KAAKie,SAAWnF,EAEhB,IAAME,EAAYtB,EAAaoB,GAC/B9Y,KAAKyiB,cAAgB5J,EAAgBC,GACrCvT,YAAW,WACTR,EAAKmd,mBAAqBhK,EAAkBc,EAAWF,GACvD/T,EAAKwd,uDASTpjB,OAAAyB,eAAImhB,EAAAniB,UAAA,UAAO,KAIX,WACE,OAAOI,KAAK0iB,cALd,SAAY5J,GACV9Y,KAAK0iB,SAAW5J,EAChB9Y,KAAKuiB,oDA8BPR,EAAAniB,UAAA+E,YAAA,WACE3E,KAAKoiB,WAAY,GAGnBL,EAAAniB,UAAA+iB,iBAAA,SAAiBxd,OAAEuB,EAAAvB,EAAAuB,MAAOvB,EAAA2B,MAClBd,UAAW,EACjBhG,KAAK4iB,gBAAkBlc,GAGzBqb,EAAAniB,UAAAijB,eAAA,SAAe1d,GAAf,IAAAJ,EAAA/E,KAAiB0G,EAAAvB,EAAAuB,MAAOI,EAAA3B,EAAA2B,MACtB9G,KAAK4iB,gBAAkBlc,EAIvBnB,YAAW,WAGT,IAAMuP,EAAS/P,EAAKkZ,SAAS7T,MAAK,SAAA7J,GAAK,OAAAA,EAAEwM,OAASjG,EAAMiG,QACpD+H,IACFA,EAAO9O,UAAW,KAEnB,IAIL7G,OAAAyB,eAAImhB,EAAAniB,UAAA,cAAW,KAAf,WACE,OAAII,KAAK2O,WACA3O,KAAKqe,WAAa,KAGpB,wCAGT0D,EAAAniB,UAAAkjB,cAAA,SAAc9W,EAAe+W,GAC3B,OAAOA,EAASnS,MAGlBmR,EAAAniB,UAAAwhB,iBAAA,SAAiBpV,EAAe8I,GAC9B,OAAOA,EAAO/H,MAGhBgV,EAAAniB,UAAAojB,gBAAA,SAAgB9gB,EAAe4S,GACzB5S,GAAS4S,EAAOtL,SAClBtH,EAAQ4S,EAAOtL,SACNtH,GAAS4S,EAAOpL,WACzBxH,EAAQ4S,EAAOpL,UAGjB1J,KAAKwI,OAAOvD,KAAK,CACf6P,OAAMA,EACNmO,UAAWnO,EAAO5S,MAClBghB,SAAUhhB,KAId6f,EAAAniB,UAAAujB,kBAAA,SAAkBhe,OAAEiH,EAAAjH,EAAAiH,UAAWC,EAAAlH,EAAAkH,SAAUvF,EAAA3B,EAAA2B,MACjCgO,EAAS9U,KAAKojB,UAAU/W,GAC9ByI,EAAO5I,UAAW,EAClB4I,EAAOuO,yBAAsBlb,EAC7BnI,KAAKiK,QAAQhF,KAAK,CAChB6P,OAAQhO,EACRmc,UAAW7W,EACX8W,SAAU7W,KAId0V,EAAAniB,UAAA0jB,gBAAA,SAAgBne,OAAEiH,EAAAjH,EAAAiH,UAAWC,EAAAlH,EAAAkH,SAAUC,EAAAnH,EAAAmH,aACrC,GAAIF,GAA2B,IAAdA,EAAiB,CAChC,IAAMmX,EAAYvjB,KAAKojB,UAAUhX,GACjCmX,EAAUrX,UAAW,EACrBqX,EAAUF,yBAAsBlb,EAElC,GAAIkE,GAAyB,IAAbA,EAAgB,CAC9B,IAAMmX,EAAYxjB,KAAKojB,UAAU/W,GACjCmX,EAAUtX,UAAW,EAEjBI,IAAiBD,IACnBmX,EAAUH,oBAAsB,CAC9BrT,MAAO,gBAAgBjO,OAAOuK,EAAeD,EAAW,gBAAkB,oBAMlF0V,EAAAniB,UAAAwjB,UAAA,SAAUpX,GACR,IAAMyX,EAAkBzjB,KAAKyiB,cAAc,GAAG/N,QAAQhV,OACtD,GAAIsM,EAAQyX,EACV,OAAOzjB,KAAKyiB,cAAc,GAAG/N,QAAQ1I,GAGvC,IAAM0X,EAAoB1jB,KAAKyiB,cAAc,GAAG/N,QAAQhV,OACxD,OAAIsM,EAAQyX,EAAkBC,EACrB1jB,KAAKyiB,cAAc,GAAG/N,QAAQ1I,EAAQyX,GAGxCzjB,KAAKyiB,cAAc,GAAG/N,QAAQ1I,EAAQyX,EAAkBC,IAGjE3B,EAAAniB,UAAA+jB,OAAA,SAAOxe,OAAE2P,EAAA3P,EAAA2P,OAAQmO,EAAA9d,EAAA8d,UAAWC,EAAA/d,EAAA+d,SAE1B,IAAIpO,EAAO9O,SAAX,CAIA,IAAM4d,EAAQ5jB,KAAK6jB,aAAa/O,EAAQmO,EAAWC,GACnDljB,KAAKgiB,KAAK/c,KAAK,CACb2e,MAAKA,EACL9O,OAAMA,EACNmO,UAASA,EACTC,SAAQA,MAIZnB,EAAAniB,UAAAikB,aAAA,SAAa/O,EAAamO,EAAmBC,GAC3C,IAAItF,EAAM,EAEL5d,KAAK4jB,QACR5jB,KAAK4jB,MAAQ,IAGf,IAAMA,EAAQ5jB,KAAK4jB,MAAME,KAAI,SAACxkB,EAAGC,GAK/B,OAJAD,EAACJ,EAAA,GAAQI,IACHwM,OAASgJ,EAAOhJ,OACpB8R,EAAMre,GAEDD,KAeT,YAZiB6I,IAAb+a,EACFU,EAAM1C,OAAOtD,EAAK,GACTqF,EACTW,EAAMhG,GAAKmG,IAAMb,GAEbljB,KAAKgkB,WAAa7Q,EAAAA,SAAS8Q,QAC7BL,EAAM1C,OAAO,EAAGlhB,KAAK4jB,MAAMlkB,QAG7BkkB,EAAMhiB,KAAK,CAAEmiB,IAAKb,EAAUpX,KAAMgJ,EAAOhJ,QAGpC8X,GAGT7B,EAAAniB,UAAA2iB,iBAAA,WACEviB,KAAKmiB,cAAcna,KAAOhI,KAAKkkB,kBAAkB,QACjDlkB,KAAKmiB,cAActK,OAAS7X,KAAKkkB,kBAAkB,UACnDlkB,KAAKmiB,cAAcpW,MAAQ/L,KAAKkkB,kBAAkB,SAC7ClkB,KAAKoiB,WACRpiB,KAAK8c,GAAGqH,iBAIZpC,EAAAniB,UAAAskB,kBAAA,SAAkBvT,GAChB,IAAM2Q,EAASthB,KAAKkiB,mBACd7C,EAAUrf,KAAKqf,QAEfjE,EAAS,CACblZ,MAAUof,EAAO3Q,GAAM,MAGzB,GAAc,WAAVA,EACFgM,GAAYvB,GAAmB,EAAXiE,EAAc,QAC7B,GAAc,UAAV1O,EAAmB,CAG5BgM,GAAYvB,GADgB,GADVkG,EAAOhJ,MAAQtY,KAAKqe,YAEV,GAG9B,OAAOjD,4CA1KeyG,EAAAA,qBA3Ff5hB,EAAA,CAARmI,EAAAA,iDACQnI,EAAA,CAARmI,EAAAA,kDACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,8CACQnI,EAAA,CAARmI,EAAAA,oDAIQnI,EAAA,CAARmI,EAAAA,wCAeQnI,EAAA,CAARmI,EAAAA,qCACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,+CACQnI,EAAA,CAARmI,EAAAA,6CACQnI,EAAA,CAARmI,EAAAA,2CAMDnI,EAAA,CAFCyF,EAAAA,YAAY,gBACZ0C,EAAAA,0CAaQnI,EAAA,CAARmI,EAAAA,qCAgBDnI,EAAA,CADCmI,EAAAA,qCASSnI,EAAA,CAAT0F,EAAAA,qCACS1F,EAAA,CAAT0F,EAAAA,wCACS1F,EAAA,CAAT0F,EAAAA,uCACS1F,EAAA,CAAT0F,EAAAA,uCACS1F,EAAA,CAAT0F,EAAAA,kDA6CD1F,EAAA,CADCyF,EAAAA,YAAY,gDAtHFqc,EAAwB9hB,EAAA,CAtDpC8P,EAAAA,UAAU,CACT5L,SAAU,mBACVH,SAAU,yuDA+CV6F,KAAM,CACJmG,MAAO,oBAETC,gBAAiBC,EAAAA,wBAAwBC,UAE9B4R,eCnEGqC,GAASC,EAAWC,EAAcC,GAEhD,IAAIC,EACArhB,EACAuS,EAHJ6O,EAAUA,GAAW,GAIrB,IAAI1f,EAAe,KACf4f,EAAW,EAEf,SAASC,IACPD,GAA+B,IAApBF,EAAQI,QAAoB,GAAK,IAAIC,KAChD/f,EAAU,KACV6Q,EAAS2O,EAAKtkB,MAAMykB,EAASrhB,GAG/B,OAAO,WACL,IAAM0hB,GAAO,IAAID,KAEZH,IAAgC,IAApBF,EAAQI,UACvBF,EAAWI,GAGb,IAAMC,EAAYR,GAAQO,EAAMJ,GAahC,OAZAD,EAAUxkB,KACVmD,EAAO1D,UAEHqlB,GAAa,GACflgB,aAAaC,GACbA,EAAU,KACV4f,EAAWI,EACXnP,EAAS2O,EAAKtkB,MAAMykB,EAASrhB,IACnB0B,IAAgC,IAArB0f,EAAQQ,WAC7BlgB,EAAUU,WAAWmf,EAAOI,IAGvBpP,YAYKsP,GAAa3X,EAAkBkX,GAC7C,OAAO,SAAwBpkB,EAAaC,EAAkB6kB,GAC5D,MAAO,CACLC,cAAc,EACdC,WAAYF,EAAWE,WACvBjL,IAAK,WAOH,OANA/a,OAAOyB,eAAeZ,KAAMI,EAAK,CAC/B8kB,cAAc,EACdC,WAAYF,EAAWE,WACvB7jB,MAAO8iB,GAASa,EAAW3jB,MAAO+L,EAAUkX,KAGvCvkB,KAAKI,eCxDJglB,GAAiB1Q,WAC3B2Q,EAAgB,MAEpB,IAAgB,IAAAzQ,EAAA5T,EAAA0T,GAAOG,EAAAD,EAAAvT,QAAAwT,EAAAtT,KAAAsT,EAAAD,EAAAvT,OAAE,CACvBgkB,GADUxQ,EAAAvT,MACSgkB,UAAY,oGAGjC,OAAOD,WAOOE,GAAmBC,EAAiBC,GAClD,IAAMC,EAAehN,EAAkB8M,GACjCH,EAAgBD,GAAiBI,GACjCG,EAAcjO,EAAa8N,GAE7BE,IAAiBD,GAQvB,SAAsBE,EAAkBjc,EAAe2b,eAErD,IAAK,IAAMO,KAAQD,MACjB,IAAqB,IAAAna,GAAAqa,OAAA,EAAA7kB,EAAA2kB,EAAYC,KAAKE,EAAAta,EAAAnK,QAAAykB,EAAAvkB,KAAAukB,EAAAta,EAAAnK,OAAE,EAA7ByT,EAAMgR,EAAAxkB,OACHgU,cAIVR,EAAO5S,MAAQ,GAHfwH,GAAYoL,EAAO5S,MACnBmjB,GAAiBvQ,EAAOwQ,SAAWxQ,EAAOwQ,SAAW,qGAO3D,IAAMS,EAAc,GAChBC,EAAiBtc,EAGrB,EAAG,CACD,IAAMuc,EAAoBD,EAAiBX,EAG3C,IAAK,IAAMO,KAFXI,EAAiB,EAEEL,MACjB,IAAqB,IAAAO,GAAAhQ,OAAA,EAAAlV,EAAA2kB,EAAYC,KAAKO,EAAAD,EAAA7kB,QAAA8kB,EAAA5kB,KAAA4kB,EAAAD,EAAA7kB,OAAE,CAAnC,IAAMyT,EAET,IAFSA,EAAMqR,EAAA7kB,OAEJgU,gBAAkByQ,EAAYjR,EAAOhJ,MAAO,CACrD,IAAMxC,EAAWwL,EAAO5S,MAAQ4S,EAAOwQ,SAAWW,OAC1B9d,IAApB2M,EAAOtL,UAA0BF,EAAWwL,EAAOtL,UACrDwc,GAAkB1c,EAAWwL,EAAOtL,SACpCsL,EAAO5S,MAAQ4S,EAAOtL,SACtBuc,EAAYjR,EAAOhJ,OAAQ,GAE3BgJ,EAAO5S,MAAQoH,4GAKG,IAAnB0c,GA3CPI,CAAaT,EAAaF,EAAeJ,YAiE7BgB,GACdb,EACAC,EACAa,EACAC,EACAC,oBAAA,IAAAA,IAAAA,EAAA,KAEA,IAAMC,EAAkBjB,EAAW7R,MAAM2S,EAAW,EAAGd,EAAW9lB,QAAQgnB,QAAO,SAAAnmB,GAC/E,OAA2B,IAApBA,EAAE+U,qBAGX,IAAqB,IAAAqR,EAAA3lB,EAAAylB,GAAeG,EAAAD,EAAAtlB,QAAAulB,EAAArlB,KAAAqlB,EAAAD,EAAAtlB,OAAE,EAA3ByT,EAAM8R,EAAAtlB,OACHulB,aACV/R,EAAO+R,WAAa/R,EAAO5S,yGAI/B,IAAI4kB,EAAyB,EACzBC,GAAgB,EAChBC,EAAeC,GAAgBzB,EAAYgB,GAC3CR,EAAiBP,EAAgBuB,EAC/BE,EAA0B,GAIhC,EAAG,CACDJ,EAAyBd,EAAiBS,EAAgB/mB,OAC1DqnB,EAAgBC,GAAgBvB,MAEhC,IAAqB,IAAA0B,GAAAC,OAAA,EAAApmB,EAAAylB,IAAeY,EAAAF,EAAA9lB,QAAAgmB,EAAA9lB,KAAA8lB,EAAAF,EAAA9lB,OAAE,CAAjC,IAAMyT,EAAMuS,EAAA/lB,MACf,GAAIylB,GAAiBR,EACnBzR,EAAO5S,MAAQ4S,EAAO+R,YAAc/R,EAAO5S,OAASskB,MAC/C,CACL,IAAMc,GAAWxS,EAAO5S,OAASskB,GAAmBM,EAEhDhS,EAAOtL,UAAY8d,EAAUxS,EAAOtL,UACtCsL,EAAO5S,MAAQ4S,EAAOtL,SACtB0d,EAAiBtlB,KAAKkT,IACbA,EAAOpL,UAAY4d,EAAUxS,EAAOpL,UAC7CoL,EAAO5S,MAAQ4S,EAAOpL,SACtBwd,EAAiBtlB,KAAKkT,IAEtBA,EAAO5S,MAAQolB,EAInBxS,EAAO5S,MAAQkM,KAAKsS,IAAI,EAAG5L,EAAO5S,yGAIpC8jB,EAAiBP,GADjBuB,EAAeC,GAAgBzB,IAE/B+B,GAAuBd,EAAiBS,SACjClB,EA9BmB,GA8BgD,IAA3BS,EAAgB/mB,QAMnE,SAAS6nB,GAAuBd,EAAwBS,eACtD,IAAqB,IAAAM,EAAAxmB,EAAAkmB,GAAgBO,EAAAD,EAAAnmB,QAAAomB,EAAAlmB,KAAAkmB,EAAAD,EAAAnmB,OAAE,CAAlC,IAAMyT,EAAM2S,EAAAnmB,MACT0K,EAAQya,EAAgBpV,QAAQyD,GACtC2R,EAAgBvF,OAAOlV,EAAO,sGAOlC,SAASib,GAAgBzB,EAAiBgB,gBAAA,IAAAA,IAAAA,EAAA,KACxC,IAAIQ,EAAe,MAEnB,IAAqB,IAAAU,EAAA1mB,EAAAwkB,GAAUmC,EAAAD,EAAArmB,QAAAsmB,EAAApmB,KAAAomB,EAAAD,EAAArmB,OAAE,CAC/B2lB,GADeW,EAAArmB,MACQY,OAASskB,oGAGlC,OAAOQ,WC9JOY,GAAY5D,EAAoBpS,GAC9C,OAAIoS,IAAa7Q,EAAAA,SAAS8Q,OACpBrS,IAAYgL,EAAAA,cAAciL,IACrBjL,EAAAA,cAAcvc,KAEduc,EAAAA,cAAciL,IAGlBjW,EAEMA,IAAYgL,EAAAA,cAAciL,IAC5BjL,EAAAA,cAAcvc,UACAuc,EAAAA,cAAcvc,KAH5Buc,EAAAA,cAAciL,aAeXC,GAAkB7T,EAAQC,GAGxC,GAFID,MAAAA,IAAwCA,EAAI,GAC5CC,MAAAA,IAAwCA,EAAI,GAC5CD,aAAa2Q,MAAQ1Q,aAAa0Q,KAAM,CAC1C,GAAI3Q,EAAIC,EAAG,OAAQ,EACnB,GAAID,EAAIC,EAAG,OAAO,OACb,GAAI2F,MAAMpB,WAAWxE,MAAQ8T,SAAS9T,IAAM4F,MAAMpB,WAAWvE,MAAQ6T,SAAS7T,GAAI,CAKvF,GAHAD,EAAIiB,OAAOjB,GACXC,EAAIgB,OAAOhB,GAEPD,EAAED,cAAgBE,EAAEF,cAAe,OAAQ,EAC/C,GAAIC,EAAED,cAAgBE,EAAEF,cAAe,OAAO,MACzC,CAEL,GAAIyE,WAAWxE,GAAKwE,WAAWvE,GAAI,OAAQ,EAC3C,GAAIuE,WAAWxE,GAAKwE,WAAWvE,GAAI,OAAO,EAI5C,OAAO,WAOO8T,GAAShW,EAAa0C,EAAgBuT,GACpD,IAAKjW,EAAM,MAAO,GAClB,IAAKiW,IAASA,EAAKvoB,SAAWgV,EAAS,OAAA5S,EAAWkQ,GAMlD,IAAMkW,EAAgB,IAAIC,IAC1BnW,EAAKtH,SAAQ,SAAC8G,EAAKxF,GAAU,OAAAkc,EAAcvI,IAAInO,EAAKxF,MAEpD,IAAM6J,EAAI/T,EAAOkQ,GACX2F,EAAOjD,EAAQ9H,QAAO,SAAC6E,EAAKqE,GAIhC,OAHIA,EAAIsS,YAAwC,mBAAnBtS,EAAIsS,aAC/B3W,EAAIqE,EAAIhK,MAAQgK,EAAIsS,YAEf3W,IACN,IAIG4W,EAAaJ,EAAKnE,KAAI,SAAAC,GAC1B,IAAMjY,EAAOiY,EAAIjY,KACjB,MAAO,CACLA,KAAIA,EACJiY,IAAKA,EAAIA,IACTuE,YAAanX,EAAcrF,GAC3Byc,UAAW5Q,EAAK7L,IAASgc,OAI7B,OAAOjS,EAAKmM,MAAK,SAAUwG,EAAWC,eACpC,IAAwB,IAAAC,EAAA1nB,EAAAqnB,GAAUM,EAAAD,EAAArnB,QAAAsnB,EAAApnB,KAAAonB,EAAAD,EAAArnB,OAAE,CAA/B,IAAMunB,EAASD,EAAArnB,MAEVwK,EAAA8c,EAAA9c,KAAMwc,EAAAM,EAAAN,YAERO,EAAQP,EAAYE,EAAM1c,GAC1Bgd,EAAQR,EAAYG,EAAM3c,GAS1Bid,EACJH,EAAU7E,MAAQnH,EAAAA,cAAcvc,KAC5BuoB,EAAUL,UAAUM,EAAOC,EAAON,EAAMC,EAAMG,EAAU7E,MACvD6E,EAAUL,UAAUM,EAAOC,EAAON,EAAMC,EAAMG,EAAU7E,KAG/D,GAAmB,IAAfgF,EAAkB,OAAOA,oGAG/B,OAAMb,EAAcjO,IAAIuO,IAASN,EAAcjO,IAAIwO,GAK5CP,EAAchO,IAAIsO,GAAQN,EAAchO,IAAIuO,IAAS,EAAI,EALE,MLjH1D7L,GAAAA,EAAAA,gBAAAA,EAAAA,cAAa,KACvB,IAAA,MACAA,GAAA,KAAA,WMFUoM,iBC6nBV,SAAAC,EACsBC,EACAC,EACZrM,EACRtZ,EACAwG,EACQ4M,EACqCwS,GAP/C,IAAArkB,EAAA/E,KACsBA,KAAAkpB,gBAAAA,EACAlpB,KAAAmpB,iBAAAA,EACZnpB,KAAA8c,GAAAA,EAGA9c,KAAA4W,qBAAAA,EACqC5W,KAAAopB,cAAAA,EAjetCppB,KAAA+c,SAAkB,GAKlB/c,KAAA0O,YAAsB,EAKtB1O,KAAA2O,YAAsB,EAMtB3O,KAAAsQ,UAAuD,GAMvDtQ,KAAAqpB,WAAmDpW,EAAAA,WAAWqW,SAM9DtpB,KAAAupB,aAAuB,GAMvBvpB,KAAAwpB,aAAuB,EAMvBxpB,KAAAygB,gBAA0B,EAM1BzgB,KAAAypB,iBAA2B,EAqD3BzpB,KAAAsgB,kBAA4B,EAoB5BtgB,KAAA0pB,aAAuB,EAMvB1pB,KAAA2pB,aAAuB,EAKvB3pB,KAAAgkB,SAAqB7Q,EAAAA,SAAS8Q,OAM9BjkB,KAAA4jB,MAAe,GAKf5jB,KAAA4pB,WAAkB,CACzBC,cAAe,oBACfC,eAAgB,sBAChBC,eAAgB,sBAChBC,gBAAiB,uBACjBC,cAAe,sBACfC,UAAW,uBAUJlqB,KAAAmqB,SAAgB,CAGvBC,aAAc,qBAGdC,aAAc,QAGdC,gBAAiB,YAqCVtqB,KAAAwhB,uBAAiC,EAcjCxhB,KAAAuqB,qBAAsB,EAKtBvqB,KAAAme,gBAA0B,EAe1Bne,KAAAwqB,YAAsB,EAKtBxqB,KAAAyqB,cAAwB,GAKxBzqB,KAAA0qB,gBAA0B,MAKzB1qB,KAAA4O,OAA4B,IAAIpK,EAAAA,aAKhCxE,KAAAid,SAA8B,IAAIzY,EAAAA,aAKlCxE,KAAAkd,OAA4B,IAAI1Y,EAAAA,aAKhCxE,KAAAgiB,KAA0B,IAAIxd,EAAAA,aAK9BxE,KAAAgd,KAA0B,IAAIxY,EAAAA,aAK9BxE,KAAAiK,QAA6B,IAAIzF,EAAAA,aAKjCxE,KAAAwI,OAA4B,IAAIhE,EAAAA,aAOhCxE,KAAA2qB,iBAAmB,IAAInmB,EAAAA,cAAyE,GAKhGxE,KAAAqd,WAAgC,IAAI7Y,EAAAA,aAqK9CxE,KAAAwZ,SAAmB,EAGnBxZ,KAAA0iB,SAAW,IAAIkI,EAAAA,gBAAgB,GAE/B5qB,KAAA6qB,OAAiB,EACjB7qB,KAAAke,QAAkB,EAOlBle,KAAA8qB,eAAiC,GA6ExB9qB,KAAA0hB,YAA+B,SAACxa,GACvC,OAAInC,EAAKgmB,aAGA7jB,EAAE9G,IAEF8G,GAvETlH,KAAKwD,QAAUA,EAAQ4B,cACvBpF,KAAKgrB,UAAYhhB,EAAQI,KAAK,IAAIC,SAG9BrK,KAAKopB,eAAiBppB,KAAKopB,cAAce,WAC3CnqB,KAAKmqB,SAAQjrB,EAAA,GAAQc,KAAKopB,cAAce,WAuf9C,OAhkCWhrB,OAAAyB,eAAIqoB,EAAArpB,UAAA,OAAI,KAiCjB,WACE,OAAOI,KAAKge,WAlCL,SAASlF,GAChB9Y,KAAKge,MAAQlF,EAETA,IACF9Y,KAAKirB,cAAanpB,EAAOgX,IAItB9Y,KAAKypB,iBACRzpB,KAAKkrB,mBAIPlrB,KAAKirB,cAAgBlZ,EACnB/R,KAAKirB,cACLnZ,EAAsB9R,KAAKmrB,kBAC3BrZ,EAAsB9R,KAAKorB,iBAI7BprB,KAAKqrB,cAEDrrB,KAAKge,OAAShe,KAAK+qB,eAErB/qB,KAAK0f,YAAc1f,KAAKsrB,aAAatrB,KAAKge,MAAOhe,KAAK+qB,eAGxD/qB,KAAK8c,GAAG+B,gDAaD1f,OAAAyB,eAAIqoB,EAAArpB,UAAA,cAAW,KAUxB,WACE,OAAOI,KAAK+qB,kBAXL,SAAgBjS,GACnBA,IACF9Y,KAAK+qB,aAAejS,EAChB9Y,KAAKge,OAAShe,KAAK+qB,eAErB/qB,KAAK0f,YAAc1f,KAAKsrB,aAAatrB,KAAKge,MAAOhe,KAAK+qB,iDA6BnD5rB,OAAAyB,eAAIqoB,EAAArpB,UAAA,UAAO,KAapB,WACE,OAAOI,KAAKie,cAdL,SAAYnF,GACfA,IACF9Y,KAAKurB,iBAAgBzpB,EAAOgX,GAC5BrE,EAAkBzU,KAAKurB,kBACvBvrB,KAAKwrB,sBAGPxrB,KAAKie,SAAWnF,mCAmET3Z,OAAAyB,eAAIqoB,EAAArpB,UAAA,QAAK,KAUlB,WACE,OAAOI,KAAKyrB,YAXL,SAAU3S,GACjB9Y,KAAKyrB,OAAS3S,EAGd9Y,KAAKqrB,+CAcElsB,OAAAyB,eAAIqoB,EAAArpB,UAAA,QAAK,KAUlB,WACE,OAAOI,KAAK6qB,YAXL,SAAU/R,GACjB9Y,KAAK6qB,OAAS/R,EAGd9Y,KAAKqrB,+CAcElsB,OAAAyB,eAAIqoB,EAAArpB,UAAA,SAAM,KAGnB,WACE,OAAOwO,KAAKsS,IAAItS,KAAKuS,IAAI3gB,KAAKke,QAAS9P,KAAKoR,KAAKxf,KAAKwZ,SAAWxZ,KAAKmf,UAAY,GAAI,QAJ/E,SAAWrG,GAClB9Y,KAAKke,QAAUpF,mCAmNjB3Z,OAAAyB,eAAIqoB,EAAArpB,UAAA,gBAAa,KAAjB,WACE,IAAM2pB,EAAgCvpB,KAAKupB,aAC3C,MAA+B,iBAAjBA,GAAqD,SAAjBA,mCAQpDpqB,OAAAyB,eAAIqoB,EAAArpB,UAAA,aAAU,KAAd,WACE,MAA0B,SAAnBI,KAAKsQ,2CAQdnR,OAAAyB,eAAIqoB,EAAArpB,UAAA,eAAY,KAAhB,WACE,OAAOI,KAAK0O,4CAQdvP,OAAAyB,eAAIqoB,EAAArpB,UAAA,gBAAa,KAAjB,WACE,OAAOI,KAAKme,gDAQdhf,OAAAyB,eAAIqoB,EAAArpB,UAAA,cAAW,KAAf,WACE,OAAOI,KAAK2O,4CAOdxP,OAAAyB,eAAIqoB,EAAArpB,UAAA,eAAY,KAAhB,WACE,YAA8BuI,IAAvBnI,KAAKue,+CAOdpf,OAAAyB,eAAIqoB,EAAArpB,UAAA,sBAAmB,KAAvB,WACE,OAAOI,KAAKue,gBAAkBrL,EAAAA,cAAcwY,0CAO9CvsB,OAAAyB,eAAIqoB,EAAArpB,UAAA,kBAAe,KAAnB,WACE,OAAOI,KAAKue,gBAAkBrL,EAAAA,cAAcyY,sCAO9CxsB,OAAAyB,eAAIqoB,EAAArpB,UAAA,oBAAiB,KAArB,WACE,OAAOI,KAAKue,gBAAkBrL,EAAAA,cAAc+Q,wCAO9C9kB,OAAAyB,eAAIqoB,EAAArpB,UAAA,mBAAgB,KAApB,WACE,OAAOI,KAAKue,gBAAkBrL,EAAAA,cAAc0Y,uCAO9CzsB,OAAAyB,eAAIqoB,EAAArpB,UAAA,wBAAqB,KAAzB,WACE,OAAOI,KAAKue,gBAAkBrL,EAAAA,cAAc2Y,4CAQ9C1sB,OAAAyB,eAAIqoB,EAAArpB,UAAA,kBAAe,KAQnB,WACE,OAAOI,KAAK8rB,sBATd,SAAoBhT,GAClB9Y,KAAK8rB,iBAAmBhT,EACxB9Y,KAAK+rB,iBAAiBjT,oCA+CxB3Z,OAAAyB,eAAIqoB,EAAArpB,UAAA,kBAAe,KAAnB,WACE,IAAIosB,EAAkBhsB,KAAKgS,MAAQhS,KAAK+c,UAAY/c,KAAK+c,SAASrd,SAAWM,KAAKgS,KAAKtS,OAEvF,GAAIM,KAAKisB,eAAiBjsB,KAAKuqB,oBAAqB,CAClD,IAAMhN,EAAUvd,KAAKisB,cAAc1O,QAC7B2O,EAAa3O,EAAQkC,KAAOlC,EAAQgC,MAC1CyM,EAAkBhsB,KAAK+c,SAASrd,SAAWwsB,EAG7C,OAAOlsB,KAAK+c,UAAY/c,KAAKgS,MAA6B,IAArBhS,KAAKgS,KAAKtS,QAAgBssB,mCA6CjE/C,EAAArpB,UAAA6E,SAAA,WAIEzE,KAAKqrB,eAOPpC,EAAArpB,UAAA8I,gBAAA,WAAA,IAAA3D,EAAA/E,KACOA,KAAKypB,iBACRzpB,KAAKkrB,mBAK8B,oBAA1Bvb,uBAIXA,uBAAsB,WACpB5K,EAAKsmB,cAGDtmB,EAAK0b,gBAAkB1b,EAAK2J,YAC9B3J,EAAKiY,KAAK/X,KAAK,CACbknB,MAAOpnB,EAAKonB,MACZhN,SAAUpa,EAAKoa,SACfiN,MAAOrnB,EAAKqnB,MACZpN,OAAQ,QAUhBiK,EAAArpB,UAAA0K,mBAAA,WAAA,IAAAvF,EAAA/E,KACEA,KAAKqsB,gBAAgBjmB,QAAQoB,WAAU,SAAA8kB,GAAK,OAAAvnB,EAAKgnB,iBAAiBO,MAClEtsB,KAAKusB,+BAsBPtD,EAAArpB,UAAAmsB,iBAAA,SAAiBjT,GACf,GAAIA,EAAK,CACP,IAAMtG,EAAMsG,EAAIvN,UACZiH,EAAI9S,SACNM,KAAKurB,iBAAmB/V,EAAmBhD,GAC3CiC,EAAkBzU,KAAKurB,kBACvBvrB,KAAKwrB,qBACLxrB,KAAKkrB,mBACLlrB,KAAK8c,GAAG+B,kBAWdoK,EAAArpB,UAAA0rB,aAAA,SAAakB,EAAoBC,GAE/B,IAAM3I,EAAM,IAAIqE,IAGhBqE,EAAc9hB,SAAQ,SAAC+H,GACrB,IAAMrS,EAAMqS,EAAKga,GACZ3I,EAAI7J,IAAI7Z,GAGX0jB,EAAI5J,IAAI9Z,GAAKwB,KAAK6Q,GAFlBqR,EAAInE,IAAIvf,EAAK,CAACqS,OAYlB,OAAOiB,MAAMzB,KAAK6R,GAAK,SAAA5c,GAAK,OALV9G,EAKmB8G,EAAE,GALX5F,EAKe4F,EAAE,GAJpC,CAAE9G,IAAGA,EAAEkB,MAAKA,GADJ,IAAClB,EAAUkB,MAW9B2nB,EAAArpB,UAAA8sB,UAAA,WACM1sB,KAAKgrB,UAAUpgB,KAAK5K,KAAKgS,QACtBhS,KAAKypB,gBAGRzpB,KAAKirB,cAAanpB,EAAO9B,KAAKgS,MAF9BhS,KAAKkrB,mBAMPlrB,KAAKirB,cAAgBlZ,EACnB/R,KAAKirB,cACLnZ,EAAsB9R,KAAKmrB,kBAC3BrZ,EAAsB9R,KAAKorB,iBAG7BprB,KAAK2sB,mBACL3sB,KAAK8c,GAAG+B,iBAeZoK,EAAArpB,UAAAyrB,YAAA,WACErrB,KAAK4sB,kBACL5sB,KAAKwrB,qBACLxrB,KAAK8c,GAAG+B,gBAQVoK,EAAArpB,UAAAitB,eAAA,WACE7sB,KAAKqrB,eAOPpC,EAAArpB,UAAA4rB,mBAAA,SACE9W,EACAoY,EACAvG,GAEA,QAJA,IAAA7R,IAAAA,EAAiB1U,KAAKurB,uBACtB,IAAAuB,IAAAA,GAAoB,QACpB,IAAAvG,IAAAA,EAAsBvmB,KAAK2O,YAEtB+F,EAAL,CAEA,IAAIxS,EAAQlC,KAAKqiB,YAWjB,OAVIriB,KAAK0O,aACPxM,GAAgBlC,KAAKkpB,gBAAgBhnB,OAGnClC,KAAKqpB,aAAepW,EAAAA,WAAW8Z,MACjC1G,GAAsB3R,EAASxS,EAAO4qB,EAAUvG,GACvCvmB,KAAKqpB,aAAepW,EAAAA,WAAW+Z,MACxCzH,GAAmB7Q,EAASxS,GAGvBwS,IAQTuU,EAAArpB,UAAAgtB,gBAAA,WACE,IAAMK,EAAOjtB,KAAKmpB,iBAAiB5lB,cAAcvD,KAAKwD,SAGtD,GAFAxD,KAAKqiB,YAAcjU,KAAKmK,MAAM0U,EAAK/qB,OAE/BlC,KAAK0O,WAAY,CACnB,IAAI6R,EAAS0M,EAAK1M,OACdvgB,KAAKupB,eAAchJ,GAAkBvgB,KAAKupB,cAC1CvpB,KAAKwpB,eAAcjJ,GAAkBvgB,KAAKwpB,cAC9CxpB,KAAKwgB,WAAaD,EAGpBvgB,KAAK2sB,oBAMP1D,EAAArpB,UAAA+sB,iBAAA,WACE3sB,KAAKmf,SAAWnf,KAAKktB,eACrBltB,KAAKwZ,SAAWxZ,KAAKmtB,gBAMvBlE,EAAArpB,UAAAwtB,WAAA,SAAWjoB,OAAE6Z,EAAA7Z,EAAA6Z,OAIPhf,KAAKygB,iBAAmBzgB,KAAKme,iBAIjCne,KAAKgf,OAASA,EAEdhf,KAAKgd,KAAK/X,KAAK,CACbknB,MAAOnsB,KAAKmsB,MACZhN,SAAUnf,KAAKmf,SACfiN,MAAOpsB,KAAKosB,MACZpN,OAAQhf,KAAKgf,WAOjBiK,EAAArpB,UAAAwf,aAAA,SAAa1Y,GACX1G,KAAK0iB,SAASrhB,KAAKqF,EAAM2Y,SACzBrf,KAAK4O,OAAO3J,KAAKyB,GACjB1G,KAAK8c,GAAGqH,iBAMV8E,EAAArpB,UAAAytB,aAAA,SAAa3mB,GACX1G,KAAKgf,OAAStY,EAAMsW,KAAO,EAC3Bhd,KAAKisB,cAAclN,cAAc/e,KAAKgf,QAEtChf,KAAKgd,KAAK/X,KAAK,CACbknB,MAAOnsB,KAAKmsB,MACZhN,SAAUnf,KAAKmf,SACfiN,MAAOpsB,KAAKosB,MACZpN,OAAQhf,KAAKgf,SAGXhf,KAAKuqB,sBACPvqB,KAAK+c,SAAW,GAChB/c,KAAKkd,OAAOjY,KAAK,CACf8X,SAAU/c,KAAK+c,aAQrBkM,EAAArpB,UAAAstB,aAAA,SAAapU,GAIX,QAJW,IAAAA,IAAAA,EAAa9Y,KAAKgS,MAIzBhS,KAAK0O,YAAc1O,KAAKme,eAAgB,CAC1C,IAAMmP,EAAOlf,KAAKoR,KAAKxf,KAAKwgB,WAAcxgB,KAAKsQ,WAC/C,OAAOlC,KAAKsS,IAAI4M,EAAM,GAIxB,YAAmBnlB,IAAfnI,KAAKosB,MACApsB,KAAKosB,MAIVtT,EACKA,EAAIpZ,OAIN,GAMTupB,EAAArpB,UAAAutB,aAAA,SAAarU,GACX,YADW,IAAAA,IAAAA,EAAa9Y,KAAKgS,MACxBhS,KAAKygB,eAYHzgB,KAAKmsB,MAXLrT,EAED9Y,KAAK0f,YACA1f,KAAK0f,YAAYhgB,OACU,MAAzBM,KAAKmrB,kBAAmD,MAAvBnrB,KAAKorB,eACxCprB,KAAKirB,cAAcvrB,OAEnBoZ,EAAIpZ,OAPI,GAiBrBupB,EAAArpB,UAAA2tB,oBAAA,SAAoBpoB,OAAEuB,EAAAvB,EAAAuB,MAAOoO,EAAA3P,EAAA2P,OAC3B9U,KAAK2qB,iBAAiB1lB,KAAK,CAAEyB,MAAKA,EAAEkK,KAAMwC,EAAAA,gBAAgBoa,OAAQC,QAAS3Y,KAM7EmU,EAAArpB,UAAA8tB,iBAAA,SAAiBvoB,OAAEuB,EAAAvB,EAAAuB,MAAO8K,EAAArM,EAAAqM,IACxBxR,KAAK2qB,iBAAiB1lB,KAAK,CAAEyB,MAAKA,EAAEkK,KAAMwC,EAAAA,gBAAgB3Q,KAAMgrB,QAASjc,KAM3EyX,EAAArpB,UAAA+tB,eAAA,SAAexoB,OAAE2P,EAAA3P,EAAA2P,OAAQoO,EAAA/d,EAAA+d,SAEvB,QAAe/a,IAAX2M,EAAJ,CAIA,IAAI8I,EACEjG,EAAO3X,KAAKurB,iBAAiBzH,KAAI,SAACvjB,EAAGhB,GAYzC,OAXAgB,EAACrB,EAAA,GAAQqB,IAEHwM,OAAS+H,EAAO/H,OACpB6Q,EAAMre,EACNgB,EAAE2B,MAAQghB,EAIV3iB,EAAEsmB,WAAa3D,GAGV3iB,KAGTP,KAAKwrB,mBAAmB7T,EAAMiG,GAC9B5d,KAAKurB,iBAAmB5T,EAExB3X,KAAKwI,OAAOvD,KAAK,CACf6P,OAAMA,EACNoO,SAAQA,MAOZ+F,EAAArpB,UAAAguB,gBAAA,SAAgBzoB,OAAE2P,EAAA3P,EAAA2P,OAAQoO,EAAA/d,EAAA+d,SAAUD,EAAA9d,EAAA8d,UAC5BtL,EAAO3X,KAAKurB,iBAAiBzH,KAAI,SAAAvjB,GACrC,OAAArB,EAAA,GAAYqB,MAGd,GAAIP,KAAK2pB,YAAa,CACpB,IAAMkE,EAAUlW,EAAKuL,GACrBvL,EAAKuL,GAAYpO,EACjB6C,EAAKsL,GAAa4K,OAElB,GAAI3K,EAAWD,EAAW,CAExB,IADA,IAAM6K,EAAWnW,EAAKsL,GACb1jB,EAAI0jB,EAAW1jB,EAAI2jB,EAAU3jB,IACpCoY,EAAKpY,GAAKoY,EAAKpY,EAAI,GAErBoY,EAAKuL,GAAY4K,MACZ,CAEL,IADMA,EAAWnW,EAAKsL,GACb1jB,EAAI0jB,EAAW1jB,EAAI2jB,EAAU3jB,IACpCoY,EAAKpY,GAAKoY,EAAKpY,EAAI,GAErBoY,EAAKuL,GAAY4K,EAIrB9tB,KAAKurB,iBAAmB5T,EAExB3X,KAAKiK,QAAQhF,KAAK,CAChB6P,OAAMA,EACNoO,SAAQA,EACRD,UAASA,KAObgG,EAAArpB,UAAAmuB,aAAA,SAAarnB,GAEP1G,KAAKuqB,sBACPvqB,KAAK+c,SAAW,GAChB/c,KAAKkd,OAAOjY,KAAK,CACf8X,SAAU/c,KAAK+c,YAInB/c,KAAK4jB,MAAQld,EAAMkd,OAIU,IAAzB5jB,KAAKypB,iBAEPzpB,KAAKkrB,mBAIPlrB,KAAKirB,cAAgBlZ,EACnB/R,KAAKirB,cACLnZ,EAAsB9R,KAAKmrB,kBAC3BrZ,EAAsB9R,KAAKorB,iBAI7BprB,KAAKgf,OAAS,EACdhf,KAAKisB,cAAclN,cAAc/e,KAAKgf,QACtChf,KAAKgiB,KAAK/c,KAAKyB,IAMjBuiB,EAAArpB,UAAAouB,eAAA,SAAetnB,WACb,GAAI1G,KAAKisB,eAAiBjsB,KAAKuqB,oBAAqB,CAElD,IAAMhL,EAAQvf,KAAKisB,cAAc1O,QAAQgC,MACnCE,EAAOzf,KAAKisB,cAAc1O,QAAQkC,KAClCwO,EAAcjuB,KAAK+c,SAASrd,SAAW+f,EAAOF,EAGpDvf,KAAK+c,SAAW,GAGXkR,IACH9oB,EAAAnF,KAAK+c,UAASnb,KAAI7B,MAAAoF,EAAArD,EAAI9B,KAAKirB,cAActX,MAAM4L,EAAOE,SAEnD,CAECwO,EAAcjuB,KAAK+c,SAASrd,SAAWM,KAAKgS,KAAKtS,OAEvDM,KAAK+c,SAAW,GAEXkR,IACH3iB,EAAAtL,KAAK+c,UAASnb,KAAI7B,MAAAuL,EAAAxJ,EAAI9B,KAAKgS,OAI/BhS,KAAKkd,OAAOjY,KAAK,CACf8X,SAAU/c,KAAK+c,YAOnBkM,EAAArpB,UAAAsuB,aAAA,SAAaxnB,GACX1G,KAAKkd,OAAOjY,KAAKyB,IAMnBuiB,EAAArpB,UAAAgiB,aAAA,SAAalb,GAAb,IAAA3B,EAAA/E,KACQwR,EAAM9K,EAAM8K,IAEZ0N,EAAWlf,KAAKge,MAAM2D,WAAU,SAAAnhB,GAAK,OAAAA,EAAEuE,EAAKqmB,kBAAoB1kB,EAAM8K,IAAIzM,EAAKqmB,mBACrFprB,KAAKqd,WAAWpY,KAAK,CAAEuM,IAAGA,EAAE0N,SAAQA,KAGtC+J,EAAArpB,UAAA+E,YAAA,WACE3E,KAAK8qB,eAAepgB,SAAQ,SAAA7D,GAAgB,OAAAA,EAAaqB,kBAOnD+gB,EAAArpB,UAAA2sB,4BAAR,WAAA,IAAAxnB,EAAA/E,KACEA,KAAK8qB,eAAelpB,KAClB5B,KAAK4W,qBAAqBuX,oBAAoB3mB,WAAU,WAClDzC,EAAKsnB,iBACPtnB,EAAKsnB,gBAAgB+B,uBAMrBnF,EAAArpB,UAAAsrB,iBAAR,WACElrB,KAAKirB,cAAgBjD,GAAShoB,KAAKirB,cAAejrB,KAAKurB,iBAAkBvrB,KAAK4jB,iDAngBzC5hB,EAAe9B,WAAA,CAAA,CAAA0Q,KAAnDyd,EAAAA,kBACqC/qB,EAAgBpD,WAAA,CAAA,CAAA0Q,KAArDyd,EAAAA,kBACWxM,EAAAA,yBACHrc,EAAAA,kBACAwH,EAAAA,uBACqBtJ,kCAC7B4qB,EAAAA,UAAQ,CAAA1d,KAAI1N,EAAAA,OAAMC,KAAA,CAAC,sBAtkBblD,EAAA,CAARmI,EAAAA,oDAKQnI,EAAA,CAARmI,EAAAA,kCAwCQnI,EAAA,CAARmI,EAAAA,yCA6BQnI,EAAA,CAARmI,EAAAA,2CAKQnI,EAAA,CAARmI,EAAAA,qCAsBQnI,EAAA,CAARmI,EAAAA,wCAKQnI,EAAA,CAARmI,EAAAA,0CAKQnI,EAAA,CAARmI,EAAAA,0CAMQnI,EAAA,CAARmI,EAAAA,yCAMQnI,EAAA,CAARmI,EAAAA,0CAMQnI,EAAA,CAARmI,EAAAA,4CAMQnI,EAAA,CAARmI,EAAAA,4CAMQnI,EAAA,CAARmI,EAAAA,8CAMQnI,EAAA,CAARmI,EAAAA,+CAMQnI,EAAA,CAARmI,EAAAA,mCAkBQnI,EAAA,CAARmI,EAAAA,mCAkBQnI,EAAA,CAARmI,EAAAA,oCAWQnI,EAAA,CAARmI,EAAAA,gDAcQnI,EAAA,CAARmI,EAAAA,6CAMQnI,EAAA,CAARmI,EAAAA,2CAMQnI,EAAA,CAARmI,EAAAA,2CAKQnI,EAAA,CAARmI,EAAAA,wCAMQnI,EAAA,CAARmI,EAAAA,qCAKQnI,EAAA,CAARmI,EAAAA,0CAgBQnI,EAAA,CAARmI,EAAAA,wCAmBQnI,EAAA,CAARmI,EAAAA,wCAUQnI,EAAA,CAARmI,EAAAA,2CAUQnI,EAAA,CAARmI,EAAAA,4CAOQnI,EAAA,CAARmI,EAAAA,qDAMQnI,EAAA,CAARmI,EAAAA,2CAQQnI,EAAA,CAARmI,EAAAA,mDAKQnI,EAAA,CAARmI,EAAAA,8CAKQnI,EAAA,CAARmI,EAAAA,gDAKQnI,EAAA,CAARmI,EAAAA,8CAKQnI,EAAA,CAARmI,EAAAA,0CAKQnI,EAAA,CAARmI,EAAAA,6CAKQnI,EAAA,CAARmI,EAAAA,+CAKSnI,EAAA,CAAT0F,EAAAA,uCAKS1F,EAAA,CAAT0F,EAAAA,yCAKS1F,EAAA,CAAT0F,EAAAA,uCAKS1F,EAAA,CAAT0F,EAAAA,qCAKS1F,EAAA,CAAT0F,EAAAA,qCAKS1F,EAAA,CAAT0F,EAAAA,wCAKS1F,EAAA,CAAT0F,EAAAA,uCAOS1F,EAAA,CAAT0F,EAAAA,iDAKS1F,EAAA,CAAT0F,EAAAA,2CAMD1F,EAAA,CADCyF,EAAAA,YAAY,yDAWbzF,EAAA,CADCyF,EAAAA,YAAY,mDAUbzF,EAAA,CADCyF,EAAAA,YAAY,2DAUbzF,EAAA,CADCyF,EAAAA,YAAY,wDAUbzF,EAAA,CADCyF,EAAAA,YAAY,sDASbzF,EAAA,CADCyF,EAAAA,YAAY,sDASbzF,EAAA,CADCyF,EAAAA,YAAY,qEASbzF,EAAA,CADCyF,EAAAA,YAAY,6DASbzF,EAAA,CADCyF,EAAAA,YAAY,iEASbzF,EAAA,CADCyF,EAAAA,YAAY,+DASbzF,EAAA,CADCyF,EAAAA,YAAY,0EAUbzF,EAAA,CADCgN,EAAAA,gBAAgB0J,wCAiBjB1W,EAAA,CADC8Q,EAAAA,aAAasG,oCAOdpX,EAAA,CADC8Q,EAAAA,aAAaV,sCAOdpQ,EAAA,CADC8Q,EAAAA,aAAa0G,iCAQdxX,EAAA,CADC6hB,EAAAA,UAAUjF,yCAUX5c,EAAA,CADC6hB,EAAAA,UAAUC,2CAgHF9hB,EAAA,CAARmI,EAAAA,2CAoGDnI,EAAA,CAFC2J,EAAAA,aAAa,iBACbob,GAAa,uCAjvBHiE,EAAkBhpB,EAAA,CAV9B8P,EAAAA,UAAU,CACT5L,SAAU,gBACVH,SAAA,2tFACAiM,gBAAiBC,EAAAA,wBAAwBC,OACzCoe,cAAeC,EAAAA,kBAAkBC,KAEjC5kB,KAAM,CACJmG,MAAO,0oJAukBNnP,EAAA,EAAAwtB,EAAAA,YACAxtB,EAAA,EAAAwtB,EAAAA,YAKAxtB,EAAA,EAAAytB,EAAAA,YAAYztB,EAAA,EAAAqC,EAAAA,OAAO,mBA1kBX+lB,oBCiHX,SAAAyF,EAAoB5R,GAAA9c,KAAA8c,GAAAA,EA9EV9c,KAAAgiB,KAA0B,IAAIxd,EAAAA,aAC9BxE,KAAAkd,OAA4B,IAAI1Y,EAAAA,aAChCxE,KAAAiiB,kBAAoB,IAAIzd,EAAAA,cAAiD,GA4DnFxE,KAAA2uB,OAAS3uB,KAAK2jB,OAAOlZ,KAAKzK,MAG1BA,KAAA4uB,SAAW5uB,KAAKkd,OAAOjY,KAAKwF,KAAKzK,KAAKkd,QAEtCld,KAAA6uB,YAAmB,CACjB/Z,OAAQ9U,KAAK8U,OACbga,QAAS9uB,KAAK8uB,QACdH,OAAQ3uB,KAAK2uB,OACb3C,gBAAiBhsB,KAAKgsB,gBACtB4C,SAAU5uB,KAAK4uB,UA2CnB,OAvJWzvB,OAAAyB,eAAI8tB,EAAA9uB,UAAA,kBAAe,KAI5B,WACE,OAAOI,KAAK+uB,sBALL,SAAoBztB,GAC3BtB,KAAK+uB,iBAAmBztB,EACxBtB,KAAK6uB,YAAY7C,gBAAkB1qB,mCAQ5BnC,OAAAyB,eAAI8tB,EAAA9uB,UAAA,SAAM,KAMnB,WACE,OAAOI,KAAKgvB,aAPL,SAAWla,GAClB9U,KAAKgvB,QAAUla,EACf9U,KAAK6uB,YAAY/Z,OAASA,EAC1B9U,KAAK8c,GAAG+B,gDAWD1f,OAAAyB,eAAI8tB,EAAA9uB,UAAA,QAAK,KAQlB,WACE,OAAOI,KAAKivB,YATL,SAAUnW,GACjB9Y,KAAKivB,OAASnW,EACd9Y,KAAK8uB,QAAU9uB,KAAKkvB,YAAYpW,GAChC9Y,KAAK6uB,YAAYC,QAAU9uB,KAAK8uB,QAChC9uB,KAAKmvB,UAAYnvB,KAAKovB,cAAcpvB,KAAK8uB,SACzC9uB,KAAK8c,GAAG+B,gDAYV1f,OAAAyB,eAAI8tB,EAAA9uB,UAAA,mBAAgB,KAApB,mBACMyvB,EAAM,wBAIV,GAFIrvB,KAAK8U,OAAOM,WAAUia,GAAO,aAC7BrvB,KAAK8U,OAAOK,aAAYka,GAAO,eAC/BrvB,KAAK8U,OAAOwa,YACd,GAAuC,iBAA5BtvB,KAAK8U,OAAOwa,YACrBD,GAAO,IAAMrvB,KAAK8U,OAAOwa,iBACpB,GAAuC,mBAA5BtvB,KAAK8U,OAAOwa,YAA4B,CACxD,IAAMC,EAAMvvB,KAAK8U,OAAOwa,YAAY,CAClCxa,OAAQ9U,KAAK8U,SAGf,GAAmB,iBAARya,EACTF,GAAOE,OACF,GAAmB,iBAARA,EAAkB,CAClC,IAAMC,EAAOrwB,OAAOqwB,KAAKD,OACzB,IAAgB,IAAAE,EAAAzuB,EAAAwuB,GAAIE,EAAAD,EAAApuB,QAAAquB,EAAAnuB,KAAAmuB,EAAAD,EAAApuB,OAAE,CAAjB,IAAMsuB,EAACD,EAAApuB,OACK,IAAXiuB,EAAII,KAAaN,GAAO,IAAIM,uGAMxC,IAAMb,EAAU9uB,KAAK8uB,QAKrB,OAJIA,IACFO,GAAO,qBAAqBP,GAGvBO,mCAITlwB,OAAAyB,eAAI8tB,EAAA9uB,UAAA,OAAI,KAAR,WAEE,YAAsCuI,IAA/BnI,KAAK8U,OAAOsB,eAA+BpW,KAAK8U,OAAOE,UAAO7M,mCAIvEhJ,OAAAyB,eAAI8tB,EAAA9uB,UAAA,WAAQ,KAAZ,WACE,OAAOI,KAAK8U,OAAOtL,0CAIrBrK,OAAAyB,eAAI8tB,EAAA9uB,UAAA,WAAQ,KAAZ,WACE,OAAOI,KAAK8U,OAAOpL,0CAIrBvK,OAAAyB,eAAI8tB,EAAA9uB,UAAA,QAAK,KAAT,WACE,OAAOI,KAAK8U,OAAO5S,uCAGrB/C,OAAAyB,eAAI8tB,EAAA9uB,UAAA,iBAAc,KAAlB,WACE,OAAOI,KAAK8U,OAAO8a,cAAgB5vB,KAAK8U,OAAO+a,oBAAsB7vB,KAAKue,gBAAkBrL,EAAAA,cAAcwY,0CAsB5GgD,EAAA9uB,UAAAkwB,cAAA,SAAcC,GACZ/vB,KAAKiiB,kBAAkBhd,KAAK,CAAEyB,MAAOqpB,EAAQjb,OAAQ9U,KAAK8U,UAG5D4Z,EAAA9uB,UAAAsvB,YAAA,SAAYtL,GAAZ,IAAA7e,EAAA/E,KACE,GAAI4jB,GAAS5jB,KAAK8U,OAAQ,CACxB,IAAMkN,EAAO4B,EAAMxZ,MAAK,SAAC9K,GACvB,OAAOA,EAAEwM,OAAS/G,EAAK+P,OAAOhJ,QAGhC,GAAIkW,EAAM,OAAOA,EAAK+B,MAI1B2K,EAAA9uB,UAAA+jB,OAAA,WACE,GAAK3jB,KAAK8U,OAAOM,SAAjB,CAEA,IAAM8N,EAAW0E,GAAY5nB,KAAKgkB,SAAUhkB,KAAK8uB,SACjD9uB,KAAKgiB,KAAK/c,KAAK,CACb6P,OAAQ9U,KAAK8U,OACbmO,UAAWjjB,KAAK8uB,QAChB5L,SAAQA,MAIZwL,EAAA9uB,UAAAwvB,cAAA,SAAcN,GACZ,OAAIA,IAAYlS,EAAAA,cAAciL,IACrB,qBAAqB7nB,KAAKgwB,kBACxBlB,IAAYlS,EAAAA,cAAcvc,KAC5B,sBAAsBL,KAAKiwB,mBAE3B,qDAlCapO,EAAAA,qBA5Hf5hB,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,iDACQnI,EAAA,CAARmI,EAAAA,kDAEQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,oDACQnI,EAAA,CAARmI,EAAAA,mDAIQnI,EAAA,CAARmI,EAAAA,6CAQQnI,EAAA,CAARmI,EAAAA,6CAEQnI,EAAA,CAARmI,EAAAA,oCAYDnI,EAAA,CAFCyF,EAAAA,YAAY,mBACZ0C,EAAAA,4CAGQnI,EAAA,CAARmI,EAAAA,mCAYSnI,EAAA,CAAT0F,EAAAA,qCACS1F,EAAA,CAAT0F,EAAAA,uCACS1F,EAAA,CAAT0F,EAAAA,kDAGD1F,EAAA,CADCyF,EAAAA,YAAY,+CAkCbzF,EAAA,CADCyF,EAAAA,YAAY,wCAObzF,EAAA,CADCyF,EAAAA,YAAY,mDAMbzF,EAAA,CADCyF,EAAAA,YAAY,mDAMbzF,EAAA,CADCyF,EAAAA,YAAY,6CA4BbzF,EAAA,CADC2J,EAAAA,aAAa,cAAe,CAAC,8CA/HnB8kB,EAA4BzuB,EAAA,CA9BxC8P,EAAAA,UAAU,CACT5L,SAAU,wBACVH,SAAU,s4BAuBV6F,KAAM,CACJmG,MAAO,yBAETC,gBAAiBC,EAAAA,wBAAwBC,UAE9Bue,oBCAb,SAAAwB,IAYWlwB,KAAAmwB,cAAwB,EAGvBnwB,KAAAgd,KAA0B,IAAIxY,EAAAA,aAS1C,OAPErF,OAAAyB,eAAIsvB,EAAAtwB,UAAA,YAAS,KAAb,WACE,OAAOI,KAAKwZ,SAAWxZ,KAAKmf,SAAW,mCAGzChgB,OAAAyB,eAAIsvB,EAAAtwB,UAAA,UAAO,KAAX,WACE,OAAOI,KAAKgf,OAAS,mCArBd/e,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,sCACQnI,EAAA,CAARmI,EAAAA,kDACQnI,EAAA,CAARmI,EAAAA,mDACQnI,EAAA,CAARmI,EAAAA,iDACQnI,EAAA,CAARmI,EAAAA,6CACQnI,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,8CAEQnI,EAAA,CAARmI,EAAAA,6CACQnI,EAAA,CAARmI,EAAAA,+CAESnI,EAAA,CAAT0F,EAAAA,qCAfUuqB,EAAwBjwB,EAAA,CA5CpC8P,EAAAA,UAAU,CACT5L,SAAU,mBACVH,SAAU,2qCAqCV6F,KAAM,CACJmG,MAAO,oBAETC,gBAAiBC,EAAAA,wBAAwBC,UAE9B+f,oBCFb,SAAAE,IAyCYpwB,KAAAqwB,OAA4B,IAAI7rB,EAAAA,aAE1CxE,KAAA6qB,OAAiB,EACjB7qB,KAAAswB,MAAgB,EAChBtwB,KAAAuwB,MAAgB,EA4DlB,OAlGEpxB,OAAAyB,eAAIwvB,EAAAxwB,UAAA,OAAI,KAKR,WACE,OAAOI,KAAKuwB,WANd,SAASzX,GACP9Y,KAAKuwB,MAAQzX,EACb9Y,KAAKwwB,MAAQxwB,KAAKywB,6CAQpBtxB,OAAAyB,eAAIwvB,EAAAxwB,UAAA,QAAK,KAKT,WACE,OAAOI,KAAK6qB,YANd,SAAU/R,GACR9Y,KAAK6qB,OAAS/R,EACd9Y,KAAKwwB,MAAQxwB,KAAKywB,6CAQpBtxB,OAAAyB,eAAIwvB,EAAAxwB,UAAA,OAAI,KAKR,WACE,OAAOI,KAAKswB,WANd,SAASxX,GACP9Y,KAAKswB,MAAQxX,EACb9Y,KAAKwwB,MAAQxwB,KAAKywB,6CAOpBtxB,OAAAyB,eAAIwvB,EAAAxwB,UAAA,aAAU,KAAd,WACE,IAAMusB,EAAQnsB,KAAKstB,KAAO,EAAI,EAAIlf,KAAKoR,KAAKxf,KAAKmsB,MAAQnsB,KAAKstB,MAC9D,OAAOlf,KAAKsS,IAAIyL,GAAS,EAAG,oCAU9BiE,EAAAxwB,UAAA8wB,YAAA,WACE,OAAO1wB,KAAKgd,KAAO,GAGrBoT,EAAAxwB,UAAA+wB,QAAA,WACE,OAAO3wB,KAAKgd,KAAOhd,KAAK4wB,YAG1BR,EAAAxwB,UAAAixB,SAAA,WACE7wB,KAAK8wB,WAAW9wB,KAAKgd,KAAO,IAG9BoT,EAAAxwB,UAAAmxB,SAAA,WACE/wB,KAAK8wB,WAAW9wB,KAAKgd,KAAO,IAG9BoT,EAAAxwB,UAAAkxB,WAAA,SAAW9T,GACLA,EAAO,GAAKA,GAAQhd,KAAK4wB,YAAc5T,IAAShd,KAAKgd,OACvDhd,KAAKgd,KAAOA,EAEZhd,KAAKqwB,OAAOprB,KAAK,CACf+X,KAAIA,MAKVoT,EAAAxwB,UAAA6wB,UAAA,SAAUzT,GACR,IAAMwT,EAAQ,GACVQ,EAAY,EACZC,EAAUjxB,KAAK4wB,WAEbM,EADU,EACalxB,KAAK4wB,WAElC5T,EAAOA,GAAQhd,KAAKgd,KAEhBkU,IACFF,EAAYhU,EAAO5O,KAAKmK,MAAM4Y,KAC9BF,EAAUjU,EAAO5O,KAAKmK,MAAM4Y,KAExBH,EAAY,GACdA,EAAY,EACZC,EAAU7iB,KAAKuS,IAAIqQ,EAXP,EAW6B,EAAGhxB,KAAK4wB,aACxCK,EAAUjxB,KAAK4wB,aACxBI,EAAY5iB,KAAKsS,IAAI1gB,KAAK4wB,WAbd,EAaqC,EAAG,GACpDK,EAAUjxB,KAAK4wB,aAInB,IAAK,IAAIQ,EAAMJ,EAAWI,GAAOH,EAASG,IACxCZ,EAAM5uB,KAAK,CACTyvB,OAAQD,EACRE,KAAoBF,IAIxB,OAAOZ,GAtGAvwB,EAAA,CAARmI,EAAAA,kDACQnI,EAAA,CAARmI,EAAAA,mDACQnI,EAAA,CAARmI,EAAAA,iDACQnI,EAAA,CAARmI,EAAAA,6CAGDnI,EAAA,CADCmI,EAAAA,kCAWDnI,EAAA,CADCmI,EAAAA,mCAWDnI,EAAA,CADCmI,EAAAA,kCAeSnI,EAAA,CAAT0F,EAAAA,uCAzCUyqB,EAAuBnwB,EAAA,CA1CnC8P,EAAAA,UAAU,CACT5L,SAAU,kBACVH,SAAU,gwCAmCV6F,KAAM,CACJmG,MAAO,mBAETC,gBAAiBC,EAAAA,wBAAwBC,UAE9BigB,oBC/Bb,SAAAmB,KAAmC,OAAtBA,EAAoBtxB,EAAA,CAXhC8P,EAAAA,UAAU,CACT5L,SAAU,qBACVH,SAAU,uJAOViM,gBAAiBC,EAAAA,wBAAwBC,UAE9BohB,OLbDvI,GAAAA,EAAAA,OAAAA,EAAAA,KAAI,KACdA,GAAA,GAAA,IAAA,KACAA,GAAAA,GAAA,KAAA,IAAA,OACAA,GAAAA,GAAA,OAAA,IAAA,SACAA,GAAAA,GAAA,OAAA,IAAA,SACAA,GAAAA,GAAA,KAAA,IAAA,OACAA,GAAAA,GAAA,MAAA,IAAA,0BMgJA,SAAAwI,EACUxnB,EACYkf,EACZpM,EACRtZ,GAHQxD,KAAAgK,QAAAA,EACYhK,KAAAkpB,gBAAAA,EACZlpB,KAAA8c,GAAAA,EAtED9c,KAAAsT,WAAyB,YAkDxBtT,KAAAid,SAA8B,IAAIzY,EAAAA,aAClCxE,KAAAqd,WAAgC,IAAI7Y,EAAAA,aAQ9CxE,KAAAyxB,aAAuC,CACrCzpB,KAAM,GACN6P,OAAQ,GACR9L,MAAO,IAWP/L,KAAK0xB,SAAWluB,EAAQ4B,cACxBpF,KAAK2xB,WAAa3nB,EAAQI,KAAK,IAAIC,SAgGvC,OA1MWlL,OAAAyB,eAAI4wB,EAAA5xB,UAAA,UAAO,KAMpB,WACE,OAAOI,KAAKie,cAPL,SAAYnF,GACnB9Y,KAAKie,SAAWnF,EAChB9Y,KAAKwrB,mBAAmB1S,GACxB9Y,KAAK4xB,sDAOEzyB,OAAAyB,eAAI4wB,EAAA5xB,UAAA,aAAU,KAWvB,WACE,OAAOI,KAAKqiB,iBAZL,SAAevJ,GACtB,GAAI9Y,KAAKie,SAAU,CACjB,IAAMqE,EAAW5K,EAAa1X,KAAKie,UACnCje,KAAKkiB,mBAAqBhK,EAAkBoK,EAAUtiB,KAAKie,UAG7Dje,KAAKqiB,YAAcvJ,EACnB9Y,KAAKwrB,qBACLxrB,KAAK4xB,sDAiBPzyB,OAAAyB,eAAI4wB,EAAA5xB,UAAA,UAAO,KAIX,WACE,OAAOI,KAAK0iB,cALd,SAAY5J,GACV9Y,KAAK0iB,SAAW5J,EAChB9Y,KAAK4xB,sDAOPzyB,OAAAyB,eAAI4wB,EAAA5xB,UAAA,WAAQ,KAAZ,mBACMyvB,EAAM,qBAWV,GAVIrvB,KAAK6xB,aACPxC,GAAO,WAELrvB,KAAKkf,SAAW,GAAM,IACxBmQ,GAAO,sBAELrvB,KAAKkf,SAAW,GAAM,IACxBmQ,GAAO,uBAGLrvB,KAAK8xB,SAAU,CACjB,IAAMvC,EAAMvvB,KAAK8xB,SAAS9xB,KAAKwR,KAC/B,GAAmB,iBAAR+d,EACTF,GAAO,IAAIE,OACN,GAAmB,iBAARA,EAAkB,CAClC,IAAMC,EAAOrwB,OAAOqwB,KAAKD,OACzB,IAAgB,IAAAE,EAAAzuB,EAAAwuB,GAAIE,EAAAD,EAAApuB,QAAAquB,EAAAnuB,KAAAmuB,EAAAD,EAAApuB,OAAE,CAAjB,IAAMsuB,EAACD,EAAApuB,OACK,IAAXiuB,EAAII,KACNN,GAAO,IAAIM,uGAMnB,OAAON,mCAQTlwB,OAAAyB,eAAI4wB,EAAA5xB,UAAA,qBAAkB,KAAtB,WACE,OAAOI,KAAKkiB,mBAAmB5J,uCA8BjCkZ,EAAA5xB,UAAA8sB,UAAA,WACM1sB,KAAK2xB,WAAW/mB,KAAK5K,KAAKwR,MAC5BxR,KAAK8c,GAAG+B,gBAIZ2S,EAAA5xB,UAAAkjB,cAAA,SAAc9W,EAAe+W,GAC3B,OAAOA,EAASnS,MAGlB4gB,EAAA5xB,UAAAwhB,iBAAA,SAAiBpV,EAAe8I,GAC9B,OAAOA,EAAO/H,MAGhBykB,EAAA5xB,UAAAgyB,mBAAA,WACE5xB,KAAKyxB,aAAazpB,KAAOhI,KAAKkkB,kBAAkB,QAChDlkB,KAAKyxB,aAAa5Z,OAAS7X,KAAKkkB,kBAAkB,UAClDlkB,KAAKyxB,aAAa1lB,MAAQ/L,KAAKkkB,kBAAkB,SACjDlkB,KAAK8c,GAAG+B,gBAGV2S,EAAA5xB,UAAAskB,kBAAA,SAAkBvT,GAChB,IAAM2Q,EAASthB,KAAKkiB,mBACd7C,EAAUrf,KAAKqf,QAEfjE,EAAS,CACblZ,MAAUof,EAAO3Q,GAAM,MAGzB,GAAc,SAAVA,EACFgM,GAAYvB,EAAQiE,EAAS,QACxB,GAAc,UAAV1O,EAAmB,CAC5B,IAAM4Q,EAAY5V,SAAS3L,KAAKqe,WAAa,GAAI,GAIjD1B,GAAYvB,GADgD,GAF1CkG,EAAOhJ,MAAQiJ,EACFlC,EACFrf,KAAKkpB,gBAAgBhnB,OACtB,GAG9B,OAAOkZ,GAGToW,EAAA5xB,UAAAmyB,WAAA,SAAWrrB,EAAYsF,GACrBtF,EAAMsrB,UAAYhmB,EAClBtF,EAAMurB,WAAajyB,KAAK0xB,SACxB1xB,KAAKid,SAAShY,KAAKyB,IAIrB8qB,EAAA5xB,UAAAsyB,UAAA,SAAUxrB,GACR,IAAMyrB,EAAUzrB,EAAMyrB,QAChBC,EAAc1rB,EAAMvG,SAAWH,KAAK0xB,UAGxCS,IAAYnJ,EAAAA,KAAKqJ,QACjBF,IAAYnJ,EAAAA,KAAKsJ,MACjBH,IAAYnJ,EAAAA,KAAKuJ,IACjBJ,IAAYnJ,EAAAA,KAAKhhB,MACjBmqB,IAAYnJ,EAAAA,KAAKjd,QAEHqmB,IACd1rB,EAAMM,iBACNN,EAAM2C,kBAENrJ,KAAKid,SAAShY,KAAK,CACjB2L,KAAM,UACNlK,MAAKA,EACL8K,IAAKxR,KAAKwR,IACVygB,WAAYjyB,KAAK0xB,aAMvBF,EAAA5xB,UAAA4yB,aAAA,SAAa9rB,GACX1G,KAAKid,SAAShY,KAAK,CACjB2L,KAAM,aACNlK,MAAKA,EACL8K,IAAKxR,KAAKwR,IACVygB,WAAYjyB,KAAK0xB,YAIrBF,EAAA5xB,UAAA4rB,mBAAA,SAAmB1S,QAAA,IAAAA,IAAAA,EAAa9Y,KAAK0U,SACnC1U,KAAKie,SAAWnF,EAChB,IAAME,EAAYtB,EAAa1X,KAAKie,UACpCje,KAAKyiB,cAAgB5J,EAAgB7Y,KAAKie,UAC1Cje,KAAKkiB,mBAAqBhK,EAAkBc,EAAWhZ,KAAKie,WAG9DuT,EAAA5xB,UAAAgiB,aAAA,WACE5hB,KAAKqd,WAAWpY,iDApGC+H,EAAAA,uBACoBhL,EAAe9B,WAAA,CAAA,CAAA0Q,KAAnDyd,EAAAA,kBACWxM,EAAAA,yBACHrc,EAAAA,cAvGFvF,EAAA,CAARmI,EAAAA,qCAUQnI,EAAA,CAARmI,EAAAA,wCAeQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,mCACQnI,EAAA,CAARmI,EAAAA,qCACQnI,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,4CACQnI,EAAA,CAARmI,EAAAA,0CAGDnI,EAAA,CADCmI,EAAAA,qCAUDnI,EAAA,CADCyF,EAAAA,YAAY,uCAgCbzF,EAAA,CAFCyF,EAAAA,YAAY,mBACZ0C,EAAAA,yCAIDnI,EAAA,CADCyF,EAAAA,YAAY,0DAKHzF,EAAA,CAAT0F,EAAAA,yCACS1F,EAAA,CAAT0F,EAAAA,2CA2ED1F,EAAA,CADC2J,EAAAA,aAAa,UAAW,CAAC,0CA0B1B3J,EAAA,CADC2J,EAAAA,aAAa,aAAc,CAAC,6CAvLlB4nB,EAAyBvxB,EAAA,CA5BrC8P,EAAAA,UAAU,CACT5L,SAAU,qBACV8L,gBAAiBC,EAAAA,wBAAwBC,OACzCnM,SAAU,8wBA+HPnD,EAAA,EAAAwtB,EAAAA,aAtGQmD,oBC0CX,SAAAiB,EAAoB3V,EAA+B9S,GAA/BhK,KAAA8c,GAAAA,EAA+B9c,KAAAgK,QAAAA,EAxCzChK,KAAAod,eAAiB,IAAI5Y,EAAAA,cAA8C,GAwB7ExE,KAAA0yB,aAAoB,CAClB/hB,MAAO3Q,KAAKwR,IACZwI,SAAUha,KAAKga,SACfkF,SAAUlf,KAAKkf,UAGjBlf,KAAA2yB,WAAkB,CAChBnhB,IAAKxR,KAAKwR,IACVwI,SAAUha,KAAKga,SACfkF,SAAUlf,KAAKkf,UAITlf,KAAA4yB,WAAqB,EAI3B5yB,KAAKgrB,UAAYhhB,EAAQI,KAAK,IAAIC,SAyBtC,OAhEWlL,OAAAyB,eAAI6xB,EAAA7yB,UAAA,WAAQ,KAOrB,WACE,OAAOI,KAAK6yB,eARL,SAAa/Z,GACpB9Y,KAAK6yB,UAAY/Z,EACjB9Y,KAAK2yB,WAAWzT,SAAWpG,EAC3B9Y,KAAK0yB,aAAaxT,SAAWpG,EAC7B9Y,KAAK8c,GAAG+B,gDAOD1f,OAAAyB,eAAI6xB,EAAA7yB,UAAA,WAAQ,KAOrB,WACE,OAAOI,KAAK4yB,eARL,SAAa9Z,GACpB9Y,KAAK4yB,UAAY9Z,EACjB9Y,KAAK0yB,aAAa1Y,SAAWlB,EAC7B9Y,KAAK2yB,WAAW3Y,SAAWlB,EAC3B9Y,KAAK8c,GAAG+B,gDA2BV4T,EAAA7yB,UAAA8sB,UAAA,WACM1sB,KAAKgrB,UAAUpgB,KAAK5K,KAAKwR,OAC3BxR,KAAK2yB,WAAWnhB,IAAMxR,KAAKwR,IAC3BxR,KAAK0yB,aAAa/hB,MAAQ3Q,KAAKwR,IAC/BxR,KAAK8c,GAAG+B,iBAKZ4T,EAAA7yB,UAAAkwB,cAAA,SAAcC,GACZ/vB,KAAKod,eAAenY,KAAK,CAAEyB,MAAOqpB,EAAQve,IAAKxR,KAAKwR,OAGtDihB,EAAA7yB,UAAAkzB,oBAAA,WACE,IAAM1X,EAAS,GAMf,OAJAA,EAAkB,UAAI,eAAiBpb,KAAKqf,QAAU,gBACtDjE,EAAO,uBAAyB,SAChCA,EAAc,MAAIpb,KAAKqe,WAEhBjD,4CAxBeyG,EAAAA,yBAAoC7U,EAAAA,mBA/CnD/M,EAAA,CAARmI,EAAAA,0CACQnI,EAAA,CAARmI,EAAAA,yCACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,uCACQnI,EAAA,CAARmI,EAAAA,+CACQnI,EAAA,CAARmI,EAAAA,mCACQnI,EAAA,CAARmI,EAAAA,2CACSnI,EAAA,CAAT0F,EAAAA,+CAEQ1F,EAAA,CAARmI,EAAAA,sCAWQnI,EAAA,CAARmI,EAAAA,sCAwCDnI,EAAA,CADC2J,EAAAA,aAAa,cAAe,CAAC,8CA5DnB6oB,EAA4BxyB,EAAA,CA/BxC8P,EAAAA,UAAU,CACT5L,SAAU,wBACV8L,gBAAiBC,EAAAA,wBAAwBC,OACzCnM,SAAU,40BAwBV6F,KAAM,CACJmG,MAAO,4BAGEyiB,oBCsOX,SAAAM,EAAYvvB,EAA6BsZ,GAAA9c,KAAA8c,GAAAA,EA1G/B9c,KAAAid,SAA8B,IAAIzY,EAAAA,aAElCxE,KAAAqd,WAAgC,IAAI7Y,EAAAA,aA2E9CxE,KAAAgzB,WAAY,EACZhzB,KAAAizB,mBAAqBjzB,KAAKkzB,iBAAiBzoB,KAAKzK,MAChDA,KAAAmzB,WAAanzB,KAAKid,SAAShY,KAAKwF,KAAKzK,KAAKid,UAE1Cjd,KAAA6uB,YAAmB,CACjBoE,mBAAoBjzB,KAAKizB,mBACzBE,WAAYnzB,KAAKmzB,WACjB3hB,IAAKxR,KAAKwR,IACVb,MAAO3Q,KAAK2Q,MACZrP,MAAOtB,KAAKsB,MACZwT,OAAQ9U,KAAK8U,OACbxE,UAAWtQ,KAAKsQ,UAChBuhB,WAAY7xB,KAAK6xB,WACjB3S,SAAUlf,KAAKkf,SACf5L,WAAYtT,KAAKsT,WACjBsO,aAAc5hB,KAAK4hB,aAAanX,KAAKzK,OAerCA,KAAK0xB,SAAWluB,EAAQ4B,cAmJ5B,OAjWWjG,OAAAyB,eAAImyB,EAAAnzB,UAAA,QAAK,KAOlB,WACE,OAAOI,KAAKozB,YARL,SAAUziB,GACjB3Q,KAAKozB,OAASziB,EACd3Q,KAAK6uB,YAAYle,MAAQA,EACzB3Q,KAAKqzB,oBACLrzB,KAAK8c,GAAG+B,gDAOD1f,OAAAyB,eAAImyB,EAAAnzB,UAAA,YAAS,KAOtB,WACE,OAAOI,KAAKszB,gBARL,SAAcxa,GACrB9Y,KAAKszB,WAAaxa,EAClB9Y,KAAK6uB,YAAYve,UAAYwI,EAC7B9Y,KAAKqzB,oBACLrzB,KAAK8c,GAAG+B,gDAOD1f,OAAAyB,eAAImyB,EAAAnzB,UAAA,aAAU,KAMvB,WACE,OAAOI,KAAKuzB,iBAPL,SAAeza,GACtB9Y,KAAKuzB,YAAcza,EACnB9Y,KAAK6uB,YAAYgD,WAAa/Y,EAC9B9Y,KAAK8c,GAAG+B,gDAOD1f,OAAAyB,eAAImyB,EAAAnzB,UAAA,WAAQ,KAMrB,WACE,OAAOI,KAAK4yB,eAPL,SAAa9Z,GACpB9Y,KAAK4yB,UAAY9Z,EACjB9Y,KAAK6uB,YAAY7U,SAAWlB,EAC5B9Y,KAAK8c,GAAG+B,gDAOD1f,OAAAyB,eAAImyB,EAAAnzB,UAAA,WAAQ,KAOrB,WACE,OAAOI,KAAK6yB,eARL,SAAa/Z,GACpB9Y,KAAK6yB,UAAY/Z,EACjB9Y,KAAK6uB,YAAY3P,SAAWpG,EAC5B9Y,KAAKqzB,oBACLrzB,KAAK8c,GAAG+B,gDAOD1f,OAAAyB,eAAImyB,EAAAnzB,UAAA,SAAM,KAOnB,WACE,OAAOI,KAAKgvB,aARL,SAAWla,GAClB9U,KAAKgvB,QAAUla,EACf9U,KAAK6uB,YAAY/Z,OAASA,EAC1B9U,KAAKqzB,oBACLrzB,KAAK8c,GAAG+B,gDAOD1f,OAAAyB,eAAImyB,EAAAnzB,UAAA,MAAG,KAOhB,WACE,OAAOI,KAAKwzB,UARL,SAAQhiB,GACfxR,KAAKwzB,KAAOhiB,EACZxR,KAAK6uB,YAAYrd,IAAMA,EACvBxR,KAAKqzB,oBACLrzB,KAAK8c,GAAG+B,gDAOD1f,OAAAyB,eAAImyB,EAAAnzB,UAAA,QAAK,KAKlB,WACE,OAAOI,KAAKivB,YANL,SAAUnW,GACjB9Y,KAAKivB,OAASnW,EACd9Y,KAAKkvB,YAAclvB,KAAKkvB,YAAYpW,oCAO7B3Z,OAAAyB,eAAImyB,EAAAnzB,UAAA,aAAU,KAWvB,WACE,OAAOI,KAAKyzB,iBAZL,SAAeC,GAEpB1zB,KAAKyzB,YADQ,cAAXC,GAAqC,aAAXA,GAAoC,YAAXA,GAAmC,aAAXA,EAC1D,YAEAA,EAErB1zB,KAAK6uB,YAAYvb,WAAatT,KAAKyzB,YACnCzzB,KAAKqzB,oBACLrzB,KAAK8c,GAAG+B,gDAeV1f,OAAAyB,eAAImyB,EAAAnzB,UAAA,mBAAgB,KAApB,mBACMyvB,EAAM,sBACV,GAAIrvB,KAAK8U,OAAO6e,UACd,GAAqC,iBAA1B3zB,KAAK8U,OAAO6e,UACrBtE,GAAO,IAAMrvB,KAAK8U,OAAO6e,eACpB,GAAqC,mBAA1B3zB,KAAK8U,OAAO6e,UAA0B,CACtD,IAAMpE,EAAMvvB,KAAK8U,OAAO6e,UAAU,CAChCniB,IAAKxR,KAAKwR,IACVb,MAAO3Q,KAAK2Q,MACZmE,OAAQ9U,KAAK8U,OACbxT,MAAOtB,KAAKsB,MACZgP,UAAWtQ,KAAKsQ,YAGlB,GAAmB,iBAARif,EACTF,GAAO,IAAME,OACR,GAAmB,iBAARA,EAAkB,CAClC,IAAMC,EAAOrwB,OAAOqwB,KAAKD,OACzB,IAAgB,IAAAE,EAAAzuB,EAAAwuB,GAAIE,EAAAD,EAAApuB,QAAAquB,EAAAnuB,KAAAmuB,EAAAD,EAAApuB,OAAE,CAAjB,IAAMsuB,EAACD,EAAApuB,OACK,IAAXiuB,EAAII,KACNN,GAAO,IAAIM,uGAmBrB,OAbK3vB,KAAK8uB,UACRO,GAAO,gBAELrvB,KAAKgzB,YACP3D,GAAO,WAELrvB,KAAK8uB,UAAYlS,EAAAA,cAAciL,MACjCwH,GAAO,aAELrvB,KAAK8uB,UAAYlS,EAAAA,cAAcvc,OACjCgvB,GAAO,cAGFA,mCAITlwB,OAAAyB,eAAImyB,EAAAnzB,UAAA,QAAK,KAAT,WACE,OAAOI,KAAK8U,OAAO5S,uCAIrB/C,OAAAyB,eAAImyB,EAAAnzB,UAAA,WAAQ,KAAZ,WACE,OAAOI,KAAK8U,OAAOtL,0CAIrBrK,OAAAyB,eAAImyB,EAAAnzB,UAAA,WAAQ,KAAZ,WACE,OAAOI,KAAK8U,OAAOpL,0CAIrBvK,OAAAyB,eAAImyB,EAAAnzB,UAAA,SAAM,KAAV,WACE,IAAM2gB,EAASvgB,KAAKsQ,UACpB,OAAIuJ,MAAM0G,GACDA,EAEFA,EAAS,sCAuClBwS,EAAAnzB,UAAA8sB,UAAA,WACE1sB,KAAKqzB,qBAGPN,EAAAnzB,UAAA+E,YAAA,WACM3E,KAAKqW,cACPrW,KAAKqW,aAAaud,SAItBb,EAAAnzB,UAAAyzB,kBAAA,WACE,IAAI/xB,EAAQ,GAEZ,GAAKtB,KAAKwR,KAAQxR,KAAK8U,OAEhB,CACL,IAAMgE,EAAM9Y,KAAK8U,OAAOG,cAAcjV,KAAKwR,IAAKxR,KAAK8U,OAAOhJ,MACtD+nB,EAA0B7zB,KAAK8U,OAAOnN,KAExCksB,EACFvyB,EAAQuyB,EAAS3X,UAAUpD,QACR3Q,IAAV7G,IACTA,EAAQwX,QARVxX,EAAQ,GAYNtB,KAAKsB,QAAUA,IACjBtB,KAAKsB,MAAQA,EACbtB,KAAK6uB,YAAYvtB,MAAQA,EACzBtB,KAAK8zB,eAAiBxyB,MAAAA,EAAwCtB,KAAK+zB,UAAUzyB,GAASA,EACtFtB,KAAK8c,GAAG+B,iBAKZkU,EAAAnzB,UAAAo0B,QAAA,WACEh0B,KAAKgzB,WAAY,GAInBD,EAAAnzB,UAAAq0B,OAAA,WACEj0B,KAAKgzB,WAAY,GAInBD,EAAAnzB,UAAAs0B,QAAA,SAAQxtB,GACN1G,KAAKid,SAAShY,KAAK,CACjB2L,KAAM,QACNlK,MAAKA,EACL8K,IAAKxR,KAAKwR,IACVb,MAAO3Q,KAAK2Q,MACZL,UAAWtQ,KAAKsQ,UAChBwE,OAAQ9U,KAAK8U,OACbxT,MAAOtB,KAAKsB,MACZ6yB,YAAan0B,KAAK0xB,YAKtBqB,EAAAnzB,UAAAw0B,WAAA,SAAW1tB,GACT1G,KAAKid,SAAShY,KAAK,CACjB2L,KAAM,WACNlK,MAAKA,EACL8K,IAAKxR,KAAKwR,IACVb,MAAO3Q,KAAK2Q,MACZL,UAAWtQ,KAAKsQ,UAChBwE,OAAQ9U,KAAK8U,OACbxT,MAAOtB,KAAKsB,MACZ6yB,YAAan0B,KAAK0xB,YAKtBqB,EAAAnzB,UAAAsyB,UAAA,SAAUxrB,GACR,IAAMyrB,EAAUzrB,EAAMyrB,QAChBkC,EAAe3tB,EAAMvG,SAAWH,KAAK0xB,UAGzCS,IAAYnJ,EAAAA,KAAKqJ,QACjBF,IAAYnJ,EAAAA,KAAKsJ,MACjBH,IAAYnJ,EAAAA,KAAKuJ,IACjBJ,IAAYnJ,EAAAA,KAAKhhB,MACjBmqB,IAAYnJ,EAAAA,KAAKjd,QAEHsoB,IACd3tB,EAAMM,iBACNN,EAAM2C,kBAENrJ,KAAKid,SAAShY,KAAK,CACjB2L,KAAM,UACNlK,MAAKA,EACL8K,IAAKxR,KAAKwR,IACVb,MAAO3Q,KAAK2Q,MACZL,UAAWtQ,KAAKsQ,UAChBwE,OAAQ9U,KAAK8U,OACbxT,MAAOtB,KAAKsB,MACZ6yB,YAAan0B,KAAK0xB,aAKxBqB,EAAAnzB,UAAAszB,iBAAA,SAAiBxsB,GACf1G,KAAKid,SAAShY,KAAK,CACjB2L,KAAM,WACNlK,MAAKA,EACL8K,IAAKxR,KAAKwR,IACVb,MAAO3Q,KAAK2Q,MACZL,UAAWtQ,KAAKsQ,UAChBwE,OAAQ9U,KAAK8U,OACbxT,MAAOtB,KAAKsB,MACZ6yB,YAAan0B,KAAK0xB,SAClBpe,WAAY,eAIhByf,EAAAnzB,UAAAsvB,YAAA,SAAYtL,GAAZ,IAAA7e,EAAA/E,KACE,GAAK4jB,EAAL,CAIA,IAAM5B,EAAO4B,EAAMxZ,MAAK,SAAC9K,GACvB,OAAOA,EAAEwM,OAAS/G,EAAK+P,OAAOhJ,QAGhC,OAAIkW,EACKA,EAAK+B,SADd,IAKFgP,EAAAnzB,UAAAm0B,UAAA,SAAUO,GACR,OAAKA,EAAKxgB,QAGHwgB,EAAKxgB,QAAQ,kBAAmB,IAF9BwgB,GAKXvB,EAAAnzB,UAAAgiB,aAAA,WACE5hB,KAAKqd,WAAWpY,KAAKjF,KAAKwR,MAG5BuhB,EAAAnzB,UAAA20B,eAAA,SAAezf,EAAatD,GAC1B,IAAMgjB,EAAwC,MAA1B1f,EAAO2f,gBAA0B3f,EAAO2f,gBAAkB,GAC9E,OAAO3f,EAAOS,aAAe/D,EAAI6B,MAAQmhB,EAAc,4CAlJpChvB,EAAAA,kBAAwBqc,EAAAA,qBA/MpC5hB,EAAA,CAARmI,EAAAA,4CAEQnI,EAAA,CAARmI,EAAAA,mCAWQnI,EAAA,CAARmI,EAAAA,uCAWQnI,EAAA,CAARmI,EAAAA,wCAUQnI,EAAA,CAARmI,EAAAA,sCAUQnI,EAAA,CAARmI,EAAAA,sCAWQnI,EAAA,CAARmI,EAAAA,oCAWQnI,EAAA,CAARmI,EAAAA,iCAWQnI,EAAA,CAARmI,EAAAA,mCASQnI,EAAA,CAARmI,EAAAA,wCAeSnI,EAAA,CAAT0F,EAAAA,yCAES1F,EAAA,CAAT0F,EAAAA,2CAGD1F,EAAA,CADC6hB,EAAAA,UAAU,eAAgB,CAAE9Q,KAAM0jB,EAAAA,iBAAkBzjB,QAAQ,wCAI7DhR,EAAA,CADCyF,EAAAA,YAAY,+CA4CbzF,EAAA,CADCyF,EAAAA,YAAY,6CAMbzF,EAAA,CADCyF,EAAAA,YAAY,mDAMbzF,EAAA,CADCyF,EAAAA,YAAY,mDAMbzF,EAAA,CADCyF,EAAAA,YAAY,4CAgFbzF,EAAA,CADC2J,EAAAA,aAAa,sCAMd3J,EAAA,CADC2J,EAAAA,aAAa,oCAMd3J,EAAA,CADC2J,EAAAA,aAAa,QAAS,CAAC,wCAexB3J,EAAA,CADC2J,EAAAA,aAAa,WAAY,CAAC,2CAe3B3J,EAAA,CADC2J,EAAAA,aAAa,UAAW,CAAC,0CA5RfmpB,EAA0B9yB,EAAA,CA3CtC8P,EAAAA,UAAU,CACT5L,SAAU,sBACV8L,gBAAiBC,EAAAA,wBAAwBC,OACzCnM,SAAU,+gDAwCC+uB,eClEG4B,GAAW5X,EAAiBvL,EAAUojB,GACpD,IAAMC,EAAgBD,EAAUpjB,EAAKuL,GAQrC,OANI8X,GAAiB,EACnB9X,EAASmE,OAAO2T,EAAe,GAE/B9X,EAASnb,KAAK4P,GAGTuL,WAGO+X,GACd/X,EACA/K,EACAhG,EACAI,EACAwoB,GAIA,IAFA,IAAMG,EAAU/oB,EAAQI,EAEf7M,EAAI,EAAGA,EAAIyS,EAAKtS,OAAQH,IAAK,CACpC,IAAMiS,EAAMQ,EAAKzS,GAIby1B,EAAQ,CAAEC,MAAO,EAAGC,IAAK,GAE3BF,EADED,EACM,CACNE,MAAOjpB,EACPkpB,IAAK9oB,GAGC,CACN6oB,MAAO7oB,EACP8oB,IAAKlpB,EAAQ,IAIZ+oB,IAfUx1B,GAAK6M,GAAa7M,GAAKyM,KAeT+oB,IAhBbx1B,GAAK6M,GAAa7M,GAAKyM,KAmBjCzM,GAAKy1B,EAAMC,OAAS11B,GAAKy1B,EAAME,KACjCnY,EAASnb,KAAK4P,GAKpB,OAAOuL,oBC7BT,SAAAoY,IAQYn1B,KAAAid,SAA8B,IAAIzY,EAAAA,aAClCxE,KAAAkd,OAA4B,IAAI1Y,EAAAA,aA2H5C,OAvHE2wB,EAAAv1B,UAAAw1B,UAAA,SAAU1uB,EAAmCsF,EAAewF,SAC1D,GAAKxR,KAAKq1B,cAAV,CAEA,IAAMC,EAASt1B,KAAKue,gBAAkBrL,EAAAA,cAAcwY,SAC9CE,EAAQ5rB,KAAKue,gBAAkBrL,EAAAA,cAAc0Y,MAC7CC,EAAa7rB,KAAKue,gBAAkBrL,EAAAA,cAAc2Y,WACpD9O,EAAkB,GAIlBA,EAFA6O,GAAS0J,GAAUzJ,EACjBnlB,EAAM6uB,SACGT,GAAkB,GAAI90B,KAAKgS,KAAMhG,EAAOhM,KAAKoM,UAAWpM,KAAKw1B,kBAAkB/qB,KAAKzK,OACtF0G,EAAM+uB,SAAW/uB,EAAMgvB,SAAW7J,GAAcyJ,EAC9CX,GAAU7yB,EAAK9B,KAAK+c,UAAWvL,EAAKxR,KAAKw1B,kBAAkB/qB,KAAKzK,OAEhE20B,GAAW,GAAInjB,EAAKxR,KAAKw1B,kBAAkB/qB,KAAKzK,OAGlD20B,GAAW,GAAInjB,EAAKxR,KAAKw1B,kBAAkB/qB,KAAKzK,OAG7B,mBAArBA,KAAK21B,cACd5Y,EAAWA,EAAS2J,OAAO1mB,KAAK21B,YAAYlrB,KAAKzK,QAGnDA,KAAK+c,SAASmE,OAAO,EAAGlhB,KAAK+c,SAASrd,SACtCyF,EAAAnF,KAAK+c,UAASnb,KAAI7B,MAAAoF,EAAArD,EAAIib,IAEtB/c,KAAKoM,UAAYJ,EAEjBhM,KAAKkd,OAAOjY,KAAK,CACf8X,SAAQA,MAIZoY,EAAAv1B,UAAAmyB,WAAA,SAAWjrB,EAAckF,GACf,IAAA4E,EAAA9J,EAAA8J,KAAMlK,EAAAI,EAAAJ,MAAO8K,EAAA1K,EAAA0K,IACf8jB,EAASt1B,KAAKue,gBAAkBrL,EAAAA,cAAcwY,UACnC4J,IAAoB,UAAT1kB,GAA6B,aAATA,IAA0B0kB,GAAmB,aAAT1kB,EAGlF5Q,KAAKo1B,UAAU1uB,EAAOsF,EAAOwF,GACX,YAATZ,IACWlK,EAAOyrB,UAAYnJ,EAAAA,KAAKqJ,OAC1CryB,KAAKo1B,UAAU1uB,EAAOsF,EAAOwF,GAE7BxR,KAAK41B,gBAAgB9uB,IAGzB9G,KAAKid,SAAShY,KAAK6B,IAGrBquB,EAAAv1B,UAAAg2B,gBAAA,SAAgB9uB,GACN,IAAAqrB,EAAArrB,EAAAJ,MAAAyrB,QAGR,GAFoBA,IAAYnJ,EAAAA,KAAKuJ,IAAMJ,IAAYnJ,EAAAA,KAAKsJ,MAAQH,IAAYnJ,EAAAA,KAAKjd,OAASomB,IAAYnJ,EAAAA,KAAKhhB,KAE9F,CACf,IAAM6tB,EAAkB71B,KAAKue,gBAAkBrL,EAAAA,cAAcyY,KAExD7kB,EAAMqtB,aAAgB0B,EAEhBA,GACT71B,KAAK81B,UAAUhvB,EAAMqtB,YAAartB,EAAMmrB,WAAYE,EAASrrB,EAAMkrB,WAFnEhyB,KAAK+1B,SAASjvB,EAAMmrB,WAAYE,KAOtCgD,EAAAv1B,UAAAm2B,SAAA,SAAS9D,EAAiBE,GACxB,IAAM6D,EAAiBh2B,KAAKi2B,eAAehE,EAAYE,GACnD6D,GAAgBA,EAAeE,SAGrCf,EAAAv1B,UAAAq2B,eAAA,SAAehE,EAAiBE,GAC9B,IAAMjjB,EAAgB+iB,EAAW/iB,cAEjC,GAAIA,EAAe,CACjB,IAAIinB,OAAY,EAOhB,GANIhE,IAAYnJ,EAAAA,KAAKuJ,GACnB4D,EAAejnB,EAAcknB,uBACpBjE,IAAYnJ,EAAAA,KAAKsJ,OAC1B6D,EAAejnB,EAAcmnB,oBAG3BF,GAAgBA,EAAarjB,SAASpT,OACxC,OAAOy2B,EAAarjB,SAAS,KAKnCqiB,EAAAv1B,UAAAk2B,UAAA,SAAU3B,EAAkBlC,EAAiBE,EAAiBH,GAC5D,IAAIsE,EAEJ,GAAInE,IAAYnJ,EAAAA,KAAKhhB,KACnBsuB,EAAkBnC,EAAYiC,4BACzB,GAAIjE,IAAYnJ,EAAAA,KAAKjd,MAC1BuqB,EAAkBnC,EAAYkC,wBACzB,GAAIlE,IAAYnJ,EAAAA,KAAKuJ,IAAMJ,IAAYnJ,EAAAA,KAAKsJ,KAAM,CACvD,IAAM0D,EAAiBh2B,KAAKi2B,eAAehE,EAAYE,GACvD,GAAI6D,EAAgB,CAClB,IAAMljB,EAAWkjB,EAAeO,uBAAuB,uBACnDzjB,EAASpT,SAAQ42B,EAAkBxjB,EAASkf,KAIhDsE,GAAiBA,EAAgBJ,SAGvCf,EAAAv1B,UAAA42B,eAAA,SAAehlB,GACb,OAAOxR,KAAKw1B,kBAAkBhkB,EAAKxR,KAAK+c,WAAa,GAGvDoY,EAAAv1B,UAAA41B,kBAAA,SAAkBhkB,EAAUuL,GAA5B,IAAAhY,EAAA/E,KACE,IAAK+c,IAAaA,EAASrd,OAAQ,OAAQ,EAE3C,IAAM+hB,EAAQzhB,KAAK0hB,YAAYlQ,GAC/B,OAAOuL,EAAS4E,WAAU,SAAAnhB,GAExB,OADWuE,EAAK2c,YAAYlhB,KACdihB,MAhITxhB,EAAA,CAARmI,EAAAA,oCACQnI,EAAA,CAARmI,EAAAA,wCACQnI,EAAA,CAARmI,EAAAA,6CACQnI,EAAA,CAARmI,EAAAA,6CACQnI,EAAA,CAARmI,EAAAA,2CACQnI,EAAA,CAARmI,EAAAA,2CAESnI,EAAA,CAAT0F,EAAAA,yCACS1F,EAAA,CAAT0F,EAAAA,uCATUwvB,EAA2Bl1B,EAAA,CALvC8P,EAAAA,UAAU,CACT5L,SAAU,sBACVH,SAAU,8BACViM,gBAAiBC,EAAAA,wBAAwBC,UAE9BglB,MCTb,SAASsB,GAAeC,GACtB,IAAMC,EAAkBD,EAAMhQ,QAAO,SAAAiF,GAAQ,QAAEA,KAE/C,OAAKgL,EAAgBj3B,OAGjBi3B,EAAgBC,MAAK,SAAAjL,GAAQ,MAAgB,iBAATA,KAC/B,KAGFgL,EAAgB/pB,QAAO,SAAC2iB,EAAK5D,GAAS,OAAA4D,EAAM5D,KAN1C,KASX,SAASkL,GAAYH,GACnB,OAAO,SCxBGI,iBD8CZ,SAAAC,IASE/2B,KAAAwqB,WAAkB,GAyCpB,OAvCEuM,EAAAn3B,UAAAuG,YAAA,WACOnG,KAAK0U,SAAY1U,KAAKgS,OAG3BhS,KAAKg3B,wBACLh3B,KAAKi3B,iBAGCF,EAAAn3B,UAAAo3B,sBAAR,WACEh3B,KAAKurB,iBAAmBvrB,KAAK0U,QAAQoP,KAAI,SAAAhO,GAAO,OAAA5W,EAAAA,EAAA,GAC3C4W,GAAG,CACNO,aAAcP,EAAIS,sBAIdwgB,EAAAn3B,UAAAq3B,aAAR,WAAA,IAAAlyB,EAAA/E,KACEA,KAAKwqB,WAAa,GAElBxqB,KAAK0U,QACFgS,QAAO,SAAA5Q,GAAO,OAACA,EAAIS,mBACnB7L,SAAQ,SAAAoL,GACP,IAAMohB,EAAwBnyB,EAAKiN,KAAK8R,KAAI,SAAAtS,GAAO,OAAAA,EAAIsE,EAAIhK,SACrDqrB,EAAUpyB,EAAKqyB,mBAAmBthB,GAExC/Q,EAAKylB,WAAW1U,EAAIhK,MAAQgK,EAAInO,KAC5BmO,EAAInO,KAAKuU,UAAUib,EAAQD,IAC3BC,EAAQD,OAIVH,EAAAn3B,UAAAw3B,mBAAR,SAA2BtiB,GACzB,YAA2B3M,IAAvB2M,EAAOwB,YACFmgB,GACyB,OAAvB3hB,EAAOwB,YACTugB,GAEA/hB,EAAOwB,aA9CTrW,EAAA,CAARmI,EAAAA,oCACQnI,EAAA,CAARmI,EAAAA,uCAEQnI,EAAA,CAARmI,EAAAA,yCACQnI,EAAA,CAARmI,EAAAA,uCACQnI,EAAA,CAARmI,EAAAA,0CANU2uB,EAA4B92B,EAAA,CAnBxC8P,EAAAA,UAAU,CACT5L,SAAU,wBACVH,SAAU,qTAaV6F,KAAM,CACJmG,MAAO,4BAGE+mB,oBEoCb,SAAAM,WAWA,SAXaA,EAKJA,EAAAC,QAAP,SAAelO,GACb,MAAO,CACLmO,SAAUC,EACVC,UAAW,CAAC,CAAEC,QAAS,gBAAiBC,SAAUvO,MAR3CiO,EAAkBG,EAAAv3B,EAAA,CAhD9B23B,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,cACVL,UAAW,CAACz1B,EAAiBsB,EAAkBI,GAC/Cq0B,aAAc,CACZh0B,EACAK,EACAwB,EACAyC,EACA0B,EACAoD,EACAqB,EACAya,GACAtS,EACAoL,GACA2M,GACA7R,GACAqT,GACAE,GACAmB,GACAC,GACAiB,GACApb,EACAhH,EACA+G,EACA2b,GACAoC,GACA3e,EACAC,EACAC,EACAe,EACArH,EACA2mB,IAEFiB,QAAS,CACP/O,GACA5R,EACAhH,EACA+G,EACAT,EACAH,EACAC,EACAC,EACA3S,EACA0T,EACA2Y,GACAhgB,MAGSinB,eCtEG7qB,GAAkBtF,EAAWE,GAU3C,IATA,IAEIwK,EACArS,EACAe,EAJE23B,EAAW,GACXC,EAAwB,IAQtBtmB,EAAU3P,SAASk2B,iBAAiBjxB,EAAGE,MAAsC,IAA/B6wB,EAAS5mB,QAAQO,IAA8B,MAAXA,GAExFqmB,EAASr2B,KAAKgQ,GACdsmB,EAAsBt2B,KAAK,CACzBN,MAAOsQ,EAAQtP,MAAM81B,iBAAiB,kBACtCC,SAAUzmB,EAAQtP,MAAMg2B,oBAAoB,oBAI9C1mB,EAAQtP,MAAMi2B,YAAY,iBAAkB,OAAQ,aAItD,IAAKh5B,EAAI24B,EAAsBx4B,OAASY,EAAI43B,IAAwB34B,IAClE04B,EAAS14B,GAAG+C,MAAMi2B,YAAY,iBAAkBj4B,EAAEgB,MAAQhB,EAAEgB,MAAQ,GAAIhB,EAAE+3B,UAI5E,OAAOJ,GFxCGnB,GAAAA,EAAAA,YAAAA,EAAAA,UAAS,KACnB,OAAA,SACAA,GAAA,OAAA,SEFsB,oBAAb70B,UAA6BA,SAASuK,oBAC/CvK,SAASuK,kBAAoBA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\n@Injectable()\nexport class ScrollbarHelper {\n  width: number = this.getWidth();\n\n  constructor(@Inject(DOCUMENT) private document: any) {}\n\n  getWidth(): number {\n    const outer = this.document.createElement('div');\n    outer.style.visibility = 'hidden';\n    outer.style.width = '100px';\n    outer.style.msOverflowStyle = 'scrollbar';\n    this.document.body.appendChild(outer);\n\n    const widthNoScroll = outer.offsetWidth;\n    outer.style.overflow = 'scroll';\n\n    const inner = this.document.createElement('div');\n    inner.style.width = '100%';\n    outer.appendChild(inner);\n\n    const widthWithScroll = inner.offsetWidth;\n    outer.parentNode.removeChild(outer);\n\n    return widthNoScroll - widthWithScroll;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\n@Injectable()\nexport class DimensionsHelper {\n  getDimensions(element: Element): ClientRect {\n    return element.getBoundingClientRect();\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\n/**\n * service to make DatatableComponent aware of changes to\n * input bindings of DataTableColumnDirective\n */\n@Injectable()\nexport class ColumnChangesService {\n  private columnInputChanges = new Subject<undefined>();\n\n  get columnInputChanges$(): Observable<undefined> {\n    return this.columnInputChanges.asObservable();\n  }\n\n  onInputChange(): void {\n    this.columnInputChanges.next();\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-datatable-footer-template]' })\nexport class DataTableFooterTemplateDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, Output, EventEmitter, ElementRef, HostBinding, NgZone, OnInit, OnDestroy } from '@angular/core';\n\n/**\n * Visibility Observer Directive\n *\n * Usage:\n *\n * \t\t<div\n * \t\t\tvisibilityObserver\n * \t\t\t(visible)=\"onVisible($event)\">\n * \t\t</div>\n *\n */\n@Directive({ selector: '[visibilityObserver]' })\nexport class VisibilityDirective implements OnInit, OnDestroy {\n  @HostBinding('class.visible')\n  isVisible: boolean = false;\n\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n\n  constructor(private element: ElementRef, private zone: NgZone) {}\n\n  ngOnInit(): void {\n    this.runCheck();\n  }\n\n  ngOnDestroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 50);\n        });\n      }\n    };\n\n    this.timeout = setTimeout(() => check());\n  }\n}\n","import { Directive, ElementRef, Input, Output, EventEmitter, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Draggable Directive for Angular2\n *\n * Inspiration:\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\n *\n */\n@Directive({ selector: '[draggable]' })\nexport class DraggableDirective implements OnDestroy, OnChanges {\n  @Input() dragEventTarget: any;\n  @Input() dragModel: any;\n  @Input() dragX: boolean = true;\n  @Input() dragY: boolean = true;\n\n  @Output() dragStart: EventEmitter<any> = new EventEmitter();\n  @Output() dragging: EventEmitter<any> = new EventEmitter();\n  @Output() dragEnd: EventEmitter<any> = new EventEmitter();\n\n  element: HTMLElement;\n  isDragging: boolean = false;\n  subscription: Subscription;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n      this.onMousedown(changes['dragEventTarget'].currentValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._destroySubscription();\n  }\n\n  onMouseup(event: MouseEvent): void {\n    if (!this.isDragging) return;\n\n    this.isDragging = false;\n    this.element.classList.remove('dragging');\n\n    if (this.subscription) {\n      this._destroySubscription();\n      this.dragEnd.emit({\n        event,\n        element: this.element,\n        model: this.dragModel\n      });\n    }\n  }\n\n  onMousedown(event: MouseEvent): void {\n    // we only want to drag the inner header text\n    const isDragElm = (<HTMLElement>event.target).classList.contains('draggable');\n\n    if (isDragElm && (this.dragX || this.dragY)) {\n      event.preventDefault();\n      this.isDragging = true;\n\n      const mouseDownPos = { x: event.clientX, y: event.clientY };\n\n      const mouseup = fromEvent(document, 'mouseup');\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup(ev));\n\n      const mouseMoveSub = fromEvent(document, 'mousemove')\n        .pipe(takeUntil(mouseup))\n        .subscribe((ev: MouseEvent) => this.move(ev, mouseDownPos));\n\n      this.subscription.add(mouseMoveSub);\n\n      this.dragStart.emit({\n        event,\n        element: this.element,\n        model: this.dragModel\n      });\n    }\n  }\n\n  move(event: MouseEvent, mouseDownPos: { x: number; y: number }): void {\n    if (!this.isDragging) return;\n\n    const x = event.clientX - mouseDownPos.x;\n    const y = event.clientY - mouseDownPos.y;\n\n    if (this.dragX) this.element.style.left = `${x}px`;\n    if (this.dragY) this.element.style.top = `${y}px`;\n\n    this.element.classList.add('dragging');\n\n    this.dragging.emit({\n      event,\n      element: this.element,\n      model: this.dragModel\n    });\n  }\n\n  private _destroySubscription(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  HostListener,\n  Input,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  AfterViewInit,\n  Renderer2\n} from '@angular/core';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Directive({\n  selector: '[resizeable]',\n  host: {\n    '[class.resizeable]': 'resizeEnabled'\n  }\n})\nexport class ResizeableDirective implements OnDestroy, AfterViewInit {\n  @Input() resizeEnabled: boolean = true;\n  @Input() minWidth: number;\n  @Input() maxWidth: number;\n\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n\n  element: HTMLElement;\n  subscription: Subscription;\n  resizing: boolean = false;\n  private resizeHandle: HTMLElement;\n\n  constructor(element: ElementRef, private renderer: Renderer2) {\n    this.element = element.nativeElement;\n  }\n\n  ngAfterViewInit(): void {\n    const renderer2 = this.renderer;\n    this.resizeHandle = renderer2.createElement('span');\n    if (this.resizeEnabled) {\n      renderer2.addClass(this.resizeHandle, 'resize-handle');\n    } else {\n      renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\n    }\n    renderer2.appendChild(this.element, this.resizeHandle);\n  }\n\n  ngOnDestroy(): void {\n    this._destroySubscription();\n    if (this.renderer.destroyNode) {\n      this.renderer.destroyNode(this.resizeHandle);\n    } else if (this.resizeHandle) {\n      this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\n    }\n  }\n\n  onMouseup(): void {\n    this.resizing = false;\n\n    if (this.subscription && !this.subscription.closed) {\n      this._destroySubscription();\n      this.resize.emit(this.element.clientWidth);\n    }\n  }\n\n  @HostListener('mousedown', ['$event'])\n  onMousedown(event: MouseEvent): void {\n    const isHandle = (<HTMLElement>event.target).classList.contains('resize-handle');\n    const initialWidth = this.element.clientWidth;\n    const mouseDownScreenX = event.screenX;\n\n    if (isHandle) {\n      event.stopPropagation();\n      this.resizing = true;\n\n      const mouseup = fromEvent(document, 'mouseup');\n      this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\n\n      const mouseMoveSub = fromEvent(document, 'mousemove')\n        .pipe(takeUntil(mouseup))\n        .subscribe((e: MouseEvent) => this.move(e, initialWidth, mouseDownScreenX));\n\n      this.subscription.add(mouseMoveSub);\n    }\n  }\n\n  move(event: MouseEvent, initialWidth: number, mouseDownScreenX: number): void {\n    const movementX = event.screenX - mouseDownScreenX;\n    const newWidth = initialWidth + movementX;\n\n    const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n    const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n\n    if (overMinWidth && underMaxWidth) {\n      this.element.style.width = `${newWidth}px`;\n    }\n  }\n\n  private _destroySubscription() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n}\n","import {\n  Directive,\n  Output,\n  EventEmitter,\n  ContentChildren,\n  QueryList,\n  KeyValueDiffers,\n  AfterContentInit,\n  OnDestroy,\n  Inject\n} from '@angular/core';\nimport { DraggableDirective } from './draggable.directive';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({ selector: '[orderable]' })\nexport class OrderableDirective implements AfterContentInit, OnDestroy {\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n  @Output() targetChanged: EventEmitter<any> = new EventEmitter();\n\n  @ContentChildren(DraggableDirective, { descendants: true })\n  draggables: QueryList<DraggableDirective>;\n\n  positions: any;\n  differ: any;\n  lastDraggingIndex: number;\n\n  constructor(differs: KeyValueDiffers, @Inject(DOCUMENT) private document: any) {\n    this.differ = differs.find({}).create();\n  }\n\n  ngAfterContentInit(): void {\n    // HACK: Investigate Better Way\n    this.updateSubscriptions();\n    this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.draggables.forEach(d => {\n      d.dragStart.unsubscribe();\n      d.dragging.unsubscribe();\n      d.dragEnd.unsubscribe();\n    });\n  }\n\n  updateSubscriptions(): void {\n    const diffs = this.differ.diff(this.createMapDiffs());\n\n    if (diffs) {\n      const subscribe = ({ currentValue, previousValue }: any) => {\n        unsubscribe({ previousValue });\n\n        if (currentValue) {\n          currentValue.dragStart.subscribe(this.onDragStart.bind(this));\n          currentValue.dragging.subscribe(this.onDragging.bind(this));\n          currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\n        }\n      };\n\n      const unsubscribe = ({ previousValue }: any) => {\n        if (previousValue) {\n          previousValue.dragStart.unsubscribe();\n          previousValue.dragging.unsubscribe();\n          previousValue.dragEnd.unsubscribe();\n        }\n      };\n\n      diffs.forEachAddedItem(subscribe);\n      // diffs.forEachChangedItem(subscribe.bind(this));\n      diffs.forEachRemovedItem(unsubscribe);\n    }\n  }\n\n  onDragStart(): void {\n    this.positions = {};\n\n    let i = 0;\n    for (const dragger of this.draggables.toArray()) {\n      const elm = dragger.element;\n      const left = parseInt(elm.offsetLeft.toString(), 0);\n      this.positions[dragger.dragModel.prop] = {\n        left,\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\n        index: i++,\n        element: elm\n      };\n    }\n  }\n\n  onDragging({ element, model, event }: any): void {\n    const prevPos = this.positions[model.prop];\n    const target = this.isTarget(model, event);\n\n    if (target) {\n      if (this.lastDraggingIndex !== target.i) {\n        this.targetChanged.emit({\n          prevIndex: this.lastDraggingIndex,\n          newIndex: target.i,\n          initialIndex: prevPos.index\n        });\n        this.lastDraggingIndex = target.i;\n      }\n    } else if (this.lastDraggingIndex !== prevPos.index) {\n      this.targetChanged.emit({\n        prevIndex: this.lastDraggingIndex,\n        initialIndex: prevPos.index\n      });\n      this.lastDraggingIndex = prevPos.index;\n    }\n  }\n\n  onDragEnd({ element, model, event }: any): void {\n    const prevPos = this.positions[model.prop];\n\n    const target = this.isTarget(model, event);\n    if (target) {\n      this.reorder.emit({\n        prevIndex: prevPos.index,\n        newIndex: target.i,\n        model\n      });\n    }\n\n    this.lastDraggingIndex = undefined;\n    element.style.left = 'auto';\n  }\n\n  isTarget(model: any, event: any): any {\n    let i = 0;\n    const x = event.x || event.clientX;\n    const y = event.y || event.clientY;\n    const targets = this.document.elementsFromPoint(x, y);\n\n    for (const prop in this.positions) {\n      // current column position which throws event.\n      const pos = this.positions[prop];\n\n      // since we drag the inner span, we need to find it in the elements at the cursor\n      if (model.prop !== prop && targets.find((el: any) => el === pos.element)) {\n        return {\n          pos,\n          i\n        };\n      }\n\n      i++;\n    }\n  }\n\n  private createMapDiffs(): { [key: string]: DraggableDirective } {\n    return this.draggables.toArray().reduce((acc, curr) => {\n      acc[curr.dragModel.$$id] = curr;\n      return acc;\n    }, {});\n  }\n}\n","import { Directive, Input, Output, EventEmitter, HostBinding, HostListener, OnDestroy } from '@angular/core';\nimport { Observable, Subscription, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { MouseEvent } from '../events';\n\n@Directive({ selector: '[long-press]' })\nexport class LongPressDirective implements OnDestroy {\n  @Input() pressEnabled: boolean = true;\n  @Input() pressModel: any;\n  @Input() duration: number = 500;\n\n  @Output() longPressStart: EventEmitter<any> = new EventEmitter();\n  @Output() longPressing: EventEmitter<any> = new EventEmitter();\n  @Output() longPressEnd: EventEmitter<any> = new EventEmitter();\n\n  pressing: boolean;\n  isLongPressing: boolean;\n  timeout: any;\n  mouseX: number = 0;\n  mouseY: number = 0;\n\n  subscription: Subscription;\n\n  @HostBinding('class.press')\n  get press(): boolean {\n    return this.pressing;\n  }\n\n  @HostBinding('class.longpress')\n  get isLongPress(): boolean {\n    return this.isLongPressing;\n  }\n\n  @HostListener('mousedown', ['$event'])\n  onMouseDown(event: MouseEvent): void {\n    // don't do right/middle clicks\n    if (event.which !== 1 || !this.pressEnabled) return;\n\n    // don't start drag if its on resize handle\n    const target = <HTMLElement>event.target;\n    if (target.classList.contains('resize-handle')) return;\n\n    this.mouseX = event.clientX;\n    this.mouseY = event.clientY;\n\n    this.pressing = true;\n    this.isLongPressing = false;\n\n    const mouseup = fromEvent(document, 'mouseup');\n    this.subscription = mouseup.subscribe((ev: MouseEvent) => this.onMouseup());\n\n    this.timeout = setTimeout(() => {\n      this.isLongPressing = true;\n      this.longPressStart.emit({\n        event,\n        model: this.pressModel\n      });\n\n      this.subscription.add(\n        fromEvent(document, 'mousemove')\n          .pipe(takeUntil(mouseup))\n          .subscribe((mouseEvent: MouseEvent) => this.onMouseMove(mouseEvent))\n      );\n\n      this.loop(event);\n    }, this.duration);\n\n    this.loop(event);\n  }\n\n  onMouseMove(event: MouseEvent): void {\n    if (this.pressing && !this.isLongPressing) {\n      const xThres = Math.abs(event.clientX - this.mouseX) > 10;\n      const yThres = Math.abs(event.clientY - this.mouseY) > 10;\n\n      if (xThres || yThres) {\n        this.endPress();\n      }\n    }\n  }\n\n  loop(event: MouseEvent): void {\n    if (this.isLongPressing) {\n      this.timeout = setTimeout(() => {\n        this.longPressing.emit({\n          event,\n          model: this.pressModel\n        });\n        this.loop(event);\n      }, 50);\n    }\n  }\n\n  endPress(): void {\n    clearTimeout(this.timeout);\n    this.isLongPressing = false;\n    this.pressing = false;\n    this._destroySubscription();\n\n    this.longPressEnd.emit({\n      model: this.pressModel\n    });\n  }\n\n  onMouseup(): void {\n    this.endPress();\n  }\n\n  ngOnDestroy(): void {\n    this._destroySubscription();\n  }\n\n  private _destroySubscription(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  Output,\n  EventEmitter,\n  Renderer2,\n  NgZone,\n  OnInit,\n  OnDestroy,\n  HostBinding,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { MouseEvent } from '../../events';\n\n@Component({\n  selector: 'datatable-scroller',\n  template: ` <ng-content></ng-content> `,\n  host: {\n    class: 'datatable-scroll'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScrollerComponent implements OnInit, OnDestroy {\n  @Input() scrollbarV: boolean = false;\n  @Input() scrollbarH: boolean = false;\n\n  @HostBinding('style.height.px')\n  @Input()\n  scrollHeight: number;\n\n  @HostBinding('style.width.px')\n  @Input()\n  scrollWidth: number;\n\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n\n  scrollYPos: number = 0;\n  scrollXPos: number = 0;\n  prevScrollYPos: number = 0;\n  prevScrollXPos: number = 0;\n  element: any;\n  parentElement: any;\n  onScrollListener: any;\n\n  private _scrollEventListener: any = null;\n\n  constructor(private ngZone: NgZone, element: ElementRef, private renderer: Renderer2) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnInit(): void {\n    // manual bind so we don't always listen\n    if (this.scrollbarV || this.scrollbarH) {\n      const renderer = this.renderer;\n      this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\n      this._scrollEventListener = this.onScrolled.bind(this);\n      this.parentElement.addEventListener('scroll', this._scrollEventListener);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this._scrollEventListener) {\n      this.parentElement.removeEventListener('scroll', this._scrollEventListener);\n      this._scrollEventListener = null;\n    }\n  }\n\n  setOffset(offsetY: number): void {\n    if (this.parentElement) {\n      this.parentElement.scrollTop = offsetY;\n    }\n  }\n\n  onScrolled(event: MouseEvent): void {\n    const dom: Element = <Element>event.currentTarget;\n    requestAnimationFrame(() => {\n      this.scrollYPos = dom.scrollTop;\n      this.scrollXPos = dom.scrollLeft;\n      this.updateOffset();\n    });\n  }\n\n  updateOffset(): void {\n    let direction: string;\n    if (this.scrollYPos < this.prevScrollYPos) {\n      direction = 'down';\n    } else if (this.scrollYPos > this.prevScrollYPos) {\n      direction = 'up';\n    }\n\n    this.scroll.emit({\n      direction,\n      scrollYPos: this.scrollYPos,\n      scrollXPos: this.scrollXPos\n    });\n\n    this.prevScrollYPos = this.scrollYPos;\n    this.prevScrollXPos = this.scrollXPos;\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngx-datatable-group-header-template]'\n})\nexport class DatatableGroupHeaderTemplateDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\nimport { DatatableGroupHeaderTemplateDirective } from './body-group-header-template.directive';\n\n@Directive({ selector: 'ngx-datatable-group-header' })\nexport class DatatableGroupHeaderDirective {\n  /**\n   * Row height is required when virtual scroll is enabled.\n   */\n  @Input() rowHeight: number | ((group?: any, index?: number) => number) = 0;\n\n  @Input('template')\n  _templateInput: TemplateRef<any>;\n\n  @ContentChild(DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true })\n  _templateQuery: TemplateRef<any>;\n\n  get template(): TemplateRef<any> {\n    return this._templateInput || this._templateQuery;\n  }\n\n  /**\n   * Track toggling of group visibility\n   */\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Toggle the expansion of a group\n   */\n  toggleExpandGroup(group: any): void {\n    this.toggle.emit({\n      type: 'group',\n      value: group\n    });\n  }\n\n  /**\n   * Expand all groups\n   */\n  expandAllGroups(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: true\n    });\n  }\n\n  /**\n   * Collapse all groups\n   */\n  collapseAllGroups(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: false\n    });\n  }\n}\n","import { TableColumnProp } from '../types/table-column.type';\n\n// maybe rename this file to prop-getters.ts\n\nexport type ValueGetter = (obj: any, prop: TableColumnProp) => any;\n\n/**\n * Always returns the empty string ''\n */\nexport function emptyStringGetter(): string {\n  return '';\n}\n\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n */\nexport function getterForProp(prop: TableColumnProp): ValueGetter {\n  if (prop == null) {\n    return emptyStringGetter;\n  }\n\n  if (typeof prop === 'number') {\n    return numericIndexGetter;\n  } else {\n    // deep or simple\n    if (prop.indexOf('.') !== -1) {\n      return deepValueGetter;\n    } else {\n      return shallowValueGetter;\n    }\n  }\n}\n\n/**\n * Returns the value at this numeric index.\n * @param row array of values\n * @param index numeric index\n * @returns any or '' if invalid index\n */\nexport function numericIndexGetter(row: any[], index: number): any {\n  if (row == null) {\n    return '';\n  }\n  // mimic behavior of deepValueGetter\n  if (!row || index == null) {\n    return row;\n  }\n\n  const value = row[index];\n  if (value == null) {\n    return '';\n  }\n  return value;\n}\n\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param obj object containing the field\n * @param fieldName field name string\n */\nexport function shallowValueGetter(obj: any, fieldName: string): any {\n  if (obj == null) {\n    return '';\n  }\n  if (!obj || !fieldName) {\n    return obj;\n  }\n\n  const value = obj[fieldName];\n  if (value == null) {\n    return '';\n  }\n  return value;\n}\n\n/**\n * Returns a deep object given a string. zoo['animal.type']\n */\nexport function deepValueGetter(obj: any, path: string): any {\n  if (obj == null) {\n    return '';\n  }\n  if (!obj || !path) {\n    return obj;\n  }\n\n  // check if path matches a root-level field\n  // { \"a.b.c\": 123 }\n  let current = obj[path];\n  if (current !== undefined) {\n    return current;\n  }\n\n  current = obj;\n  const split = path.split('.');\n\n  if (split.length) {\n    for (let i = 0; i < split.length; i++) {\n      current = current[split[i]];\n\n      // if found undefined, return empty string\n      if (current === undefined || current === null) {\n        return '';\n      }\n    }\n  }\n\n  return current;\n}\n","import { getterForProp } from './column-prop-getters';\nimport { TableColumnProp } from '../types/table-column.type';\n\nexport type OptionalValueGetter = (row: any) => any | undefined;\nexport function optionalGetterForProp(prop: TableColumnProp): OptionalValueGetter {\n  return prop && (row => getterForProp(prop)(row, prop));\n}\n\n/**\n * This functions rearrange items by their parents\n * Also sets the level value to each of the items\n *\n * Note: Expecting each item has a property called parentId\n * Note: This algorithm will fail if a list has two or more items with same ID\n * NOTE: This algorithm will fail if there is a deadlock of relationship\n *\n * For example,\n *\n * Input\n *\n * id -> parent\n * 1  -> 0\n * 2  -> 0\n * 3  -> 1\n * 4  -> 1\n * 5  -> 2\n * 7  -> 8\n * 6  -> 3\n *\n *\n * Output\n * id -> level\n * 1      -> 0\n * --3    -> 1\n * ----6  -> 2\n * --4    -> 1\n * 2      -> 0\n * --5    -> 1\n * 7     -> 8\n *\n *\n * @param rows\n *\n */\nexport function groupRowsByParents(rows: any[], from?: OptionalValueGetter, to?: OptionalValueGetter): any[] {\n  if (from && to) {\n    const nodeById = {};\n    const l = rows.length;\n    let node: TreeNode | null = null;\n\n    nodeById[0] = new TreeNode(); // that's the root node\n\n    const uniqIDs = rows.reduce((arr, item) => {\n      const toValue = to(item);\n      if (arr.indexOf(toValue) === -1) {\n        arr.push(toValue);\n      }\n      return arr;\n    }, []);\n\n    for (let i = 0; i < l; i++) {\n      // make TreeNode objects for each item\n      nodeById[to(rows[i])] = new TreeNode(rows[i]);\n    }\n\n    for (let i = 0; i < l; i++) {\n      // link all TreeNode objects\n      node = nodeById[to(rows[i])];\n      let parent = 0;\n      const fromValue = from(node.row);\n      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\n        parent = fromValue;\n      }\n      node.parent = nodeById[parent];\n      node.row['level'] = node.parent.row['level'] + 1;\n      node.parent.children.push(node);\n    }\n\n    let resolvedRows: any[] = [];\n    nodeById[0].flatten(function () {\n      resolvedRows = [...resolvedRows, this.row];\n    }, true);\n\n    return resolvedRows;\n  } else {\n    return rows;\n  }\n}\n\nclass TreeNode {\n  public row: any;\n  public parent: any;\n  public children: any[];\n\n  constructor(row: any | null = null) {\n    if (!row) {\n      row = {\n        level: -1,\n        treeStatus: 'expanded'\n      };\n    }\n    this.row = row;\n    this.parent = null;\n    this.children = [];\n  }\n\n  flatten(f: any, recursive: boolean) {\n    if (this.row['treeStatus'] === 'expanded') {\n      for (let i = 0, l = this.children.length; i < l; i++) {\n        const child = this.children[i];\n        f.apply(child, Array.prototype.slice.call(arguments, 2));\n        if (recursive) child.flatten.apply(child, arguments);\n      }\n    }\n  }\n}\n","export enum ColumnMode {\n  standard = 'standard',\n  flex = 'flex',\n  force = 'force'\n}\n","export enum SelectionType {\n  single = 'single',\n  multi = 'multi',\n  multiClick = 'multiClick',\n  cell = 'cell',\n  checkbox = 'checkbox'\n}\n","export enum SortType {\n  single = 'single',\n  multi = 'multi'\n}\n","export enum ContextmenuType {\n  header = 'header',\n  body = 'body'\n}\n","/**\n * Converts strings from something to camel case\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\n */\nexport function camelCase(str: string): string {\n  // Replace special characters with a space\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\n  // put a space before an uppercase letter\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n\n  // Lower case first character and some other stuff\n  str = str\n    .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\n    .trim()\n    .toLowerCase();\n\n  // uppercase characters preceded by a space or number\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\n    return b.trim() + c.toUpperCase();\n  });\n\n  return str;\n}\n\n/**\n * Converts strings from camel case to words\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\n */\nexport function deCamelCase(str: string): string {\n  return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\n}\n","/**\n * Creates a unique object id.\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n */\nexport function id() {\n  return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n}\n","import { camelCase, deCamelCase } from './camel-case';\nimport { id } from './id';\nimport { getterForProp } from './column-prop-getters';\nimport { TableColumn } from '../types/table-column.type';\nimport { DataTableColumnDirective } from '../components/columns/column.directive';\n\n/**\n * Sets the column defaults\n */\nexport function setColumnDefaults(columns: TableColumn[]) {\n  if (!columns) return;\n\n  // Only one column should hold the tree view\n  // Thus if multiple columns are provided with\n  // isTreeColumn as true we take only the first one\n  let treeColumnFound: boolean = false;\n\n  for (const column of columns) {\n    if (!column.$$id) {\n      column.$$id = id();\n    }\n\n    // prop can be numeric; zero is valid not a missing prop\n    // translate name => prop\n    if (isNullOrUndefined(column.prop) && column.name) {\n      column.prop = camelCase(column.name);\n    }\n\n    if (!column.$$valueGetter) {\n      column.$$valueGetter = getterForProp(column.prop);\n    }\n\n    // format props if no name passed\n    if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n      column.name = deCamelCase(String(column.prop));\n    }\n\n    if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n      column.name = ''; // Fixes IE and Edge displaying `null`\n    }\n\n    if (!column.hasOwnProperty('resizeable')) {\n      column.resizeable = true;\n    }\n\n    if (!column.hasOwnProperty('sortable')) {\n      column.sortable = true;\n    }\n\n    if (!column.hasOwnProperty('draggable')) {\n      column.draggable = true;\n    }\n\n    if (!column.hasOwnProperty('canAutoResize')) {\n      column.canAutoResize = true;\n    }\n\n    if (!column.hasOwnProperty('width')) {\n      column.width = 150;\n    }\n\n    if (!column.hasOwnProperty('isTreeColumn')) {\n      column.isTreeColumn = false;\n    } else {\n      if (column.isTreeColumn && !treeColumnFound) {\n        // If the first column with isTreeColumn is true found\n        // we mark that treeCoulmn is found\n        treeColumnFound = true;\n      } else {\n        // After that isTreeColumn property for any other column\n        // will be set as false\n        column.isTreeColumn = false;\n      }\n    }\n  }\n}\n\nexport function isNullOrUndefined<T>(value: T | null | undefined): value is null | undefined {\n  return value === null || value === undefined;\n}\n\n/**\n * Translates templates definitions to objects\n */\nexport function translateTemplates(templates: DataTableColumnDirective[]): any[] {\n  const result: any[] = [];\n  for (const temp of templates) {\n    const col: any = {};\n\n    const props = Object.getOwnPropertyNames(temp);\n    for (const prop of props) {\n      col[prop] = temp[prop];\n    }\n\n    if (temp.headerTemplate) {\n      col.headerTemplate = temp.headerTemplate;\n    }\n\n    if (temp.cellTemplate) {\n      col.cellTemplate = temp.cellTemplate;\n    }\n\n    if (temp.summaryFunc) {\n      col.summaryFunc = temp.summaryFunc;\n    }\n\n    if (temp.summaryTemplate) {\n      col.summaryTemplate = temp.summaryTemplate;\n    }\n\n    result.push(col);\n  }\n\n  return result;\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-datatable-header-template]' })\nexport class DataTableColumnHeaderDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-datatable-cell-template]' })\nexport class DataTableColumnCellDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({ selector: '[ngx-datatable-tree-toggle]' })\nexport class DataTableColumnCellTreeToggle {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Directive, TemplateRef, ContentChild, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DataTableColumnHeaderDirective } from './column-header.directive';\nimport { DataTableColumnCellDirective } from './column-cell.directive';\nimport { DataTableColumnCellTreeToggle } from './tree.directive';\nimport { ColumnChangesService } from '../../services/column-changes.service';\nimport { TableColumnProp } from '../../types/table-column.type';\n\n@Directive({ selector: 'ngx-datatable-column' })\nexport class DataTableColumnDirective implements OnChanges {\n  @Input() name: string;\n  @Input() prop: TableColumnProp;\n  @Input() frozenLeft: any;\n  @Input() frozenRight: any;\n  @Input() flexGrow: number;\n  @Input() resizeable: boolean;\n  @Input() comparator: any;\n  @Input() pipe: any;\n  @Input() sortable: boolean;\n  @Input() draggable: boolean;\n  @Input() canAutoResize: boolean;\n  @Input() minWidth: number;\n  @Input() width: number;\n  @Input() maxWidth: number;\n  @Input() checkboxable: boolean;\n  @Input() headerCheckboxable: boolean;\n  @Input() headerClass: string | ((data: any) => string | any);\n  @Input() cellClass: string | ((data: any) => string | any);\n  @Input() isTreeColumn: boolean;\n  @Input() treeLevelIndent: number;\n  @Input() summaryFunc: (cells: any[]) => any;\n  @Input() summaryTemplate: TemplateRef<any>;\n\n  @Input('cellTemplate')\n  _cellTemplateInput: TemplateRef<any>;\n\n  @ContentChild(DataTableColumnCellDirective, { read: TemplateRef, static: true })\n  _cellTemplateQuery: TemplateRef<any>;\n\n  get cellTemplate(): TemplateRef<any> {\n    return this._cellTemplateInput || this._cellTemplateQuery;\n  }\n\n  @Input('headerTemplate')\n  _headerTemplateInput: TemplateRef<any>;\n\n  @ContentChild(DataTableColumnHeaderDirective, { read: TemplateRef, static: true })\n  _headerTemplateQuery: TemplateRef<any>;\n\n  get headerTemplate(): TemplateRef<any> {\n    return this._headerTemplateInput || this._headerTemplateQuery;\n  }\n\n  @Input('treeToggleTemplate')\n  _treeToggleTemplateInput: TemplateRef<any>;\n\n  @ContentChild(DataTableColumnCellTreeToggle, { read: TemplateRef, static: true })\n  _treeToggleTemplateQuery: TemplateRef<any>;\n\n  get treeToggleTemplate(): TemplateRef<any> {\n    return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\n  }\n\n  private isFirstChange = true;\n\n  constructor(private columnChangesService: ColumnChangesService) {}\n\n  ngOnChanges() {\n    if (this.isFirstChange) {\n      this.isFirstChange = false;\n    } else {\n      this.columnChangesService.onInputChange();\n    }\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngx-datatable-row-detail-template]'\n})\nexport class DatatableRowDetailTemplateDirective {\n  constructor(public template: TemplateRef<any>) {}\n}\n","import { Input, Output, EventEmitter, Directive, TemplateRef, ContentChild } from '@angular/core';\nimport { DatatableRowDetailTemplateDirective } from './row-detail-template.directive';\n\n@Directive({ selector: 'ngx-datatable-row-detail' })\nexport class DatatableRowDetailDirective {\n  /**\n   * The detail row height is required especially\n   * when virtual scroll is enabled.\n   */\n  @Input() rowHeight: number | ((row?: any, index?: number) => number) = 0;\n\n  @Input('template')\n  _templateInput: TemplateRef<any>;\n\n  @ContentChild(DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true })\n  _templateQuery: TemplateRef<any>;\n\n  get template(): TemplateRef<any> {\n    return this._templateInput || this._templateQuery;\n  }\n\n  /**\n   * Row detail row visbility was toggled.\n   */\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Toggle the expansion of the row\n   */\n  toggleExpandRow(row: any): void {\n    this.toggle.emit({\n      type: 'row',\n      value: row\n    });\n  }\n\n  /**\n   * API method to expand all the rows.\n   */\n  expandAllRows(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: true\n    });\n  }\n\n  /**\n   * API method to collapse all the rows.\n   */\n  collapseAllRows(): void {\n    this.toggle.emit({\n      type: 'all',\n      value: false\n    });\n  }\n}\n","import { Input, Directive, TemplateRef, ContentChild } from '@angular/core';\nimport { DataTableFooterTemplateDirective } from './footer-template.directive';\n\n@Directive({ selector: 'ngx-datatable-footer' })\nexport class DatatableFooterDirective {\n  @Input() footerHeight: number;\n  @Input() totalMessage: string;\n  @Input() selectedMessage: string | boolean;\n  @Input() pagerLeftArrowIcon: string;\n  @Input() pagerRightArrowIcon: string;\n  @Input() pagerPreviousIcon: string;\n  @Input() pagerNextIcon: string;\n\n  @Input('template')\n  _templateInput: TemplateRef<any>;\n\n  @ContentChild(DataTableFooterTemplateDirective, { read: TemplateRef })\n  _templateQuery: TemplateRef<any>;\n\n  get template(): TemplateRef<any> {\n    return this._templateInput || this._templateQuery;\n  }\n}\n","/**\n * Returns the columns by pin.\n */\nexport function columnsByPin(cols: any[]) {\n  const ret: { left: any; center: any; right: any } = {\n    left: [],\n    center: [],\n    right: []\n  };\n\n  if (cols) {\n    for (const col of cols) {\n      if (col.frozenLeft) {\n        ret.left.push(col);\n      } else if (col.frozenRight) {\n        ret.right.push(col);\n      } else {\n        ret.center.push(col);\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Returns the widths of all group sets of a column\n */\nexport function columnGroupWidths(groups: any, all: any) {\n  return {\n    left: columnTotalWidth(groups.left),\n    center: columnTotalWidth(groups.center),\n    right: columnTotalWidth(groups.right),\n    total: Math.floor(columnTotalWidth(all))\n  };\n}\n\n/**\n * Calculates the total width of all columns and their groups\n */\nexport function columnTotalWidth(columns: any[], prop?: string) {\n  let totalWidth = 0;\n\n  if (columns) {\n    for (const c of columns) {\n      const has = prop && c[prop];\n      const width = has ? c[prop] : c.width;\n      totalWidth = totalWidth + parseFloat(width);\n    }\n  }\n\n  return totalWidth;\n}\n\n/**\n * Calculates the total width of all columns and their groups\n */\nexport function columnsTotalWidth(columns: any, prop?: any) {\n  let totalWidth = 0;\n\n  for (const column of columns) {\n    const has = prop && column[prop];\n    totalWidth = totalWidth + (has ? column[prop] : column.width);\n  }\n\n  return totalWidth;\n}\n\nexport function columnsByPinArr(val: any) {\n  const colsByPinArr = [];\n  const colsByPin = columnsByPin(val);\n\n  colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n  colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n  colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n\n  return colsByPinArr;\n}\n","/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\nexport class RowHeightCache {\n  /**\n   * Tree Array stores the cumulative information of the row heights to perform efficient\n   * range queries and updates.  Currently the tree is initialized to the base row\n   * height instead of the detail row height.\n   */\n  private treeArray: number[] = [];\n\n  /**\n   * Clear the Tree array.\n   */\n  clearCache(): void {\n    this.treeArray = [];\n  }\n\n  /**\n   * Initialize the Fenwick tree with row Heights.\n   *\n   * @param rows The array of rows which contain the expanded status.\n   * @param rowHeight The row height.\n   * @param detailRowHeight The detail row height.\n   */\n  initCache(details: any): void {\n    const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\n    const isFn = typeof rowHeight === 'function';\n    const isDetailFn = typeof detailRowHeight === 'function';\n\n    if (!isFn && isNaN(rowHeight)) {\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n    }\n\n    // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n    if (!isDetailFn && isNaN(detailRowHeight)) {\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n    }\n\n    const n = externalVirtual ? rowCount : rows.length;\n    this.treeArray = new Array(n);\n\n    for (let i = 0; i < n; ++i) {\n      this.treeArray[i] = 0;\n    }\n\n    for (let i = 0; i < n; ++i) {\n      const row = rows[i];\n      let currentRowHeight = rowHeight;\n      if (isFn) {\n        currentRowHeight = rowHeight(row);\n      }\n\n      // Add the detail row height to the already expanded rows.\n      // This is useful for the table that goes through a filter or sort.\n      const expanded = rowExpansions.has(row);\n      if (row && expanded) {\n        if (isDetailFn) {\n          const index = rowIndexes.get(row);\n          currentRowHeight += detailRowHeight(row, index);\n        } else {\n          currentRowHeight += detailRowHeight;\n        }\n      }\n\n      this.update(i, currentRowHeight);\n    }\n  }\n\n  /**\n   * Given the ScrollY position i.e. sum, provide the rowIndex\n   * that is present in the current view port.  Below handles edge cases.\n   */\n  getRowIndex(scrollY: number): number {\n    if (scrollY === 0) return 0;\n    return this.calcRowIndex(scrollY);\n  }\n\n  /**\n   * When a row is expanded or rowHeight is changed, update the height.  This can\n   * be utilized in future when Angular Data table supports dynamic row heights.\n   */\n  update(atRowIndex: number, byRowHeight: number): void {\n    if (!this.treeArray.length) {\n      throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n    }\n\n    const n = this.treeArray.length;\n    atRowIndex |= 0;\n\n    while (atRowIndex < n) {\n      this.treeArray[atRowIndex] += byRowHeight;\n      atRowIndex |= atRowIndex + 1;\n    }\n  }\n\n  /**\n   * Range Sum query from 1 to the rowIndex\n   */\n  query(atIndex: number): number {\n    if (!this.treeArray.length) {\n      throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n    }\n\n    let sum = 0;\n    atIndex |= 0;\n\n    while (atIndex >= 0) {\n      sum += this.treeArray[atIndex];\n      atIndex = (atIndex & (atIndex + 1)) - 1;\n    }\n\n    return sum;\n  }\n\n  /**\n   * Find the total height between 2 row indexes\n   */\n  queryBetween(atIndexA: number, atIndexB: number): number {\n    return this.query(atIndexB) - this.query(atIndexA - 1);\n  }\n\n  /**\n   * Given the ScrollY position i.e. sum, provide the rowIndex\n   * that is present in the current view port.\n   */\n  private calcRowIndex(sum: number): number {\n    if (!this.treeArray.length) return 0;\n\n    let pos = -1;\n    const dataLength = this.treeArray.length;\n\n    // Get the highest bit for the block size.\n    const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n\n    for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n      const nextPos = pos + blockSize;\n      if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n        sum -= this.treeArray[nextPos];\n        pos = nextPos;\n      }\n    }\n\n    return pos + 1;\n  }\n}\n","import { camelCase } from './camel-case';\n\nconst cache = {};\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\n\n// Get Prefix\n// http://davidwalsh.name/vendor-prefix\nconst prefix = (function () {\n  const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\n  const match =\n    typeof styles !== 'undefined'\n      ? Array.prototype.slice\n          .call(styles)\n          .join('')\n          .match(/-(moz|webkit|ms)-/)\n      : null;\n  const pre = match !== null ? match[1] : undefined;\n  // tslint:disable-next-line: tsr-detect-non-literal-regexp\n  const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\n\n  return dom\n    ? {\n        dom,\n        lowercase: pre,\n        css: `-${pre}-`,\n        js: pre[0].toUpperCase() + pre.substr(1)\n      }\n    : undefined;\n})();\n\nexport function getVendorPrefixedName(property: string) {\n  const name = camelCase(property);\n\n  if (!cache[name]) {\n    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\n      cache[name] = prefix.css + property;\n    } else if (testStyle[property] !== undefined) {\n      cache[name] = property;\n    }\n  }\n\n  return cache[name];\n}\n","import { getVendorPrefixedName } from './prefixes';\nimport { camelCase } from './camel-case';\n\n// browser detection and prefixing tools\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\n\nexport function translateXY(styles: any, x: number, y: number) {\n  if (typeof transform !== 'undefined' && hasCSSTransforms) {\n    if (!isSafari && hasCSS3DTransforms) {\n      styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\n      styles[backfaceVisibility] = 'hidden';\n    } else {\n      styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\n    }\n  } else {\n    styles.top = `${y}px`;\n    styles.left = `${x}px`;\n  }\n}\n","export enum SortDirection {\n  asc = 'asc',\n  desc = 'desc'\n}\n","import {\n  Component,\n  Output,\n  EventEmitter,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n  ViewChild,\n  OnInit,\n  OnDestroy,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { ScrollerComponent } from './scroller.component';\nimport { SelectionType } from '../../types/selection.type';\nimport { columnsByPin, columnGroupWidths } from '../../utils/column';\nimport { RowHeightCache } from '../../utils/row-height-cache';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-body',\n  template: `\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group && group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group && group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    class: 'datatable-body'\n  }\n})\nexport class DataTableBodyComponent implements OnInit, OnDestroy {\n  @Input() scrollbarV: boolean;\n  @Input() scrollbarH: boolean;\n  @Input() loadingIndicator: boolean;\n  @Input() externalPaging: boolean;\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number);\n  @Input() offsetX: number;\n  @Input() emptyMessage: string;\n  @Input() selectionType: SelectionType;\n  @Input() selected: any[] = [];\n  @Input() rowIdentity: any;\n  @Input() rowDetail: any;\n  @Input() groupHeader: any;\n  @Input() selectCheck: any;\n  @Input() displayCheck: any;\n  @Input() trackByProp: string;\n  @Input() rowClass: any;\n  @Input() groupedRows: any;\n  @Input() groupExpansionDefault: boolean;\n  @Input() innerWidth: number;\n  @Input() groupRowsBy: string;\n  @Input() virtualization: boolean;\n  @Input() summaryRow: boolean;\n  @Input() summaryPosition: string;\n  @Input() summaryHeight: number;\n\n  @Input() set pageSize(val: number) {\n    this._pageSize = val;\n    this.recalcLayout();\n  }\n\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  @Input() set rows(val: any[]) {\n    this._rows = val;\n    this.recalcLayout();\n  }\n\n  get rows(): any[] {\n    return this._rows;\n  }\n\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n    const colsByPin = columnsByPin(val);\n    this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input() set offset(val: number) {\n    this._offset = val;\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) this.recalcLayout();\n  }\n\n  get offset(): number {\n    return this._offset;\n  }\n\n  @Input() set rowCount(val: number) {\n    this._rowCount = val;\n    this.recalcLayout();\n  }\n\n  get rowCount(): number {\n    return this._rowCount;\n  }\n\n  @HostBinding('style.width')\n  get bodyWidth(): string {\n    if (this.scrollbarH) {\n      return this.innerWidth + 'px';\n    } else {\n      return '100%';\n    }\n  }\n\n  @Input()\n  @HostBinding('style.height')\n  set bodyHeight(val) {\n    if (this.scrollbarV) {\n      this._bodyHeight = val + 'px';\n    } else {\n      this._bodyHeight = 'auto';\n    }\n\n    this.recalcLayout();\n  }\n\n  get bodyHeight() {\n    return this._bodyHeight;\n  }\n\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n  @Output() page: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() detailToggle: EventEmitter<any> = new EventEmitter();\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild(ScrollerComponent) scroller: ScrollerComponent;\n\n  /**\n   * Returns if selection is enabled.\n   */\n  get selectEnabled(): boolean {\n    return !!this.selectionType;\n  }\n\n  /**\n   * Property that would calculate the height of scroll bar\n   * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n   * calculate scroll height automatically (as height will be undefined).\n   */\n  get scrollHeight(): number | undefined {\n    if (this.scrollbarV && this.virtualization && this.rowCount) {\n      return this.rowHeightsCache.query(this.rowCount - 1);\n    }\n    // avoid TS7030: Not all code paths return a value.\n    return undefined;\n  }\n\n  rowHeightsCache: RowHeightCache = new RowHeightCache();\n  temp: any[] = [];\n  offsetY = 0;\n  indexes: any = {};\n  columnGroupWidths: any;\n  columnGroupWidthsWithoutGroup: any;\n  rowTrackingFn: any;\n  listener: any;\n  rowIndexes: any = new WeakMap<any, string>();\n  rowExpansions: any[] = [];\n\n  _rows: any[];\n  _bodyHeight: any;\n  _columns: any[];\n  _rowCount: number;\n  _offset: number;\n  _pageSize: number;\n\n  /**\n   * Creates an instance of DataTableBodyComponent.\n   */\n  constructor(private cd: ChangeDetectorRef) {\n    // declare fn here so we can get access to the `this` property\n    this.rowTrackingFn = (index: number, row: any): any => {\n      const idx = this.getRowIndex(row);\n      if (this.trackByProp) {\n        return row[this.trackByProp];\n      } else {\n        return idx;\n      }\n    };\n  }\n\n  /**\n   * Called after the constructor, initializing input properties\n   */\n  ngOnInit(): void {\n    if (this.rowDetail) {\n      this.listener = this.rowDetail.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\n        if (type === 'row') {\n          this.toggleRowExpansion(value);\n        }\n        if (type === 'all') {\n          this.toggleAllRows(value);\n        }\n\n        // Refresh rows after toggle\n        // Fixes #883\n        this.updateIndexes();\n        this.updateRows();\n        this.cd.markForCheck();\n      });\n    }\n\n    if (this.groupHeader) {\n      this.listener = this.groupHeader.toggle.subscribe(({ type, value }: { type: string; value: any }) => {\n        if (type === 'group') {\n          this.toggleRowExpansion(value);\n        }\n        if (type === 'all') {\n          this.toggleAllRows(value);\n        }\n\n        // Refresh rows after toggle\n        // Fixes #883\n        this.updateIndexes();\n        this.updateRows();\n        this.cd.markForCheck();\n      });\n    }\n  }\n\n  /**\n   * Called once, before the instance is destroyed.\n   */\n  ngOnDestroy(): void {\n    if (this.rowDetail || this.groupHeader) {\n      this.listener.unsubscribe();\n    }\n  }\n\n  /**\n   * Updates the Y offset given a new offset.\n   */\n  updateOffsetY(offset?: number): void {\n    // scroller is missing on empty table\n    if (!this.scroller) {\n      return;\n    }\n\n    if (this.scrollbarV && this.virtualization && offset) {\n      // First get the row Index that we need to move to.\n      const rowIndex = this.pageSize * offset;\n      offset = this.rowHeightsCache.query(rowIndex - 1);\n    } else if (this.scrollbarV && !this.virtualization) {\n      offset = 0;\n    }\n\n    this.scroller.setOffset(offset || 0);\n  }\n\n  /**\n   * Body was scrolled, this is mainly useful for\n   * when a user is server-side pagination via virtual scroll.\n   */\n  onBodyScroll(event: any): void {\n    const scrollYPos: number = event.scrollYPos;\n    const scrollXPos: number = event.scrollXPos;\n\n    // if scroll change, trigger update\n    // this is mainly used for header cell positions\n    if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n      this.scroll.emit({\n        offsetY: scrollYPos,\n        offsetX: scrollXPos\n      });\n    }\n\n    this.offsetY = scrollYPos;\n    this.offsetX = scrollXPos;\n\n    this.updateIndexes();\n    this.updatePage(event.direction);\n    this.updateRows();\n  }\n\n  /**\n   * Updates the page given a direction.\n   */\n  updatePage(direction: string): void {\n    let offset = this.indexes.first / this.pageSize;\n\n    if (direction === 'up') {\n      offset = Math.ceil(offset);\n    } else if (direction === 'down') {\n      offset = Math.floor(offset);\n    }\n\n    if (direction !== undefined && !isNaN(offset)) {\n      this.page.emit({ offset });\n    }\n  }\n\n  /**\n   * Updates the rows in the view port\n   */\n  updateRows(): void {\n    const { first, last } = this.indexes;\n    let rowIndex = first;\n    let idx = 0;\n    const temp: any[] = [];\n\n    // if grouprowsby has been specified treat row paging\n    // parameters as group paging parameters ie if limit 10 has been\n    // specified treat it as 10 groups rather than 10 rows\n    if (this.groupedRows) {\n      let maxRowsPerGroup = 3;\n      // if there is only one group set the maximum number of\n      // rows per group the same as the total number of rows\n      if (this.groupedRows.length === 1) {\n        maxRowsPerGroup = this.groupedRows[0].value.length;\n      }\n\n      while (rowIndex < last && rowIndex < this.groupedRows.length) {\n        // Add the groups into this page\n        const group = this.groupedRows[rowIndex];\n        this.rowIndexes.set(group, rowIndex);\n\n        if (group.value) {\n          // add indexes for each group item\n          group.value.forEach((g: any, i: number) => {\n            const _idx = `${rowIndex}-${i}`;\n            this.rowIndexes.set(g, _idx);\n          });\n        }\n        temp[idx] = group;\n        idx++;\n\n        // Group index in this context\n        rowIndex++;\n      }\n    } else {\n      while (rowIndex < last && rowIndex < this.rowCount) {\n        const row = this.rows[rowIndex];\n\n        if (row) {\n          // add indexes for each row\n          this.rowIndexes.set(row, rowIndex);\n          temp[idx] = row;\n        }\n\n        idx++;\n        rowIndex++;\n      }\n    }\n\n    this.temp = temp;\n  }\n\n  /**\n   * Get the row height\n   */\n  getRowHeight(row: any): number {\n    // if its a function return it\n    if (typeof this.rowHeight === 'function') {\n      return this.rowHeight(row);\n    }\n\n    return this.rowHeight as number;\n  }\n\n  /**\n   * @param group the group with all rows\n   */\n  getGroupHeight(group: any): number {\n    let rowHeight = 0;\n\n    if (group.value) {\n      for (let index = 0; index < group.value.length; index++) {\n        rowHeight += this.getRowAndDetailHeight(group.value[index]);\n      }\n    }\n\n    return rowHeight;\n  }\n\n  /**\n   * Calculate row height based on the expanded state of the row.\n   */\n  getRowAndDetailHeight(row: any): number {\n    let rowHeight = this.getRowHeight(row);\n    const expanded = this.getRowExpanded(row);\n\n    // Adding detail row height if its expanded.\n    if (expanded) {\n      rowHeight += this.getDetailRowHeight(row);\n    }\n\n    return rowHeight;\n  }\n\n  /**\n   * Get the height of the detail row.\n   */\n  getDetailRowHeight = (row?: any, index?: any): number => {\n    if (!this.rowDetail) {\n      return 0;\n    }\n    const rowHeight = this.rowDetail.rowHeight;\n    return typeof rowHeight === 'function' ? rowHeight(row, index) : (rowHeight as number);\n  };\n\n  /**\n   * Calculates the styles for the row so that the rows can be moved in 2D space\n   * during virtual scroll inside the DOM.   In the below case the Y position is\n   * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n   * 100 px then following styles are generated:\n   *\n   * transform: translate3d(0px, 0px, 0px);    ->  row0\n   * transform: translate3d(0px, 30px, 0px);   ->  row1\n   * transform: translate3d(0px, 130px, 0px);  ->  row2\n   *\n   * Row heights have to be calculated based on the row heights cache as we wont\n   * be able to determine which row is of what height before hand.  In the above\n   * case the positionY of the translate3d for row2 would be the sum of all the\n   * heights of the rows before it (i.e. row0 and row1).\n   *\n   * @param rows the row that needs to be placed in the 2D space.\n   * @returns the CSS3 style to be applied\n   *\n   * @memberOf DataTableBodyComponent\n   */\n  getRowsStyles(rows: any): any {\n    const styles: any = {};\n\n    // only add styles for the group if there is a group\n    if (this.groupedRows) {\n      styles.width = this.columnGroupWidths.total;\n    }\n\n    if (this.scrollbarV && this.virtualization) {\n      let idx = 0;\n\n      if (this.groupedRows) {\n        // Get the latest row rowindex in a group\n        const row = rows[rows.length - 1];\n        idx = row ? this.getRowIndex(row) : 0;\n      } else {\n        idx = this.getRowIndex(rows);\n      }\n\n      // const pos = idx * rowHeight;\n      // The position of this row would be the sum of all row heights\n      // until the previous row position.\n      const pos = this.rowHeightsCache.query(idx - 1);\n\n      translateXY(styles, 0, pos);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Calculate bottom summary row offset for scrollbar mode.\n   * For more information about cache and offset calculation\n   * see description for `getRowsStyles` method\n   *\n   * @returns the CSS3 style to be applied\n   *\n   * @memberOf DataTableBodyComponent\n   */\n  getBottomSummaryRowStyles(): any {\n    if (!this.scrollbarV || !this.rows || !this.rows.length) {\n      return null;\n    }\n\n    const styles = { position: 'absolute' };\n    const pos = this.rowHeightsCache.query(this.rows.length - 1);\n\n    translateXY(styles, 0, pos);\n\n    return styles;\n  }\n\n  /**\n   * Hides the loading indicator\n   */\n  hideIndicator(): void {\n    setTimeout(() => (this.loadingIndicator = false), 500);\n  }\n\n  /**\n   * Updates the index of the rows in the viewport\n   */\n  updateIndexes(): void {\n    let first = 0;\n    let last = 0;\n\n    if (this.scrollbarV) {\n      if (this.virtualization) {\n        // Calculation of the first and last indexes will be based on where the\n        // scrollY position would be at.  The last index would be the one\n        // that shows up inside the view port the last.\n        const height = parseInt(this.bodyHeight, 0);\n        first = this.rowHeightsCache.getRowIndex(this.offsetY);\n        last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n      } else {\n        // If virtual rows are not needed\n        // We render all in one go\n        first = 0;\n        last = this.rowCount;\n      }\n    } else {\n      // The server is handling paging and will pass an array that begins with the\n      // element at a specified offset.  first should always be 0 with external paging.\n      if (!this.externalPaging) {\n        first = Math.max(this.offset * this.pageSize, 0);\n      }\n      last = Math.min(first + this.pageSize, this.rowCount);\n    }\n\n    this.indexes = { first, last };\n  }\n\n  /**\n   * Refreshes the full Row Height cache.  Should be used\n   * when the entire row array state has changed.\n   */\n  refreshRowHeightCache(): void {\n    if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\n      return;\n    }\n\n    // clear the previous row height cache if already present.\n    // this is useful during sorts, filters where the state of the\n    // rows array is changed.\n    this.rowHeightsCache.clearCache();\n\n    // Initialize the tree only if there are rows inside the tree.\n    if (this.rows && this.rows.length) {\n      const rowExpansions = new Set();\n      for (const row of this.rows) {\n        if (this.getRowExpanded(row)) {\n          rowExpansions.add(row);\n        }\n      }\n\n      this.rowHeightsCache.initCache({\n        rows: this.rows,\n        rowHeight: this.rowHeight,\n        detailRowHeight: this.getDetailRowHeight,\n        externalVirtual: this.scrollbarV && this.externalPaging,\n        rowCount: this.rowCount,\n        rowIndexes: this.rowIndexes,\n        rowExpansions\n      });\n    }\n  }\n\n  /**\n   * Gets the index for the view port\n   */\n  getAdjustedViewPortIndex(): number {\n    // Capture the row index of the first row that is visible on the viewport.\n    // If the scroll bar is just below the row which is highlighted then make that as the\n    // first index.\n    const viewPortFirstRowIndex = this.indexes.first;\n\n    if (this.scrollbarV && this.virtualization) {\n      const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n      return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n    }\n\n    return viewPortFirstRowIndex;\n  }\n\n  /**\n   * Toggle the Expansion of the row i.e. if the row is expanded then it will\n   * collapse and vice versa.   Note that the expanded status is stored as\n   * a part of the row object itself as we have to preserve the expanded row\n   * status in case of sorting and filtering of the row set.\n   */\n  toggleRowExpansion(row: any): void {\n    // Capture the row index of the first row that is visible on the viewport.\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n    const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\n    const expanded = rowExpandedIdx > -1;\n\n    // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n    if (this.scrollbarV && this.virtualization) {\n      const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\n      // const idx = this.rowIndexes.get(row) || 0;\n      const idx = this.getRowIndex(row);\n      this.rowHeightsCache.update(idx, detailRowHeight);\n    }\n\n    // Update the toggled row and update thive nevere heights in the cache.\n    if (expanded) {\n      this.rowExpansions.splice(rowExpandedIdx, 1);\n    } else {\n      this.rowExpansions.push(row);\n    }\n\n    this.detailToggle.emit({\n      rows: [row],\n      currentIndex: viewPortFirstRowIndex\n    });\n  }\n\n  /**\n   * Expand/Collapse all the rows no matter what their state is.\n   */\n  toggleAllRows(expanded: boolean): void {\n    // clear prev expansions\n    this.rowExpansions = [];\n\n    // Capture the row index of the first row that is visible on the viewport.\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n\n    if (expanded) {\n      for (const row of this.rows) {\n        this.rowExpansions.push(row);\n      }\n    }\n\n    if (this.scrollbarV) {\n      // Refresh the full row heights cache since every row was affected.\n      this.recalcLayout();\n    }\n\n    // Emit all rows that have been expanded.\n    this.detailToggle.emit({\n      rows: this.rows,\n      currentIndex: viewPortFirstRowIndex\n    });\n  }\n\n  /**\n   * Recalculates the table\n   */\n  recalcLayout(): void {\n    this.refreshRowHeightCache();\n    this.updateIndexes();\n    this.updateRows();\n  }\n\n  /**\n   * Tracks the column\n   */\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  /**\n   * Gets the row pinning group styles\n   */\n  stylesByGroup(group: string) {\n    const widths = this.columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'left') {\n      translateXY(styles, offsetX, 0);\n    } else if (group === 'right') {\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\n      const totalDiff = widths.total - bodyWidth;\n      const offsetDiff = totalDiff - offsetX;\n      const offset = offsetDiff * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n\n  /**\n   * Returns if the row was expanded and set default row expansion when row expansion is empty\n   */\n  getRowExpanded(row: any): boolean {\n    if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\n      for (const group of this.groupedRows) {\n        this.rowExpansions.push(group);\n      }\n    }\n\n    return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\n  }\n\n  getRowExpandedIdx(row: any, expanded: any[]): number {\n    if (!expanded || !expanded.length) return -1;\n\n    const rowId = this.rowIdentity(row);\n    return expanded.findIndex(r => {\n      const id = this.rowIdentity(r);\n      return id === rowId;\n    });\n  }\n\n  /**\n   * Gets the row index given a row\n   */\n  getRowIndex(row: any): number {\n    return this.rowIndexes.get(row) || 0;\n  }\n\n  onTreeAction(row: any) {\n    this.treeAction.emit({ row });\n  }\n}\n","import {\n  Component,\n  Output,\n  EventEmitter,\n  Input,\n  HostBinding,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  OnDestroy\n} from '@angular/core';\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\nimport { SortType } from '../../types/sort.type';\nimport { SelectionType } from '../../types/selection.type';\nimport { DataTableColumnDirective } from '../columns/column.directive';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-header',\n  template: `\n    <div\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `,\n  host: {\n    class: 'datatable-header'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableHeaderComponent implements OnDestroy {\n  @Input() sortAscendingIcon: any;\n  @Input() sortDescendingIcon: any;\n  @Input() scrollbarH: boolean;\n  @Input() dealsWithGroup: boolean;\n  @Input() targetMarkerTemplate: any;\n\n  targetMarkerContext: any;\n\n  @Input() set innerWidth(val: number) {\n    this._innerWidth = val;\n    setTimeout(() => {\n      if (this._columns) {\n        const colByPin = columnsByPin(this._columns);\n        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n        this.setStylesByGroup();\n      }\n    });\n  }\n\n  get innerWidth(): number {\n    return this._innerWidth;\n  }\n\n  @Input() sorts: any[];\n  @Input() sortType: SortType;\n  @Input() allRowsSelected: boolean;\n  @Input() selectionType: SelectionType;\n  @Input() reorderable: boolean;\n\n  dragEventTarget: any;\n\n  @HostBinding('style.height')\n  @Input()\n  set headerHeight(val: any) {\n    if (val !== 'auto') {\n      this._headerHeight = `${val}px`;\n    } else {\n      this._headerHeight = val;\n    }\n  }\n\n  get headerHeight(): any {\n    return this._headerHeight;\n  }\n\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n\n    const colsByPin = columnsByPin(val);\n    this._columnsByPin = columnsByPinArr(val);\n    setTimeout(() => {\n      this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n      this.setStylesByGroup();\n    });\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input()\n  set offsetX(val: number) {\n    this._offsetX = val;\n    this.setStylesByGroup();\n  }\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\n\n  _columnsByPin: any;\n  _columnGroupWidths: any = {\n    total: 100\n  };\n  _innerWidth: number;\n  _offsetX: number;\n  _columns: any[];\n  _headerHeight: string;\n  _styleByGroup: { [prop: string]: {} } = {\n    left: {},\n    center: {},\n    right: {}\n  };\n\n  private destroyed = false;\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n  }\n\n  onLongPressStart({ event, model }: { event: any; model: any }) {\n    model.dragging = true;\n    this.dragEventTarget = event;\n  }\n\n  onLongPressEnd({ event, model }: { event: any; model: any }) {\n    this.dragEventTarget = event;\n\n    // delay resetting so sort can be\n    // prevented if we were dragging\n    setTimeout(() => {\n      // datatable component creates copies from columns on reorder\n      // set dragging to false on new objects\n      const column = this._columns.find(c => c.$$id === model.$$id);\n      if (column) {\n        column.dragging = false;\n      }\n    }, 5);\n  }\n\n  @HostBinding('style.width')\n  get headerWidth(): string {\n    if (this.scrollbarH) {\n      return this.innerWidth + 'px';\n    }\n\n    return '100%';\n  }\n\n  trackByGroups(index: number, colGroup: any): any {\n    return colGroup.type;\n  }\n\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  onColumnResized(width: number, column: DataTableColumnDirective): void {\n    if (width <= column.minWidth) {\n      width = column.minWidth;\n    } else if (width >= column.maxWidth) {\n      width = column.maxWidth;\n    }\n\n    this.resize.emit({\n      column,\n      prevValue: column.width,\n      newValue: width\n    });\n  }\n\n  onColumnReordered({ prevIndex, newIndex, model }: any): void {\n    const column = this.getColumn(newIndex);\n    column.isTarget = false;\n    column.targetMarkerContext = undefined;\n    this.reorder.emit({\n      column: model,\n      prevValue: prevIndex,\n      newValue: newIndex\n    });\n  }\n\n  onTargetChanged({ prevIndex, newIndex, initialIndex }: any): void {\n    if (prevIndex || prevIndex === 0) {\n      const oldColumn = this.getColumn(prevIndex);\n      oldColumn.isTarget = false;\n      oldColumn.targetMarkerContext = undefined;\n    }\n    if (newIndex || newIndex === 0) {\n      const newColumn = this.getColumn(newIndex);\n      newColumn.isTarget = true;\n\n      if (initialIndex !== newIndex) {\n        newColumn.targetMarkerContext = {\n          class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n        };\n      }\n    }\n  }\n\n  getColumn(index: number): any {\n    const leftColumnCount = this._columnsByPin[0].columns.length;\n    if (index < leftColumnCount) {\n      return this._columnsByPin[0].columns[index];\n    }\n\n    const centerColumnCount = this._columnsByPin[1].columns.length;\n    if (index < leftColumnCount + centerColumnCount) {\n      return this._columnsByPin[1].columns[index - leftColumnCount];\n    }\n\n    return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n  }\n\n  onSort({ column, prevValue, newValue }: any): void {\n    // if we are dragging don't sort!\n    if (column.dragging) {\n      return;\n    }\n\n    const sorts = this.calcNewSorts(column, prevValue, newValue);\n    this.sort.emit({\n      sorts,\n      column,\n      prevValue,\n      newValue\n    });\n  }\n\n  calcNewSorts(column: any, prevValue: number, newValue: number): any[] {\n    let idx = 0;\n\n    if (!this.sorts) {\n      this.sorts = [];\n    }\n\n    const sorts = this.sorts.map((s, i) => {\n      s = { ...s };\n      if (s.prop === column.prop) {\n        idx = i;\n      }\n      return s;\n    });\n\n    if (newValue === undefined) {\n      sorts.splice(idx, 1);\n    } else if (prevValue) {\n      sorts[idx].dir = newValue;\n    } else {\n      if (this.sortType === SortType.single) {\n        sorts.splice(0, this.sorts.length);\n      }\n\n      sorts.push({ dir: newValue, prop: column.prop });\n    }\n\n    return sorts;\n  }\n\n  setStylesByGroup() {\n    this._styleByGroup.left = this.calcStylesByGroup('left');\n    this._styleByGroup.center = this.calcStylesByGroup('center');\n    this._styleByGroup.right = this.calcStylesByGroup('right');\n    if (!this.destroyed) {\n      this.cd.detectChanges();\n    }\n  }\n\n  calcStylesByGroup(group: string): any {\n    const widths = this._columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'center') {\n      translateXY(styles, offsetX * -1, 0);\n    } else if (group === 'right') {\n      const totalDiff = widths.total - this.innerWidth;\n      const offset = totalDiff * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n}\n","/**\n * Throttle a function\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context: any;\n  let args: any;\n  let result: any;\n  let timeout: any = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function (this: any) {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target: any, key: PropertyKey, descriptor: PropertyDescriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","import { columnsByPin, columnsTotalWidth } from './column';\n\n/**\n * Calculates the Total Flex Grow\n */\nexport function getTotalFlexGrow(columns: any[]) {\n  let totalFlexGrow = 0;\n\n  for (const c of columns) {\n    totalFlexGrow += c.flexGrow || 0;\n  }\n\n  return totalFlexGrow;\n}\n\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n */\nexport function adjustColumnWidths(allColumns: any, expectedWidth: any) {\n  const columnsWidth = columnsTotalWidth(allColumns);\n  const totalFlexGrow = getTotalFlexGrow(allColumns);\n  const colsByGroup = columnsByPin(allColumns);\n\n  if (columnsWidth !== expectedWidth) {\n    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n  }\n}\n\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n */\nfunction scaleColumns(colsByGroup: any, maxWidth: any, totalFlexGrow: any) {\n  // calculate total width and flexgrow points for coulumns that can be resized\n  for (const attr in colsByGroup) {\n    for (const column of colsByGroup[attr]) {\n      if (!column.canAutoResize) {\n        maxWidth -= column.width;\n        totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\n      } else {\n        column.width = 0;\n      }\n    }\n  }\n\n  const hasMinWidth = {};\n  let remainingWidth = maxWidth;\n\n  // resize columns until no width is left to be distributed\n  do {\n    const widthPerFlexPoint = remainingWidth / totalFlexGrow;\n    remainingWidth = 0;\n\n    for (const attr in colsByGroup) {\n      for (const column of colsByGroup[attr]) {\n        // if the column can be resize and it hasn't reached its minimum width yet\n        if (column.canAutoResize && !hasMinWidth[column.prop]) {\n          const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n          if (column.minWidth !== undefined && newWidth < column.minWidth) {\n            remainingWidth += newWidth - column.minWidth;\n            column.width = column.minWidth;\n            hasMinWidth[column.prop] = true;\n          } else {\n            column.width = newWidth;\n          }\n        }\n      }\n    }\n  } while (remainingWidth !== 0);\n}\n\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n */\nexport function forceFillColumnWidths(\n  allColumns: any[],\n  expectedWidth: number,\n  startIdx: number,\n  allowBleed: boolean,\n  defaultColWidth: number = 300\n) {\n  const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\n    return c.canAutoResize !== false;\n  });\n\n  for (const column of columnsToResize) {\n    if (!column.$$oldWidth) {\n      column.$$oldWidth = column.width;\n    }\n  }\n\n  let additionWidthPerColumn = 0;\n  let exceedsWindow = false;\n  let contentWidth = getContentWidth(allColumns, defaultColWidth);\n  let remainingWidth = expectedWidth - contentWidth;\n  const columnsProcessed: any[] = [];\n  const remainingWidthLimit = 1; // when to stop\n\n  // This loop takes care of the\n  do {\n    additionWidthPerColumn = remainingWidth / columnsToResize.length;\n    exceedsWindow = contentWidth >= expectedWidth;\n\n    for (const column of columnsToResize) {\n      if (exceedsWindow && allowBleed) {\n        column.width = column.$$oldWidth || column.width || defaultColWidth;\n      } else {\n        const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n\n        if (column.minWidth && newSize < column.minWidth) {\n          column.width = column.minWidth;\n          columnsProcessed.push(column);\n        } else if (column.maxWidth && newSize > column.maxWidth) {\n          column.width = column.maxWidth;\n          columnsProcessed.push(column);\n        } else {\n          column.width = newSize;\n        }\n      }\n\n      column.width = Math.max(0, column.width);\n    }\n\n    contentWidth = getContentWidth(allColumns);\n    remainingWidth = expectedWidth - contentWidth;\n    removeProcessedColumns(columnsToResize, columnsProcessed);\n  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\n}\n\n/**\n * Remove the processed columns from the current active columns.\n */\nfunction removeProcessedColumns(columnsToResize: any[], columnsProcessed: any[]) {\n  for (const column of columnsProcessed) {\n    const index = columnsToResize.indexOf(column);\n    columnsToResize.splice(index, 1);\n  }\n}\n\n/**\n * Gets the width of the columns\n */\nfunction getContentWidth(allColumns: any, defaultColWidth: number = 300): number {\n  let contentWidth = 0;\n\n  for (const column of allColumns) {\n    contentWidth += column.width || defaultColWidth;\n  }\n\n  return contentWidth;\n}\n","import { getterForProp } from './column-prop-getters';\nimport { SortType } from '../types/sort.type';\nimport { SortDirection } from '../types/sort-direction.type';\nimport { SortPropDir } from '../types/sort-prop-dir.type';\n/**\n * Gets the next sort direction\n */\nexport function nextSortDir(sortType: SortType, current: SortDirection): SortDirection | undefined {\n  if (sortType === SortType.single) {\n    if (current === SortDirection.asc) {\n      return SortDirection.desc;\n    } else {\n      return SortDirection.asc;\n    }\n  } else {\n    if (!current) {\n      return SortDirection.asc;\n    } else if (current === SortDirection.asc) {\n      return SortDirection.desc;\n    } else if (current === SortDirection.desc) {\n      return undefined;\n    }\n    // avoid TS7030: Not all code paths return a value.\n    return undefined;\n  }\n}\n\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n */\nexport function orderByComparator(a: any, b: any): number {\n  if (a === null || typeof a === 'undefined') a = 0;\n  if (b === null || typeof b === 'undefined') b = 0;\n  if (a instanceof Date && b instanceof Date) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n  } else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\n    // Convert to string in case of a=0 or b=0\n    a = String(a);\n    b = String(b);\n    // Isn't a number so lowercase the string to properly compare\n    if (a.toLowerCase() < b.toLowerCase()) return -1;\n    if (a.toLowerCase() > b.toLowerCase()) return 1;\n  } else {\n    // Parse strings as numbers to compare properly\n    if (parseFloat(a) < parseFloat(b)) return -1;\n    if (parseFloat(a) > parseFloat(b)) return 1;\n  }\n\n  // equal each other\n  return 0;\n}\n\n/**\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\n * does not sort the `rows` argument in place\n */\nexport function sortRows(rows: any[], columns: any[], dirs: SortPropDir[]): any[] {\n  if (!rows) return [];\n  if (!dirs || !dirs.length || !columns) return [...rows];\n\n  /**\n   * record the row ordering of results from prior sort operations (if applicable)\n   * this is necessary to guarantee stable sorting behavior\n   */\n  const rowToIndexMap = new Map<any, number>();\n  rows.forEach((row, index) => rowToIndexMap.set(row, index));\n\n  const temp = [...rows];\n  const cols = columns.reduce((obj, col) => {\n    if (col.comparator && typeof col.comparator === 'function') {\n      obj[col.prop] = col.comparator;\n    }\n    return obj;\n  }, {});\n\n  // cache valueGetter and compareFn so that they\n  // do not need to be looked-up in the sort function body\n  const cachedDirs = dirs.map(dir => {\n    const prop = dir.prop;\n    return {\n      prop,\n      dir: dir.dir,\n      valueGetter: getterForProp(prop),\n      compareFn: cols[prop] || orderByComparator\n    };\n  });\n\n  return temp.sort(function (rowA: any, rowB: any) {\n    for (const cachedDir of cachedDirs) {\n      // Get property and valuegetters for column to be sorted\n      const { prop, valueGetter } = cachedDir;\n      // Get A and B cell values from rows based on properties of the columns\n      const propA = valueGetter(rowA, prop);\n      const propB = valueGetter(rowB, prop);\n\n      // Compare function gets five parameters:\n      // Two cell values to be compared as propA and propB\n      // Two rows corresponding to the cells as rowA and rowB\n      // Direction of the sort for this column as SortDirection\n      // Compare can be a standard JS comparison function (a,b) => -1|0|1\n      // as additional parameters are silently ignored. The whole row and sort\n      // direction enable more complex sort logic.\n      const comparison =\n        cachedDir.dir !== SortDirection.desc\n          ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\n          : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\n\n      // Don't return 0 yet in case of needing to sort by next property\n      if (comparison !== 0) return comparison;\n    }\n\n    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;\n\n    /**\n     * all else being equal, preserve original order of the rows (stable sort)\n     */\n    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\n  });\n}\n","export enum Keys {\n  up = 38,\n  down = 40,\n  return = 13,\n  escape = 27,\n  left = 37,\n  right = 39\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  ViewChild,\n  HostListener,\n  ContentChildren,\n  OnInit,\n  QueryList,\n  AfterViewInit,\n  HostBinding,\n  ContentChild,\n  DoCheck,\n  KeyValueDiffers,\n  KeyValueDiffer,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SkipSelf,\n  Optional,\n  Inject\n} from '@angular/core';\n\nimport { DatatableGroupHeaderDirective } from './body/body-group-header.directive';\n\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { INgxDatatableConfig } from '../ngx-datatable.module';\nimport { groupRowsByParents, optionalGetterForProp } from '../utils/tree';\nimport { TableColumn } from '../types/table-column.type';\nimport { setColumnDefaults, translateTemplates } from '../utils/column-helper';\nimport { ColumnMode } from '../types/column-mode.type';\nimport { SelectionType } from '../types/selection.type';\nimport { SortType } from '../types/sort.type';\nimport { ContextmenuType } from '../types/contextmenu.type';\nimport { DataTableColumnDirective } from './columns/column.directive';\nimport { DatatableRowDetailDirective } from './row-detail/row-detail.directive';\nimport { DatatableFooterDirective } from './footer/footer.directive';\nimport { DataTableBodyComponent } from './body/body.component';\nimport { DataTableHeaderComponent } from './header/header.component';\nimport { ScrollbarHelper } from '../services/scrollbar-helper.service';\nimport { ColumnChangesService } from '../services/column-changes.service';\nimport { DimensionsHelper } from '../services/dimensions-helper.service';\nimport { throttleable } from '../utils/throttle';\nimport { forceFillColumnWidths, adjustColumnWidths } from '../utils/math';\nimport { sortRows } from '../utils/sort';\n\n@Component({\n  selector: 'ngx-datatable',\n  templateUrl: './datatable.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./datatable.component.scss'],\n  host: {\n    class: 'ngx-datatable'\n  }\n})\nexport class DatatableComponent implements OnInit, DoCheck, AfterViewInit {\n  /**\n   * Template for the target marker of drag target columns.\n   */\n  @Input() targetMarkerTemplate: any;\n\n  /**\n   * Rows that are displayed in the table.\n   */\n  @Input() set rows(val: any) {\n    this._rows = val;\n\n    if (val) {\n      this._internalRows = [...val];\n    }\n\n    // auto sort on new updates\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    }\n\n    // auto group by parent on new update\n    this._internalRows = groupRowsByParents(\n      this._internalRows,\n      optionalGetterForProp(this.treeFromRelation),\n      optionalGetterForProp(this.treeToRelation)\n    );\n\n    // recalculate sizes/etc\n    this.recalculate();\n\n    if (this._rows && this._groupRowsBy) {\n      // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n      this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n    }\n\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Gets the rows.\n   */\n  get rows(): any {\n    return this._rows;\n  }\n\n  /**\n   * This attribute allows the user to set the name of the column to group the data with\n   */\n  @Input() set groupRowsBy(val: string) {\n    if (val) {\n      this._groupRowsBy = val;\n      if (this._rows && this._groupRowsBy) {\n        // cretes a new array with the data grouped\n        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n      }\n    }\n  }\n\n  get groupRowsBy() {\n    return this._groupRowsBy;\n  }\n\n  /**\n   * This attribute allows the user to set a grouped array in the following format:\n   *  [\n   *    {groupid=1} [\n   *      {id=1 name=\"test1\"},\n   *      {id=2 name=\"test2\"},\n   *      {id=3 name=\"test3\"}\n   *    ]},\n   *    {groupid=2>[\n   *      {id=4 name=\"test4\"},\n   *      {id=5 name=\"test5\"},\n   *      {id=6 name=\"test6\"}\n   *    ]}\n   *  ]\n   */\n  @Input() groupedRows: any[];\n\n  /**\n   * Columns to be displayed.\n   */\n  @Input() set columns(val: TableColumn[]) {\n    if (val) {\n      this._internalColumns = [...val];\n      setColumnDefaults(this._internalColumns);\n      this.recalculateColumns();\n    }\n\n    this._columns = val;\n  }\n\n  /**\n   * Get the columns.\n   */\n  get columns(): TableColumn[] {\n    return this._columns;\n  }\n\n  /**\n   * List of row objects that should be\n   * represented as selected in the grid.\n   * Default value: `[]`\n   */\n  @Input() selected: any[] = [];\n\n  /**\n   * Enable vertical scrollbars\n   */\n  @Input() scrollbarV: boolean = false;\n\n  /**\n   * Enable horz scrollbars\n   */\n  @Input() scrollbarH: boolean = false;\n\n  /**\n   * The row height; which is necessary\n   * to calculate the height for the lazy rendering.\n   */\n  @Input() rowHeight: number | 'auto' | ((row?: any) => number) = 30;\n\n  /**\n   * Type of column width distribution formula.\n   * Example: flex, force, standard\n   */\n  @Input() columnMode: ColumnMode | keyof typeof ColumnMode = ColumnMode.standard;\n\n  /**\n   * The minimum header height in pixels.\n   * Pass a falsey for no header\n   */\n  @Input() headerHeight: number = 30;\n\n  /**\n   * The minimum footer height in pixels.\n   * Pass falsey for no footer\n   */\n  @Input() footerHeight: number = 0;\n\n  /**\n   * If the table should use external paging\n   * otherwise its assumed that all data is preloaded.\n   */\n  @Input() externalPaging: boolean = false;\n\n  /**\n   * If the table should use external sorting or\n   * the built-in basic sorting.\n   */\n  @Input() externalSorting: boolean = false;\n\n  /**\n   * The page size to be shown.\n   * Default value: `undefined`\n   */\n  @Input() set limit(val: number | undefined) {\n    this._limit = val;\n\n    // recalculate sizes/etc\n    this.recalculate();\n  }\n\n  /**\n   * Gets the limit.\n   */\n  get limit(): number | undefined {\n    return this._limit;\n  }\n\n  /**\n   * The total count of all rows.\n   * Default value: `0`\n   */\n  @Input() set count(val: number) {\n    this._count = val;\n\n    // recalculate sizes/etc\n    this.recalculate();\n  }\n\n  /**\n   * Gets the count.\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * The current offset ( page - 1 ) shown.\n   * Default value: `0`\n   */\n  @Input() set offset(val: number) {\n    this._offset = val;\n  }\n  get offset(): number {\n    return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n  }\n\n  /**\n   * Show the linear loading bar.\n   * Default value: `false`\n   */\n  @Input() loadingIndicator: boolean = false;\n\n  /**\n   * Type of row selection. Options are:\n   *\n   *  - `single`\n   *  - `multi`\n   *  - `checkbox`\n   *  - `multiClick`\n   *  - `cell`\n   *\n   * For no selection pass a `falsey`.\n   * Default value: `undefined`\n   */\n  @Input() selectionType: SelectionType;\n\n  /**\n   * Enable/Disable ability to re-order columns\n   * by dragging them.\n   */\n  @Input() reorderable: boolean = true;\n\n  /**\n   * Swap columns on re-order columns or\n   * move them.\n   */\n  @Input() swapColumns: boolean = true;\n\n  /**\n   * The type of sorting\n   */\n  @Input() sortType: SortType = SortType.single;\n\n  /**\n   * Array of sorted columns by property and type.\n   * Default value: `[]`\n   */\n  @Input() sorts: any[] = [];\n\n  /**\n   * Css class overrides\n   */\n  @Input() cssClasses: any = {\n    sortAscending: 'datatable-icon-up',\n    sortDescending: 'datatable-icon-down',\n    pagerLeftArrow: 'datatable-icon-left',\n    pagerRightArrow: 'datatable-icon-right',\n    pagerPrevious: 'datatable-icon-prev',\n    pagerNext: 'datatable-icon-skip'\n  };\n\n  /**\n   * Message overrides for localization\n   *\n   * emptyMessage     [default] = 'No data to display'\n   * totalMessage     [default] = 'total'\n   * selectedMessage  [default] = 'selected'\n   */\n  @Input() messages: any = {\n    // Message to show when array is presented\n    // but contains no values\n    emptyMessage: 'No data to display',\n\n    // Footer total message\n    totalMessage: 'total',\n\n    // Footer selected message\n    selectedMessage: 'selected'\n  };\n\n  /**\n   * Row specific classes.\n   * Similar implementation to ngClass.\n   *\n   *  [rowClass]=\"'first second'\"\n   *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\n   */\n  @Input() rowClass: any;\n\n  /**\n   * A boolean/function you can use to check whether you want\n   * to select a particular row based on a criteria. Example:\n   *\n   *    (selection) => {\n   *      return selection !== 'Ethel Price';\n   *    }\n   */\n  @Input() selectCheck: any;\n\n  /**\n   * A function you can use to check whether you want\n   * to show the checkbox for a particular row based on a criteria. Example:\n   *\n   *    (row, column, value) => {\n   *      return row.name !== 'Ethel Price';\n   *    }\n   */\n  @Input() displayCheck: (row: any, column?: any, value?: any) => boolean;\n\n  /**\n   * A boolean you can use to set the detault behaviour of rows and groups\n   * whether they will start expanded or not. If ommited the default is NOT expanded.\n   *\n   */\n  @Input() groupExpansionDefault: boolean = false;\n\n  /**\n   * Property to which you can use for custom tracking of rows.\n   * Example: 'name'\n   */\n  @Input() trackByProp: string;\n\n  /**\n   * Property to which you can use for determining select all\n   * rows on current page or not.\n   *\n   * @memberOf DatatableComponent\n   */\n  @Input() selectAllRowsOnPage = false;\n\n  /**\n   * A flag for row virtualization on / off\n   */\n  @Input() virtualization: boolean = true;\n\n  /**\n   * Tree from relation\n   */\n  @Input() treeFromRelation: string;\n\n  /**\n   * Tree to relation\n   */\n  @Input() treeToRelation: string;\n\n  /**\n   * A flag for switching summary row on / off\n   */\n  @Input() summaryRow: boolean = false;\n\n  /**\n   * A height of summary row\n   */\n  @Input() summaryHeight: number = 30;\n\n  /**\n   * A property holds a summary row position: top/bottom\n   */\n  @Input() summaryPosition: string = 'top';\n\n  /**\n   * Body was scrolled typically in a `scrollbarV:true` scenario.\n   */\n  @Output() scroll: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A cell or row was focused via keyboard or mouse click.\n   */\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A cell or row was selected.\n   */\n  @Output() select: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Column sort was invoked.\n   */\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The table was paged either triggered by the pager or the body scroll.\n   */\n  @Output() page: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Columns were re-ordered.\n   */\n  @Output() reorder: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * Column was resized.\n   */\n  @Output() resize: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * The context menu was invoked on the table.\n   * type indicates whether the header or the body was clicked.\n   * content contains either the column or the row that was clicked.\n   */\n  @Output() tableContextmenu = new EventEmitter<{ event: MouseEvent; type: ContextmenuType; content: any }>(false);\n\n  /**\n   * A row was expanded ot collapsed for tree\n   */\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * CSS class applied if the header height if fixed height.\n   */\n  @HostBinding('class.fixed-header')\n  get isFixedHeader(): boolean {\n    const headerHeight: number | string = this.headerHeight;\n    return typeof headerHeight === 'string' ? <string>headerHeight !== 'auto' : true;\n  }\n\n  /**\n   * CSS class applied to the root element if\n   * the row heights are fixed heights.\n   */\n  @HostBinding('class.fixed-row')\n  get isFixedRow(): boolean {\n    return this.rowHeight !== 'auto';\n  }\n\n  /**\n   * CSS class applied to root element if\n   * vertical scrolling is enabled.\n   */\n  @HostBinding('class.scroll-vertical')\n  get isVertScroll(): boolean {\n    return this.scrollbarV;\n  }\n\n  /**\n   * CSS class applied to root element if\n   * virtualization is enabled.\n   */\n  @HostBinding('class.virtualized')\n  get isVirtualized(): boolean {\n    return this.virtualization;\n  }\n\n  /**\n   * CSS class applied to the root element\n   * if the horziontal scrolling is enabled.\n   */\n  @HostBinding('class.scroll-horz')\n  get isHorScroll(): boolean {\n    return this.scrollbarH;\n  }\n\n  /**\n   * CSS class applied to root element is selectable.\n   */\n  @HostBinding('class.selectable')\n  get isSelectable(): boolean {\n    return this.selectionType !== undefined;\n  }\n\n  /**\n   * CSS class applied to root is checkbox selection.\n   */\n  @HostBinding('class.checkbox-selection')\n  get isCheckboxSelection(): boolean {\n    return this.selectionType === SelectionType.checkbox;\n  }\n\n  /**\n   * CSS class applied to root if cell selection.\n   */\n  @HostBinding('class.cell-selection')\n  get isCellSelection(): boolean {\n    return this.selectionType === SelectionType.cell;\n  }\n\n  /**\n   * CSS class applied to root if single select.\n   */\n  @HostBinding('class.single-selection')\n  get isSingleSelection(): boolean {\n    return this.selectionType === SelectionType.single;\n  }\n\n  /**\n   * CSS class added to root element if mulit select\n   */\n  @HostBinding('class.multi-selection')\n  get isMultiSelection(): boolean {\n    return this.selectionType === SelectionType.multi;\n  }\n\n  /**\n   * CSS class added to root element if mulit click select\n   */\n  @HostBinding('class.multi-click-selection')\n  get isMultiClickSelection(): boolean {\n    return this.selectionType === SelectionType.multiClick;\n  }\n\n  /**\n   * Column templates gathered from `ContentChildren`\n   * if described in your markup.\n   */\n  @ContentChildren(DataTableColumnDirective)\n  set columnTemplates(val: QueryList<DataTableColumnDirective>) {\n    this._columnTemplates = val;\n    this.translateColumns(val);\n  }\n\n  /**\n   * Returns the column templates.\n   */\n  get columnTemplates(): QueryList<DataTableColumnDirective> {\n    return this._columnTemplates;\n  }\n\n  /**\n   * Row Detail templates gathered from the ContentChild\n   */\n  @ContentChild(DatatableRowDetailDirective)\n  rowDetail: DatatableRowDetailDirective;\n\n  /**\n   * Group Header templates gathered from the ContentChild\n   */\n  @ContentChild(DatatableGroupHeaderDirective)\n  groupHeader: DatatableGroupHeaderDirective;\n\n  /**\n   * Footer template gathered from the ContentChild\n   */\n  @ContentChild(DatatableFooterDirective)\n  footer: DatatableFooterDirective;\n\n  /**\n   * Reference to the body component for manually\n   * invoking functions on the body.\n   */\n  @ViewChild(DataTableBodyComponent)\n  bodyComponent: DataTableBodyComponent;\n\n  /**\n   * Reference to the header component for manually\n   * invoking functions on the header.\n   *\n   * @memberOf DatatableComponent\n   */\n  @ViewChild(DataTableHeaderComponent)\n  headerComponent: DataTableHeaderComponent;\n\n  /**\n   * Returns if all rows are selected.\n   */\n  get allRowsSelected(): boolean {\n    let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n\n    if (this.bodyComponent && this.selectAllRowsOnPage) {\n      const indexes = this.bodyComponent.indexes;\n      const rowsOnPage = indexes.last - indexes.first;\n      allRowsSelected = this.selected.length === rowsOnPage;\n    }\n\n    return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n  }\n\n  element: HTMLElement;\n  _innerWidth: number;\n  pageSize: number;\n  bodyHeight: number;\n  rowCount: number = 0;\n  rowDiffer: KeyValueDiffer<{}, {}>;\n\n  _offsetX = new BehaviorSubject(0);\n  _limit: number | undefined;\n  _count: number = 0;\n  _offset: number = 0;\n  _rows: any[];\n  _groupRowsBy: string;\n  _internalRows: any[];\n  _internalColumns: TableColumn[];\n  _columns: TableColumn[];\n  _columnTemplates: QueryList<DataTableColumnDirective>;\n  _subscriptions: Subscription[] = [];\n\n  constructor(\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\n    @SkipSelf() private dimensionsHelper: DimensionsHelper,\n    private cd: ChangeDetectorRef,\n    element: ElementRef,\n    differs: KeyValueDiffers,\n    private columnChangesService: ColumnChangesService,\n    @Optional() @Inject('configuration') private configuration: INgxDatatableConfig\n  ) {\n    // get ref to elm for measuring\n    this.element = element.nativeElement;\n    this.rowDiffer = differs.find({}).create();\n\n    // apply global settings from Module.forRoot\n    if (this.configuration && this.configuration.messages) {\n      this.messages = { ...this.configuration.messages };\n    }\n  }\n\n  /**\n   * Lifecycle hook that is called after data-bound\n   * properties of a directive are initialized.\n   */\n  ngOnInit(): void {\n    // need to call this immediatly to size\n    // if the table is hidden the visibility\n    // listener will invoke this itself upon show\n    this.recalculate();\n  }\n\n  /**\n   * Lifecycle hook that is called after a component's\n   * view has been fully initialized.\n   */\n  ngAfterViewInit(): void {\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    }\n\n    // this has to be done to prevent the change detection\n    // tree from freaking out because we are readjusting\n    if (typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      this.recalculate();\n\n      // emit page for virtual server-side kickoff\n      if (this.externalPaging && this.scrollbarV) {\n        this.page.emit({\n          count: this.count,\n          pageSize: this.pageSize,\n          limit: this.limit,\n          offset: 0\n        });\n      }\n    });\n  }\n\n  /**\n   * Lifecycle hook that is called after a component's\n   * content has been fully initialized.\n   */\n  ngAfterContentInit() {\n    this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\n    this.listenForColumnInputChanges();\n  }\n\n  /**\n   * This will be used when displaying or selecting rows.\n   * when tracking/comparing them, we'll use the value of this fn,\n   *\n   * (`fn(x) === fn(y)` instead of `x === y`)\n   */\n  @Input() rowIdentity: (x: any) => any = (x: any) => {\n    if (this._groupRowsBy) {\n      // each group in groupedRows are stored as {key, value: [rows]},\n      // where key is the groupRowsBy index\n      return x.key;\n    } else {\n      return x;\n    }\n  };\n\n  /**\n   * Translates the templates to the column objects\n   */\n  translateColumns(val: any) {\n    if (val) {\n      const arr = val.toArray();\n      if (arr.length) {\n        this._internalColumns = translateTemplates(arr);\n        setColumnDefaults(this._internalColumns);\n        this.recalculateColumns();\n        this.sortInternalRows();\n        this.cd.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * Creates a map with the data grouped by the user choice of grouping index\n   *\n   * @param originalArray the original array passed via parameter\n   * @param groupByIndex  the index of the column to group the data by\n   */\n  groupArrayBy(originalArray: any, groupBy: any) {\n    // create a map to hold groups with their corresponding results\n    const map = new Map();\n    let i: number = 0;\n\n    originalArray.forEach((item: any) => {\n      const key = item[groupBy];\n      if (!map.has(key)) {\n        map.set(key, [item]);\n      } else {\n        map.get(key).push(item);\n      }\n      i++;\n    });\n\n    const addGroup = (key: any, value: any) => {\n      return { key, value };\n    };\n\n    // convert map back to a simple array of objects\n    return Array.from(map, x => addGroup(x[0], x[1]));\n  }\n\n  /*\n   * Lifecycle hook that is called when Angular dirty checks a directive.\n   */\n  ngDoCheck(): void {\n    if (this.rowDiffer.diff(this.rows)) {\n      if (!this.externalSorting) {\n        this.sortInternalRows();\n      } else {\n        this._internalRows = [...this.rows];\n      }\n\n      // auto group by parent on new update\n      this._internalRows = groupRowsByParents(\n        this._internalRows,\n        optionalGetterForProp(this.treeFromRelation),\n        optionalGetterForProp(this.treeToRelation)\n      );\n\n      this.recalculatePages();\n      this.cd.markForCheck();\n    }\n  }\n\n  /**\n   * Recalc's the sizes of the grid.\n   *\n   * Updated automatically on changes to:\n   *\n   *  - Columns\n   *  - Rows\n   *  - Paging related\n   *\n   * Also can be manually invoked or upon window resize.\n   */\n  recalculate(): void {\n    this.recalculateDims();\n    this.recalculateColumns();\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Window resize handler to update sizes.\n   */\n  @HostListener('window:resize')\n  @throttleable(5)\n  onWindowResize(): void {\n    this.recalculate();\n  }\n\n  /**\n   * Recalulcates the column widths based on column width\n   * distribution mode and scrollbar offsets.\n   */\n  recalculateColumns(\n    columns: any[] = this._internalColumns,\n    forceIdx: number = -1,\n    allowBleed: boolean = this.scrollbarH\n  ): any[] | undefined {\n    if (!columns) return undefined;\n\n    let width = this._innerWidth;\n    if (this.scrollbarV) {\n      width = width - this.scrollbarHelper.width;\n    }\n\n    if (this.columnMode === ColumnMode.force) {\n      forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n    } else if (this.columnMode === ColumnMode.flex) {\n      adjustColumnWidths(columns, width);\n    }\n\n    return columns;\n  }\n\n  /**\n   * Recalculates the dimensions of the table size.\n   * Internally calls the page size and row count calcs too.\n   *\n   */\n  recalculateDims(): void {\n    const dims = this.dimensionsHelper.getDimensions(this.element);\n    this._innerWidth = Math.floor(dims.width);\n\n    if (this.scrollbarV) {\n      let height = dims.height;\n      if (this.headerHeight) height = height - this.headerHeight;\n      if (this.footerHeight) height = height - this.footerHeight;\n      this.bodyHeight = height;\n    }\n\n    this.recalculatePages();\n  }\n\n  /**\n   * Recalculates the pages after a update.\n   */\n  recalculatePages(): void {\n    this.pageSize = this.calcPageSize();\n    this.rowCount = this.calcRowCount();\n  }\n\n  /**\n   * Body triggered a page event.\n   */\n  onBodyPage({ offset }: any): void {\n    // Avoid pagination caming from body events like scroll when the table\n    // has no virtualization and the external paging is enable.\n    // This means, let's the developer handle pagination by my him(her) self\n    if (this.externalPaging && !this.virtualization) {\n      return;\n    }\n\n    this.offset = offset;\n\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n  }\n\n  /**\n   * The body triggered a scroll event.\n   */\n  onBodyScroll(event: MouseEvent): void {\n    this._offsetX.next(event.offsetX);\n    this.scroll.emit(event);\n    this.cd.detectChanges();\n  }\n\n  /**\n   * The footer triggered a page event.\n   */\n  onFooterPage(event: any) {\n    this.offset = event.page - 1;\n    this.bodyComponent.updateOffsetY(this.offset);\n\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n  }\n\n  /**\n   * Recalculates the sizes of the page\n   */\n  calcPageSize(val: any[] = this.rows): number {\n    // Keep the page size constant even if the row has been expanded.\n    // This is because an expanded row is still considered to be a child of\n    // the original row.  Hence calculation would use rowHeight only.\n    if (this.scrollbarV && this.virtualization) {\n      const size = Math.ceil(this.bodyHeight / (this.rowHeight as number));\n      return Math.max(size, 0);\n    }\n\n    // if limit is passed, we are paging\n    if (this.limit !== undefined) {\n      return this.limit;\n    }\n\n    // otherwise use row length\n    if (val) {\n      return val.length;\n    }\n\n    // other empty :(\n    return 0;\n  }\n\n  /**\n   * Calculates the row count.\n   */\n  calcRowCount(val: any[] = this.rows): number {\n    if (!this.externalPaging) {\n      if (!val) return 0;\n\n      if (this.groupedRows) {\n        return this.groupedRows.length;\n      } else if (this.treeFromRelation != null && this.treeToRelation != null) {\n        return this._internalRows.length;\n      } else {\n        return val.length;\n      }\n    }\n\n    return this.count;\n  }\n\n  /**\n   * The header triggered a contextmenu event.\n   */\n  onColumnContextmenu({ event, column }: any): void {\n    this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n  }\n\n  /**\n   * The body triggered a contextmenu event.\n   */\n  onRowContextmenu({ event, row }: any): void {\n    this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n  }\n\n  /**\n   * The header triggered a column resize event.\n   */\n  onColumnResize({ column, newValue }: any): void {\n    /* Safari/iOS 10.2 workaround */\n    if (column === undefined) {\n      return;\n    }\n\n    let idx: number;\n    const cols = this._internalColumns.map((c, i) => {\n      c = { ...c };\n\n      if (c.$$id === column.$$id) {\n        idx = i;\n        c.width = newValue;\n\n        // set this so we can force the column\n        // width distribution to be to this value\n        c.$$oldWidth = newValue;\n      }\n\n      return c;\n    });\n\n    this.recalculateColumns(cols, idx);\n    this._internalColumns = cols;\n\n    this.resize.emit({\n      column,\n      newValue\n    });\n  }\n\n  /**\n   * The header triggered a column re-order event.\n   */\n  onColumnReorder({ column, newValue, prevValue }: any): void {\n    const cols = this._internalColumns.map(c => {\n      return { ...c };\n    });\n\n    if (this.swapColumns) {\n      const prevCol = cols[newValue];\n      cols[newValue] = column;\n      cols[prevValue] = prevCol;\n    } else {\n      if (newValue > prevValue) {\n        const movedCol = cols[prevValue];\n        for (let i = prevValue; i < newValue; i++) {\n          cols[i] = cols[i + 1];\n        }\n        cols[newValue] = movedCol;\n      } else {\n        const movedCol = cols[prevValue];\n        for (let i = prevValue; i > newValue; i--) {\n          cols[i] = cols[i - 1];\n        }\n        cols[newValue] = movedCol;\n      }\n    }\n\n    this._internalColumns = cols;\n\n    this.reorder.emit({\n      column,\n      newValue,\n      prevValue\n    });\n  }\n\n  /**\n   * The header triggered a column sort event.\n   */\n  onColumnSort(event: any): void {\n    // clean selected rows\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n\n    this.sorts = event.sorts;\n\n    // this could be optimized better since it will resort\n    // the rows again on the 'push' detection...\n    if (this.externalSorting === false) {\n      // don't use normal setter so we don't resort\n      this.sortInternalRows();\n    }\n\n    // auto group by parent on new update\n    this._internalRows = groupRowsByParents(\n      this._internalRows,\n      optionalGetterForProp(this.treeFromRelation),\n      optionalGetterForProp(this.treeToRelation)\n    );\n\n    // Always go to first page when sorting to see the newly sorted data\n    this.offset = 0;\n    this.bodyComponent.updateOffsetY(this.offset);\n    this.sort.emit(event);\n  }\n\n  /**\n   * Toggle all row selection\n   */\n  onHeaderSelect(event: any): void {\n    if (this.bodyComponent && this.selectAllRowsOnPage) {\n      // before we splice, chk if we currently have all selected\n      const first = this.bodyComponent.indexes.first;\n      const last = this.bodyComponent.indexes.last;\n      const allSelected = this.selected.length === last - first;\n\n      // remove all existing either way\n      this.selected = [];\n\n      // do the opposite here\n      if (!allSelected) {\n        this.selected.push(...this._internalRows.slice(first, last));\n      }\n    } else {\n      // before we splice, chk if we currently have all selected\n      const allSelected = this.selected.length === this.rows.length;\n      // remove all existing either way\n      this.selected = [];\n      // do the opposite here\n      if (!allSelected) {\n        this.selected.push(...this.rows);\n      }\n    }\n\n    this.select.emit({\n      selected: this.selected\n    });\n  }\n\n  /**\n   * A row was selected from body\n   */\n  onBodySelect(event: any): void {\n    this.select.emit(event);\n  }\n\n  /**\n   * A row was expanded or collapsed for tree\n   */\n  onTreeAction(event: any) {\n    const row = event.row;\n    // TODO: For duplicated items this will not work\n    const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\n    this.treeAction.emit({ row, rowIndex });\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n\n  /**\n   * listen for changes to input bindings of all DataTableColumnDirective and\n   * trigger the columnTemplates.changes observable to emit\n   */\n  private listenForColumnInputChanges(): void {\n    this._subscriptions.push(\n      this.columnChangesService.columnInputChanges$.subscribe(() => {\n        if (this.columnTemplates) {\n          this.columnTemplates.notifyOnChanges();\n        }\n      })\n    );\n  }\n\n  private sortInternalRows(): void {\n    this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n  }\n}\n","import {\n  Component,\n  Input,\n  EventEmitter,\n  Output,\n  HostBinding,\n  HostListener,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { SortType } from '../../types/sort.type';\nimport { SelectionType } from '../../types/selection.type';\nimport { TableColumn } from '../../types/table-column.type';\nimport { nextSortDir } from '../../utils/sort';\nimport { SortDirection } from '../../types/sort-direction.type';\n\n@Component({\n  selector: 'datatable-header-cell',\n  template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `,\n  host: {\n    class: 'datatable-header-cell'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableHeaderCellComponent {\n  @Input() sortType: SortType;\n  @Input() sortAscendingIcon: string;\n  @Input() sortDescendingIcon: string;\n\n  @Input() isTarget: boolean;\n  @Input() targetMarkerTemplate: any;\n  @Input() targetMarkerContext: any;\n\n  _allRowsSelected: boolean;\n\n  @Input() set allRowsSelected(value) {\n    this._allRowsSelected = value;\n    this.cellContext.allRowsSelected = value;\n  }\n  get allRowsSelected() {\n    return this._allRowsSelected;\n  }\n\n  @Input() selectionType: SelectionType;\n\n  @Input() set column(column: TableColumn) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.cd.markForCheck();\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  @HostBinding('style.height.px')\n  @Input()\n  headerHeight: number;\n\n  @Input() set sorts(val: any[]) {\n    this._sorts = val;\n    this.sortDir = this.calcSortDir(val);\n    this.cellContext.sortDir = this.sortDir;\n    this.sortClass = this.calcSortClass(this.sortDir);\n    this.cd.markForCheck();\n  }\n\n  get sorts(): any[] {\n    return this._sorts;\n  }\n\n  @Output() sort: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() columnContextmenu = new EventEmitter<{ event: MouseEvent; column: any }>(false);\n\n  @HostBinding('class')\n  get columnCssClasses(): any {\n    let cls = 'datatable-header-cell';\n\n    if (this.column.sortable) cls += ' sortable';\n    if (this.column.resizeable) cls += ' resizeable';\n    if (this.column.headerClass) {\n      if (typeof this.column.headerClass === 'string') {\n        cls += ' ' + this.column.headerClass;\n      } else if (typeof this.column.headerClass === 'function') {\n        const res = this.column.headerClass({\n          column: this.column\n        });\n\n        if (typeof res === 'string') {\n          cls += res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n          for (const k of keys) {\n            if (res[k] === true) cls += ` ${k}`;\n          }\n        }\n      }\n    }\n\n    const sortDir = this.sortDir;\n    if (sortDir) {\n      cls += ` sort-active sort-${sortDir}`;\n    }\n\n    return cls;\n  }\n\n  @HostBinding('attr.title')\n  get name(): string {\n    // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n    return this.column.headerTemplate === undefined ? this.column.name : undefined;\n  }\n\n  @HostBinding('style.minWidth.px')\n  get minWidth(): number {\n    return this.column.minWidth;\n  }\n\n  @HostBinding('style.maxWidth.px')\n  get maxWidth(): number {\n    return this.column.maxWidth;\n  }\n\n  @HostBinding('style.width.px')\n  get width(): number {\n    return this.column.width;\n  }\n\n  get isCheckboxable(): boolean {\n    return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n  }\n\n  sortFn = this.onSort.bind(this);\n  sortClass: string;\n  sortDir: SortDirection;\n  selectFn = this.select.emit.bind(this.select);\n\n  cellContext: any = {\n    column: this.column,\n    sortDir: this.sortDir,\n    sortFn: this.sortFn,\n    allRowsSelected: this.allRowsSelected,\n    selectFn: this.selectFn\n  };\n\n  private _column: TableColumn;\n  private _sorts: any[];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  @HostListener('contextmenu', ['$event'])\n  onContextmenu($event: MouseEvent): void {\n    this.columnContextmenu.emit({ event: $event, column: this.column });\n  }\n\n  calcSortDir(sorts: any[]): any {\n    if (sorts && this.column) {\n      const sort = sorts.find((s: any) => {\n        return s.prop === this.column.prop;\n      });\n\n      if (sort) return sort.dir;\n    }\n  }\n\n  onSort(): void {\n    if (!this.column.sortable) return;\n\n    const newValue = nextSortDir(this.sortType, this.sortDir);\n    this.sort.emit({\n      column: this.column,\n      prevValue: this.sortDir,\n      newValue\n    });\n  }\n\n  calcSortClass(sortDir: SortDirection): string {\n    if (sortDir === SortDirection.asc) {\n      return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n    } else if (sortDir === SortDirection.desc) {\n      return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n    } else {\n      return `sort-btn`;\n    }\n  }\n}\n","import { Component, Output, EventEmitter, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { DatatableFooterDirective } from './footer.directive';\n@Component({\n  selector: 'datatable-footer',\n  template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `,\n  host: {\n    class: 'datatable-footer'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableFooterComponent {\n  @Input() footerHeight: number;\n  @Input() rowCount: number;\n  @Input() pageSize: number;\n  @Input() offset: number;\n  @Input() pagerLeftArrowIcon: string;\n  @Input() pagerRightArrowIcon: string;\n  @Input() pagerPreviousIcon: string;\n  @Input() pagerNextIcon: string;\n  @Input() totalMessage: string;\n  @Input() footerTemplate: DatatableFooterDirective;\n\n  @Input() selectedCount: number = 0;\n  @Input() selectedMessage: string | boolean;\n\n  @Output() page: EventEmitter<any> = new EventEmitter();\n\n  get isVisible(): boolean {\n    return this.rowCount / this.pageSize > 1;\n  }\n\n  get curPage(): number {\n    return this.offset + 1;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'datatable-pager',\n  template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `,\n  host: {\n    class: 'datatable-pager'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTablePagerComponent {\n  @Input() pagerLeftArrowIcon: string;\n  @Input() pagerRightArrowIcon: string;\n  @Input() pagerPreviousIcon: string;\n  @Input() pagerNextIcon: string;\n\n  @Input()\n  set size(val: number) {\n    this._size = val;\n    this.pages = this.calcPages();\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  @Input()\n  set count(val: number) {\n    this._count = val;\n    this.pages = this.calcPages();\n  }\n\n  get count(): number {\n    return this._count;\n  }\n\n  @Input()\n  set page(val: number) {\n    this._page = val;\n    this.pages = this.calcPages();\n  }\n\n  get page(): number {\n    return this._page;\n  }\n\n  get totalPages(): number {\n    const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\n    return Math.max(count || 0, 1);\n  }\n\n  @Output() change: EventEmitter<any> = new EventEmitter();\n\n  _count: number = 0;\n  _page: number = 1;\n  _size: number = 0;\n  pages: any;\n\n  canPrevious(): boolean {\n    return this.page > 1;\n  }\n\n  canNext(): boolean {\n    return this.page < this.totalPages;\n  }\n\n  prevPage(): void {\n    this.selectPage(this.page - 1);\n  }\n\n  nextPage(): void {\n    this.selectPage(this.page + 1);\n  }\n\n  selectPage(page: number): void {\n    if (page > 0 && page <= this.totalPages && page !== this.page) {\n      this.page = page;\n\n      this.change.emit({\n        page\n      });\n    }\n  }\n\n  calcPages(page?: number): any[] {\n    const pages = [];\n    let startPage = 1;\n    let endPage = this.totalPages;\n    const maxSize = 5;\n    const isMaxSized = maxSize < this.totalPages;\n\n    page = page || this.page;\n\n    if (isMaxSized) {\n      startPage = page - Math.floor(maxSize / 2);\n      endPage = page + Math.floor(maxSize / 2);\n\n      if (startPage < 1) {\n        startPage = 1;\n        endPage = Math.min(startPage + maxSize - 1, this.totalPages);\n      } else if (endPage > this.totalPages) {\n        startPage = Math.max(this.totalPages - maxSize + 1, 1);\n        endPage = this.totalPages;\n      }\n    }\n\n    for (let num = startPage; num <= endPage; num++) {\n      pages.push({\n        number: num,\n        text: <string>(<any>num)\n      });\n    }\n\n    return pages;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'datatable-progress',\n  template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ProgressBarComponent {}\n","import {\n  Component,\n  Input,\n  HostBinding,\n  ElementRef,\n  Output,\n  KeyValueDiffers,\n  KeyValueDiffer,\n  EventEmitter,\n  HostListener,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  DoCheck,\n  SkipSelf\n} from '@angular/core';\n\nimport { TreeStatus } from './body-cell.component';\nimport { columnsByPin, columnGroupWidths, columnsByPinArr } from '../../utils/column';\nimport { Keys } from '../../utils/keys';\nimport { ScrollbarHelper } from '../../services/scrollbar-helper.service';\nimport { translateXY } from '../../utils/translate';\n\n@Component({\n  selector: 'datatable-body-row',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `\n})\nexport class DataTableBodyRowComponent implements DoCheck {\n  @Input() set columns(val: any[]) {\n    this._columns = val;\n    this.recalculateColumns(val);\n    this.buildStylesByGroup();\n  }\n\n  get columns(): any[] {\n    return this._columns;\n  }\n\n  @Input() set innerWidth(val: number) {\n    if (this._columns) {\n      const colByPin = columnsByPin(this._columns);\n      this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n    }\n\n    this._innerWidth = val;\n    this.recalculateColumns();\n    this.buildStylesByGroup();\n  }\n\n  get innerWidth(): number {\n    return this._innerWidth;\n  }\n\n  @Input() expanded: boolean;\n  @Input() rowClass: any;\n  @Input() row: any;\n  @Input() group: any;\n  @Input() isSelected: boolean;\n  @Input() rowIndex: number;\n  @Input() displayCheck: any;\n  @Input() treeStatus: TreeStatus = 'collapsed';\n\n  @Input()\n  set offsetX(val: number) {\n    this._offsetX = val;\n    this.buildStylesByGroup();\n  }\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  @HostBinding('class')\n  get cssClass() {\n    let cls = 'datatable-body-row';\n    if (this.isSelected) {\n      cls += ' active';\n    }\n    if (this.rowIndex % 2 !== 0) {\n      cls += ' datatable-row-odd';\n    }\n    if (this.rowIndex % 2 === 0) {\n      cls += ' datatable-row-even';\n    }\n\n    if (this.rowClass) {\n      const res = this.rowClass(this.row);\n      if (typeof res === 'string') {\n        cls += ` ${res}`;\n      } else if (typeof res === 'object') {\n        const keys = Object.keys(res);\n        for (const k of keys) {\n          if (res[k] === true) {\n            cls += ` ${k}`;\n          }\n        }\n      }\n    }\n\n    return cls;\n  }\n\n  @HostBinding('style.height.px')\n  @Input()\n  rowHeight: number;\n\n  @HostBinding('style.width.px')\n  get columnsTotalWidths(): string {\n    return this._columnGroupWidths.total;\n  }\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  _element: any;\n  _columnGroupWidths: any;\n  _columnsByPin: any;\n  _offsetX: number;\n  _columns: any[];\n  _innerWidth: number;\n  _groupStyles: { [prop: string]: {} } = {\n    left: {},\n    center: {},\n    right: {}\n  };\n\n  private _rowDiffer: KeyValueDiffer<{}, {}>;\n\n  constructor(\n    private differs: KeyValueDiffers,\n    @SkipSelf() private scrollbarHelper: ScrollbarHelper,\n    private cd: ChangeDetectorRef,\n    element: ElementRef\n  ) {\n    this._element = element.nativeElement;\n    this._rowDiffer = differs.find({}).create();\n  }\n\n  ngDoCheck(): void {\n    if (this._rowDiffer.diff(this.row)) {\n      this.cd.markForCheck();\n    }\n  }\n\n  trackByGroups(index: number, colGroup: any): any {\n    return colGroup.type;\n  }\n\n  columnTrackingFn(index: number, column: any): any {\n    return column.$$id;\n  }\n\n  buildStylesByGroup() {\n    this._groupStyles.left = this.calcStylesByGroup('left');\n    this._groupStyles.center = this.calcStylesByGroup('center');\n    this._groupStyles.right = this.calcStylesByGroup('right');\n    this.cd.markForCheck();\n  }\n\n  calcStylesByGroup(group: string) {\n    const widths = this._columnGroupWidths;\n    const offsetX = this.offsetX;\n\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'left') {\n      translateXY(styles, offsetX, 0);\n    } else if (group === 'right') {\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\n      const totalDiff = widths.total - bodyWidth;\n      const offsetDiff = totalDiff - offsetX;\n      const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n\n  onActivate(event: any, index: number): void {\n    event.cellIndex = index;\n    event.rowElement = this._element;\n    this.activate.emit(event);\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isTargetRow = event.target === this._element;\n\n    const isAction =\n      keyCode === Keys.return ||\n      keyCode === Keys.down ||\n      keyCode === Keys.up ||\n      keyCode === Keys.left ||\n      keyCode === Keys.right;\n\n    if (isAction && isTargetRow) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        rowElement: this._element\n      });\n    }\n  }\n\n  @HostListener('mouseenter', ['$event'])\n  onMouseenter(event: any): void {\n    this.activate.emit({\n      type: 'mouseenter',\n      event,\n      row: this.row,\n      rowElement: this._element\n    });\n  }\n\n  recalculateColumns(val: any[] = this.columns): void {\n    this._columns = val;\n    const colsByPin = columnsByPin(this._columns);\n    this._columnsByPin = columnsByPinArr(this._columns);\n    this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n  }\n\n  onTreeAction() {\n    this.treeAction.emit();\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  DoCheck,\n  ChangeDetectionStrategy,\n  KeyValueDiffer,\n  ChangeDetectorRef,\n  KeyValueDiffers\n} from '@angular/core';\n\n@Component({\n  selector: 'datatable-row-wrapper',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `,\n  host: {\n    class: 'datatable-row-wrapper'\n  }\n})\nexport class DataTableRowWrapperComponent implements DoCheck {\n  @Input() innerWidth: number;\n  @Input() rowDetail: any;\n  @Input() groupHeader: any;\n  @Input() offsetX: number;\n  @Input() detailRowHeight: any;\n  @Input() row: any;\n  @Input() groupedRows: any;\n  @Output() rowContextmenu = new EventEmitter<{ event: MouseEvent; row: any }>(false);\n\n  @Input() set rowIndex(val: number) {\n    this._rowIndex = val;\n    this.rowContext.rowIndex = val;\n    this.groupContext.rowIndex = val;\n    this.cd.markForCheck();\n  }\n\n  get rowIndex(): number {\n    return this._rowIndex;\n  }\n\n  @Input() set expanded(val: boolean) {\n    this._expanded = val;\n    this.groupContext.expanded = val;\n    this.rowContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  groupContext: any = {\n    group: this.row,\n    expanded: this.expanded,\n    rowIndex: this.rowIndex\n  };\n\n  rowContext: any = {\n    row: this.row,\n    expanded: this.expanded,\n    rowIndex: this.rowIndex\n  };\n\n  private rowDiffer: KeyValueDiffer<{}, {}>;\n  private _expanded: boolean = false;\n  private _rowIndex: number;\n\n  constructor(private cd: ChangeDetectorRef, private differs: KeyValueDiffers) {\n    this.rowDiffer = differs.find({}).create();\n  }\n\n  ngDoCheck(): void {\n    if (this.rowDiffer.diff(this.row)) {\n      this.rowContext.row = this.row;\n      this.groupContext.group = this.row;\n      this.cd.markForCheck();\n    }\n  }\n\n  @HostListener('contextmenu', ['$event'])\n  onContextmenu($event: MouseEvent): void {\n    this.rowContextmenu.emit({ event: $event, row: this.row });\n  }\n\n  getGroupHeaderStyle(): any {\n    const styles = {};\n\n    styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n    styles['backface-visibility'] = 'hidden';\n    styles['width'] = this.innerWidth;\n\n    return styles;\n  }\n}\n","import {\n  Component,\n  Input,\n  PipeTransform,\n  HostBinding,\n  ViewChild,\n  ChangeDetectorRef,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  ViewContainerRef,\n  OnDestroy,\n  DoCheck,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { TableColumn } from '../../types/table-column.type';\nimport { SortDirection } from '../../types/sort-direction.type';\nimport { Keys } from '../../utils/keys';\n\nexport type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';\n\n@Component({\n  selector: 'datatable-body-cell',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `\n})\nexport class DataTableBodyCellComponent implements DoCheck, OnDestroy {\n  @Input() displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;\n\n  @Input() set group(group: any) {\n    this._group = group;\n    this.cellContext.group = group;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get group() {\n    return this._group;\n  }\n\n  @Input() set rowHeight(val: number) {\n    this._rowHeight = val;\n    this.cellContext.rowHeight = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  @Input() set isSelected(val: boolean) {\n    this._isSelected = val;\n    this.cellContext.isSelected = val;\n    this.cd.markForCheck();\n  }\n\n  get isSelected(): boolean {\n    return this._isSelected;\n  }\n\n  @Input() set expanded(val: boolean) {\n    this._expanded = val;\n    this.cellContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded(): boolean {\n    return this._expanded;\n  }\n\n  @Input() set rowIndex(val: number) {\n    this._rowIndex = val;\n    this.cellContext.rowIndex = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowIndex(): number {\n    return this._rowIndex;\n  }\n\n  @Input() set column(column: TableColumn) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get column(): TableColumn {\n    return this._column;\n  }\n\n  @Input() set row(row: any) {\n    this._row = row;\n    this.cellContext.row = row;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get row(): any {\n    return this._row;\n  }\n\n  @Input() set sorts(val: any[]) {\n    this._sorts = val;\n    this.calcSortDir = this.calcSortDir(val);\n  }\n\n  get sorts(): any[] {\n    return this._sorts;\n  }\n\n  @Input() set treeStatus(status: TreeStatus) {\n    if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n      this._treeStatus = 'collapsed';\n    } else {\n      this._treeStatus = status;\n    }\n    this.cellContext.treeStatus = this._treeStatus;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get treeStatus(): TreeStatus {\n    return this._treeStatus;\n  }\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n\n  @Output() treeAction: EventEmitter<any> = new EventEmitter();\n\n  @ViewChild('cellTemplate', { read: ViewContainerRef, static: true })\n  cellTemplate: ViewContainerRef;\n\n  @HostBinding('class')\n  get columnCssClasses(): any {\n    let cls = 'datatable-body-cell';\n    if (this.column.cellClass) {\n      if (typeof this.column.cellClass === 'string') {\n        cls += ' ' + this.column.cellClass;\n      } else if (typeof this.column.cellClass === 'function') {\n        const res = this.column.cellClass({\n          row: this.row,\n          group: this.group,\n          column: this.column,\n          value: this.value,\n          rowHeight: this.rowHeight\n        });\n\n        if (typeof res === 'string') {\n          cls += ' ' + res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n          for (const k of keys) {\n            if (res[k] === true) {\n              cls += ` ${k}`;\n            }\n          }\n        }\n      }\n    }\n    if (!this.sortDir) {\n      cls += ' sort-active';\n    }\n    if (this.isFocused) {\n      cls += ' active';\n    }\n    if (this.sortDir === SortDirection.asc) {\n      cls += ' sort-asc';\n    }\n    if (this.sortDir === SortDirection.desc) {\n      cls += ' sort-desc';\n    }\n\n    return cls;\n  }\n\n  @HostBinding('style.width.px')\n  get width(): number {\n    return this.column.width;\n  }\n\n  @HostBinding('style.minWidth.px')\n  get minWidth(): number {\n    return this.column.minWidth;\n  }\n\n  @HostBinding('style.maxWidth.px')\n  get maxWidth(): number {\n    return this.column.maxWidth;\n  }\n\n  @HostBinding('style.height')\n  get height(): string | number {\n    const height = this.rowHeight;\n    if (isNaN(height)) {\n      return height;\n    }\n    return height + 'px';\n  }\n\n  sanitizedValue: any;\n  value: any;\n  sortDir: SortDirection;\n  isFocused = false;\n  onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n  activateFn = this.activate.emit.bind(this.activate);\n\n  cellContext: any = {\n    onCheckboxChangeFn: this.onCheckboxChangeFn,\n    activateFn: this.activateFn,\n    row: this.row,\n    group: this.group,\n    value: this.value,\n    column: this.column,\n    rowHeight: this.rowHeight,\n    isSelected: this.isSelected,\n    rowIndex: this.rowIndex,\n    treeStatus: this.treeStatus,\n    onTreeAction: this.onTreeAction.bind(this)\n  };\n\n  private _isSelected: boolean;\n  private _sorts: any[];\n  private _column: TableColumn;\n  private _row: any;\n  private _group: any;\n  private _rowHeight: number;\n  private _rowIndex: number;\n  private _expanded: boolean;\n  private _element: any;\n  private _treeStatus: TreeStatus;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this._element = element.nativeElement;\n  }\n\n  ngDoCheck(): void {\n    this.checkValueUpdates();\n  }\n\n  ngOnDestroy(): void {\n    if (this.cellTemplate) {\n      this.cellTemplate.clear();\n    }\n  }\n\n  checkValueUpdates(): void {\n    let value = '';\n\n    if (!this.row || !this.column) {\n      value = '';\n    } else {\n      const val = this.column.$$valueGetter(this.row, this.column.prop);\n      const userPipe: PipeTransform = this.column.pipe;\n\n      if (userPipe) {\n        value = userPipe.transform(val);\n      } else if (value !== undefined) {\n        value = val;\n      }\n    }\n\n    if (this.value !== value) {\n      this.value = value;\n      this.cellContext.value = value;\n      this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n      this.cd.markForCheck();\n    }\n  }\n\n  @HostListener('focus')\n  onFocus(): void {\n    this.isFocused = true;\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    this.isFocused = false;\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): void {\n    this.activate.emit({\n      type: 'click',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  @HostListener('dblclick', ['$event'])\n  onDblClick(event: MouseEvent): void {\n    this.activate.emit({\n      type: 'dblclick',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  @HostListener('keydown', ['$event'])\n  onKeyDown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isTargetCell = event.target === this._element;\n\n    const isAction =\n      keyCode === Keys.return ||\n      keyCode === Keys.down ||\n      keyCode === Keys.up ||\n      keyCode === Keys.left ||\n      keyCode === Keys.right;\n\n    if (isAction && isTargetCell) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        group: this.group,\n        rowHeight: this.rowHeight,\n        column: this.column,\n        value: this.value,\n        cellElement: this._element\n      });\n    }\n  }\n\n  onCheckboxChange(event: any): void {\n    this.activate.emit({\n      type: 'checkbox',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element,\n      treeStatus: 'collapsed'\n    });\n  }\n\n  calcSortDir(sorts: any[]): any {\n    if (!sorts) {\n      return;\n    }\n\n    const sort = sorts.find((s: any) => {\n      return s.prop === this.column.prop;\n    });\n\n    if (sort) {\n      return sort.dir;\n    }\n  }\n\n  stripHtml(html: string): string {\n    if (!html.replace) {\n      return html;\n    }\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\n  }\n\n  onTreeAction() {\n    this.treeAction.emit(this.row);\n  }\n\n  calcLeftMargin(column: any, row: any) {\n    const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n    return column.isTreeColumn ? row.level * levelIndent : 0;\n  }\n}\n","export function selectRows(selected: any[], row: any, comparefn: any) {\n  const selectedIndex = comparefn(row, selected);\n\n  if (selectedIndex > -1) {\n    selected.splice(selectedIndex, 1);\n  } else {\n    selected.push(row);\n  }\n\n  return selected;\n}\n\nexport function selectRowsBetween(\n  selected: any[],\n  rows: any[],\n  index: number,\n  prevIndex: number,\n  comparefn: any\n): any[] {\n  const reverse = index < prevIndex;\n\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const greater = i >= prevIndex && i <= index;\n    const lesser = i <= prevIndex && i >= index;\n\n    let range = { start: 0, end: 0 };\n    if (reverse) {\n      range = {\n        start: index,\n        end: prevIndex\n      };\n    } else {\n      range = {\n        start: prevIndex,\n        end: index + 1\n      };\n    }\n\n    if ((reverse && lesser) || (!reverse && greater)) {\n      // if in the positive range to be added to `selected`, and\n      // not already in the selected array, add it\n      if (i >= range.start && i <= range.end) {\n        selected.push(row);\n      }\n    }\n  }\n\n  return selected;\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport { SelectionType } from '../../types/selection.type';\nimport { selectRowsBetween, selectRows } from '../../utils/selection';\nimport { Keys } from '../../utils/keys';\n\nexport interface Model {\n  type: string;\n  event: MouseEvent | KeyboardEvent;\n  row: any;\n  rowElement: any;\n  cellElement: any;\n  cellIndex: number;\n}\n\n@Component({\n  selector: 'datatable-selection',\n  template: ` <ng-content></ng-content> `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DataTableSelectionComponent {\n  @Input() rows: any[];\n  @Input() selected: any[];\n  @Input() selectEnabled: boolean;\n  @Input() selectionType: SelectionType;\n  @Input() rowIdentity: any;\n  @Input() selectCheck: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() select: EventEmitter<any> = new EventEmitter();\n\n  prevIndex: number;\n\n  selectRow(event: KeyboardEvent | MouseEvent, index: number, row: any): void {\n    if (!this.selectEnabled) return;\n\n    const chkbox = this.selectionType === SelectionType.checkbox;\n    const multi = this.selectionType === SelectionType.multi;\n    const multiClick = this.selectionType === SelectionType.multiClick;\n    let selected: any[] = [];\n\n    if (multi || chkbox || multiClick) {\n      if (event.shiftKey) {\n        selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n      } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n        selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\n      } else {\n        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n      }\n    } else {\n      selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n    }\n\n    if (typeof this.selectCheck === 'function') {\n      selected = selected.filter(this.selectCheck.bind(this));\n    }\n\n    this.selected.splice(0, this.selected.length);\n    this.selected.push(...selected);\n\n    this.prevIndex = index;\n\n    this.select.emit({\n      selected\n    });\n  }\n\n  onActivate(model: Model, index: number): void {\n    const { type, event, row } = model;\n    const chkbox = this.selectionType === SelectionType.checkbox;\n    const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\n\n    if (select) {\n      this.selectRow(event, index, row);\n    } else if (type === 'keydown') {\n      if ((<KeyboardEvent>event).keyCode === Keys.return) {\n        this.selectRow(event, index, row);\n      } else {\n        this.onKeyboardFocus(model);\n      }\n    }\n    this.activate.emit(model);\n  }\n\n  onKeyboardFocus(model: Model): void {\n    const { keyCode } = <KeyboardEvent>model.event;\n    const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\n\n    if (shouldFocus) {\n      const isCellSelection = this.selectionType === SelectionType.cell;\n\n      if (!model.cellElement || !isCellSelection) {\n        this.focusRow(model.rowElement, keyCode);\n      } else if (isCellSelection) {\n        this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n      }\n    }\n  }\n\n  focusRow(rowElement: any, keyCode: number): void {\n    const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n    if (nextRowElement) nextRowElement.focus();\n  }\n\n  getPrevNextRow(rowElement: any, keyCode: number): any {\n    const parentElement = rowElement.parentElement;\n\n    if (parentElement) {\n      let focusElement: HTMLElement;\n      if (keyCode === Keys.up) {\n        focusElement = parentElement.previousElementSibling;\n      } else if (keyCode === Keys.down) {\n        focusElement = parentElement.nextElementSibling;\n      }\n\n      if (focusElement && focusElement.children.length) {\n        return focusElement.children[0];\n      }\n    }\n  }\n\n  focusCell(cellElement: any, rowElement: any, keyCode: number, cellIndex: number): void {\n    let nextCellElement: HTMLElement;\n\n    if (keyCode === Keys.left) {\n      nextCellElement = cellElement.previousElementSibling;\n    } else if (keyCode === Keys.right) {\n      nextCellElement = cellElement.nextElementSibling;\n    } else if (keyCode === Keys.up || keyCode === Keys.down) {\n      const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n      if (nextRowElement) {\n        const children = nextRowElement.getElementsByClassName('datatable-body-cell');\n        if (children.length) nextCellElement = children[cellIndex];\n      }\n    }\n\n    if (nextCellElement) nextCellElement.focus();\n  }\n\n  getRowSelected(row: any): boolean {\n    return this.getRowSelectedIdx(row, this.selected) > -1;\n  }\n\n  getRowSelectedIdx(row: any, selected: any[]): number {\n    if (!selected || !selected.length) return -1;\n\n    const rowId = this.rowIdentity(row);\n    return selected.findIndex(r => {\n      const id = this.rowIdentity(r);\n      return id === rowId;\n    });\n  }\n}\n","import { Component, Input, OnChanges, PipeTransform, TemplateRef } from '@angular/core';\n\nexport interface ISummaryColumn {\n  summaryFunc?: (cells: any[]) => any;\n  summaryTemplate?: TemplateRef<any>;\n\n  prop: string;\n  pipe?: PipeTransform;\n}\n\nfunction defaultSumFunc(cells: any[]): any {\n  const cellsWithValues = cells.filter(cell => !!cell);\n\n  if (!cellsWithValues.length) {\n    return null;\n  }\n  if (cellsWithValues.some(cell => typeof cell !== 'number')) {\n    return null;\n  }\n\n  return cellsWithValues.reduce((res, cell) => res + cell);\n}\n\nfunction noopSumFunc(cells: any[]): void {\n  return null;\n}\n\n@Component({\n  selector: 'datatable-summary-row',\n  template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `,\n  host: {\n    class: 'datatable-summary-row'\n  }\n})\nexport class DataTableSummaryRowComponent implements OnChanges {\n  @Input() rows: any[];\n  @Input() columns: ISummaryColumn[];\n\n  @Input() rowHeight: number;\n  @Input() offsetX: number;\n  @Input() innerWidth: number;\n\n  _internalColumns: ISummaryColumn[];\n  summaryRow: any = {};\n\n  ngOnChanges() {\n    if (!this.columns || !this.rows) {\n      return;\n    }\n    this.updateInternalColumns();\n    this.updateValues();\n  }\n\n  private updateInternalColumns() {\n    this._internalColumns = this.columns.map(col => ({\n      ...col,\n      cellTemplate: col.summaryTemplate\n    }));\n  }\n\n  private updateValues() {\n    this.summaryRow = {};\n\n    this.columns\n      .filter(col => !col.summaryTemplate)\n      .forEach(col => {\n        const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\n        const sumFunc = this.getSummaryFunction(col);\n\n        this.summaryRow[col.prop] = col.pipe\n          ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\n          : sumFunc(cellsFromSingleColumn);\n      });\n  }\n\n  private getSummaryFunction(column: ISummaryColumn): (a: any[]) => any {\n    if (column.summaryFunc === undefined) {\n      return defaultSumFunc;\n    } else if (column.summaryFunc === null) {\n      return noopSumFunc;\n    } else {\n      return column.summaryFunc;\n    }\n  }\n}\n","export enum ClickType {\n  single = 'single',\n  double = 'double'\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ScrollbarHelper } from './services/scrollbar-helper.service';\nimport { DimensionsHelper } from './services/dimensions-helper.service';\nimport { ColumnChangesService } from './services/column-changes.service';\nimport { DataTableFooterTemplateDirective } from './components/footer/footer-template.directive';\nimport { VisibilityDirective } from './directives/visibility.directive';\nimport { DraggableDirective } from './directives/draggable.directive';\nimport { ResizeableDirective } from './directives/resizeable.directive';\nimport { OrderableDirective } from './directives/orderable.directive';\nimport { LongPressDirective } from './directives/long-press.directive';\nimport { ScrollerComponent } from './components/body/scroller.component';\nimport { DatatableComponent } from './components/datatable.component';\nimport { DataTableColumnDirective } from './components/columns/column.directive';\nimport { DataTableHeaderComponent } from './components/header/header.component';\nimport { DataTableHeaderCellComponent } from './components/header/header-cell.component';\nimport { DataTableBodyComponent } from './components/body/body.component';\nimport { DataTableFooterComponent } from './components/footer/footer.component';\nimport { DataTablePagerComponent } from './components/footer/pager.component';\nimport { ProgressBarComponent } from './components/body/progress-bar.component';\nimport { DataTableBodyRowComponent } from './components/body/body-row.component';\nimport { DataTableRowWrapperComponent } from './components/body/body-row-wrapper.component';\nimport { DatatableRowDetailDirective } from './components/row-detail/row-detail.directive';\nimport { DatatableGroupHeaderDirective } from './components/body/body-group-header.directive';\nimport { DatatableRowDetailTemplateDirective } from './components/row-detail/row-detail-template.directive';\nimport { DataTableBodyCellComponent } from './components/body/body-cell.component';\nimport { DataTableSelectionComponent } from './components/body/selection.component';\nimport { DataTableColumnHeaderDirective } from './components/columns/column-header.directive';\nimport { DataTableColumnCellDirective } from './components/columns/column-cell.directive';\nimport { DataTableColumnCellTreeToggle } from './components/columns/tree.directive';\nimport { DatatableFooterDirective } from './components/footer/footer.directive';\nimport { DatatableGroupHeaderTemplateDirective } from './components/body/body-group-header-template.directive';\nimport { DataTableSummaryRowComponent } from './components/body/summary/summary-row.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n  declarations: [\n    DataTableFooterTemplateDirective,\n    VisibilityDirective,\n    DraggableDirective,\n    ResizeableDirective,\n    OrderableDirective,\n    LongPressDirective,\n    ScrollerComponent,\n    DatatableComponent,\n    DataTableColumnDirective,\n    DataTableHeaderComponent,\n    DataTableHeaderCellComponent,\n    DataTableBodyComponent,\n    DataTableFooterComponent,\n    DataTablePagerComponent,\n    ProgressBarComponent,\n    DataTableBodyRowComponent,\n    DataTableRowWrapperComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableBodyCellComponent,\n    DataTableSelectionComponent,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DatatableFooterDirective,\n    DatatableGroupHeaderTemplateDirective,\n    DataTableSummaryRowComponent\n  ],\n  exports: [\n    DatatableComponent,\n    DatatableRowDetailDirective,\n    DatatableGroupHeaderDirective,\n    DatatableRowDetailTemplateDirective,\n    DataTableColumnDirective,\n    DataTableColumnHeaderDirective,\n    DataTableColumnCellDirective,\n    DataTableColumnCellTreeToggle,\n    DataTableFooterTemplateDirective,\n    DatatableFooterDirective,\n    DataTablePagerComponent,\n    DatatableGroupHeaderTemplateDirective\n  ]\n})\nexport class NgxDatatableModule {\n  /**\n   * Configure global configuration via INgxDatatableConfig\n   * @param configuration\n   */\n  static forRoot(configuration: INgxDatatableConfig): ModuleWithProviders<NgxDatatableModule> {\n    return {\n      ngModule: NgxDatatableModule,\n      providers: [{ provide: 'configuration', useValue: configuration }]\n    };\n  }\n}\n\n/**\n * Interface definition for INgxDatatableConfig global configuration\n */\nexport interface INgxDatatableConfig {\n  messages: {\n    emptyMessage: string; // Message to show when array is presented, but contains no values\n    totalMessage: string; // Footer total message\n    selectedMessage: string; // Footer selected message\n  };\n}\n","if (typeof document !== 'undefined' && !document.elementsFromPoint) {\n  document.elementsFromPoint = elementsFromPoint;\n}\n\n/*tslint:disable*/\n/**\n * Polyfill for `elementsFromPoint`\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\n * https://gist.github.com/oslego/7265412\n */\nexport function elementsFromPoint(x: number, y: number) {\n  const elements = [];\n  const previousPointerEvents = [];\n  let current: any; // TODO: window.getComputedStyle should be used with inferred type (Element)\n  let i;\n  let d;\n\n  //if (document === undefined) return elements;\n\n  // get all elements via elementFromPoint, and remove them from hit-testing in order\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\n    // push the element and its current style\n    elements.push(current);\n    previousPointerEvents.push({\n      value: current.style.getPropertyValue('pointer-events'),\n      priority: current.style.getPropertyPriority('pointer-events')\n    });\n\n    // add \"pointer-events: none\", to get to the underlying element\n    current.style.setProperty('pointer-events', 'none', 'important');\n  }\n\n  // restore the previous pointer-events values\n  for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]); ) {\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n  }\n\n  // return our results\n  return elements;\n}\n/*tslint:enable*/\n"]}