{"version":3,"file":"body.component.d.ts","sources":["body.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ChangeDetectorRef, OnInit, OnDestroy } from '@angular/core';\nimport { ScrollerComponent } from './scroller.component';\nimport { SelectionType } from '../../types/selection.type';\nimport { RowHeightCache } from '../../utils/row-height-cache';\nexport declare class DataTableBodyComponent implements OnInit, OnDestroy {\n    private cd;\n    scrollbarV: boolean;\n    scrollbarH: boolean;\n    loadingIndicator: boolean;\n    externalPaging: boolean;\n    rowHeight: number | 'auto' | ((row?: any) => number);\n    offsetX: number;\n    emptyMessage: string;\n    selectionType: SelectionType;\n    selected: any[];\n    rowIdentity: any;\n    rowDetail: any;\n    groupHeader: any;\n    selectCheck: any;\n    displayCheck: any;\n    trackByProp: string;\n    rowClass: any;\n    groupedRows: any;\n    groupExpansionDefault: boolean;\n    innerWidth: number;\n    groupRowsBy: string;\n    virtualization: boolean;\n    summaryRow: boolean;\n    summaryPosition: string;\n    summaryHeight: number;\n    set pageSize(val: number);\n    get pageSize(): number;\n    set rows(val: any[]);\n    get rows(): any[];\n    set columns(val: any[]);\n    get columns(): any[];\n    set offset(val: number);\n    get offset(): number;\n    set rowCount(val: number);\n    get rowCount(): number;\n    get bodyWidth(): string;\n    set bodyHeight(val: any);\n    get bodyHeight(): any;\n    scroll: EventEmitter<any>;\n    page: EventEmitter<any>;\n    activate: EventEmitter<any>;\n    select: EventEmitter<any>;\n    detailToggle: EventEmitter<any>;\n    rowContextmenu: EventEmitter<{\n        event: MouseEvent;\n        row: any;\n    }>;\n    treeAction: EventEmitter<any>;\n    scroller: ScrollerComponent;\n    /**\n     * Returns if selection is enabled.\n     */\n    get selectEnabled(): boolean;\n    /**\n     * Property that would calculate the height of scroll bar\n     * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n     * calculate scroll height automatically (as height will be undefined).\n     */\n    get scrollHeight(): number | undefined;\n    rowHeightsCache: RowHeightCache;\n    temp: any[];\n    offsetY: number;\n    indexes: any;\n    columnGroupWidths: any;\n    columnGroupWidthsWithoutGroup: any;\n    rowTrackingFn: any;\n    listener: any;\n    rowIndexes: any;\n    rowExpansions: any[];\n    _rows: any[];\n    _bodyHeight: any;\n    _columns: any[];\n    _rowCount: number;\n    _offset: number;\n    _pageSize: number;\n    /**\n     * Creates an instance of DataTableBodyComponent.\n     */\n    constructor(cd: ChangeDetectorRef);\n    /**\n     * Called after the constructor, initializing input properties\n     */\n    ngOnInit(): void;\n    /**\n     * Called once, before the instance is destroyed.\n     */\n    ngOnDestroy(): void;\n    /**\n     * Updates the Y offset given a new offset.\n     */\n    updateOffsetY(offset?: number): void;\n    /**\n     * Body was scrolled, this is mainly useful for\n     * when a user is server-side pagination via virtual scroll.\n     */\n    onBodyScroll(event: any): void;\n    /**\n     * Updates the page given a direction.\n     */\n    updatePage(direction: string): void;\n    /**\n     * Updates the rows in the view port\n     */\n    updateRows(): void;\n    /**\n     * Get the row height\n     */\n    getRowHeight(row: any): number;\n    /**\n     * @param group the group with all rows\n     */\n    getGroupHeight(group: any): number;\n    /**\n     * Calculate row height based on the expanded state of the row.\n     */\n    getRowAndDetailHeight(row: any): number;\n    /**\n     * Get the height of the detail row.\n     */\n    getDetailRowHeight: (row?: any, index?: any) => number;\n    /**\n     * Calculates the styles for the row so that the rows can be moved in 2D space\n     * during virtual scroll inside the DOM.   In the below case the Y position is\n     * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n     * 100 px then following styles are generated:\n     *\n     * transform: translate3d(0px, 0px, 0px);    ->  row0\n     * transform: translate3d(0px, 30px, 0px);   ->  row1\n     * transform: translate3d(0px, 130px, 0px);  ->  row2\n     *\n     * Row heights have to be calculated based on the row heights cache as we wont\n     * be able to determine which row is of what height before hand.  In the above\n     * case the positionY of the translate3d for row2 would be the sum of all the\n     * heights of the rows before it (i.e. row0 and row1).\n     *\n     * @param rows the row that needs to be placed in the 2D space.\n     * @returns the CSS3 style to be applied\n     *\n     * @memberOf DataTableBodyComponent\n     */\n    getRowsStyles(rows: any): any;\n    /**\n     * Calculate bottom summary row offset for scrollbar mode.\n     * For more information about cache and offset calculation\n     * see description for `getRowsStyles` method\n     *\n     * @returns the CSS3 style to be applied\n     *\n     * @memberOf DataTableBodyComponent\n     */\n    getBottomSummaryRowStyles(): any;\n    /**\n     * Hides the loading indicator\n     */\n    hideIndicator(): void;\n    /**\n     * Updates the index of the rows in the viewport\n     */\n    updateIndexes(): void;\n    /**\n     * Refreshes the full Row Height cache.  Should be used\n     * when the entire row array state has changed.\n     */\n    refreshRowHeightCache(): void;\n    /**\n     * Gets the index for the view port\n     */\n    getAdjustedViewPortIndex(): number;\n    /**\n     * Toggle the Expansion of the row i.e. if the row is expanded then it will\n     * collapse and vice versa.   Note that the expanded status is stored as\n     * a part of the row object itself as we have to preserve the expanded row\n     * status in case of sorting and filtering of the row set.\n     */\n    toggleRowExpansion(row: any): void;\n    /**\n     * Expand/Collapse all the rows no matter what their state is.\n     */\n    toggleAllRows(expanded: boolean): void;\n    /**\n     * Recalculates the table\n     */\n    recalcLayout(): void;\n    /**\n     * Tracks the column\n     */\n    columnTrackingFn(index: number, column: any): any;\n    /**\n     * Gets the row pinning group styles\n     */\n    stylesByGroup(group: string): {\n        width: string;\n    };\n    /**\n     * Returns if the row was expanded and set default row expansion when row expansion is empty\n     */\n    getRowExpanded(row: any): boolean;\n    getRowExpandedIdx(row: any, expanded: any[]): number;\n    /**\n     * Gets the row index given a row\n     */\n    getRowIndex(row: any): number;\n    onTreeAction(row: any): void;\n}\n"]}