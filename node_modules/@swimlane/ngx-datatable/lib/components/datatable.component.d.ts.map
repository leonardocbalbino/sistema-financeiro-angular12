{"version":3,"file":"datatable.component.d.ts","sources":["datatable.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnInit, QueryList, AfterViewInit, DoCheck, KeyValueDiffers, KeyValueDiffer, ChangeDetectorRef } from '@angular/core';\nimport { DatatableGroupHeaderDirective } from './body/body-group-header.directive';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { INgxDatatableConfig } from '../ngx-datatable.module';\nimport { TableColumn } from '../types/table-column.type';\nimport { ColumnMode } from '../types/column-mode.type';\nimport { SelectionType } from '../types/selection.type';\nimport { SortType } from '../types/sort.type';\nimport { ContextmenuType } from '../types/contextmenu.type';\nimport { DataTableColumnDirective } from './columns/column.directive';\nimport { DatatableRowDetailDirective } from './row-detail/row-detail.directive';\nimport { DatatableFooterDirective } from './footer/footer.directive';\nimport { DataTableBodyComponent } from './body/body.component';\nimport { DataTableHeaderComponent } from './header/header.component';\nimport { ScrollbarHelper } from '../services/scrollbar-helper.service';\nimport { ColumnChangesService } from '../services/column-changes.service';\nimport { DimensionsHelper } from '../services/dimensions-helper.service';\nexport declare class DatatableComponent implements OnInit, DoCheck, AfterViewInit {\n    private scrollbarHelper;\n    private dimensionsHelper;\n    private cd;\n    private columnChangesService;\n    private configuration;\n    /**\n     * Template for the target marker of drag target columns.\n     */\n    targetMarkerTemplate: any;\n    /**\n     * Rows that are displayed in the table.\n     */\n    set rows(val: any);\n    /**\n     * Gets the rows.\n     */\n    get rows(): any;\n    /**\n     * This attribute allows the user to set the name of the column to group the data with\n     */\n    set groupRowsBy(val: string);\n    get groupRowsBy(): string;\n    /**\n     * This attribute allows the user to set a grouped array in the following format:\n     *  [\n     *    {groupid=1} [\n     *      {id=1 name=\"test1\"},\n     *      {id=2 name=\"test2\"},\n     *      {id=3 name=\"test3\"}\n     *    ]},\n     *    {groupid=2>[\n     *      {id=4 name=\"test4\"},\n     *      {id=5 name=\"test5\"},\n     *      {id=6 name=\"test6\"}\n     *    ]}\n     *  ]\n     */\n    groupedRows: any[];\n    /**\n     * Columns to be displayed.\n     */\n    set columns(val: TableColumn[]);\n    /**\n     * Get the columns.\n     */\n    get columns(): TableColumn[];\n    /**\n     * List of row objects that should be\n     * represented as selected in the grid.\n     * Default value: `[]`\n     */\n    selected: any[];\n    /**\n     * Enable vertical scrollbars\n     */\n    scrollbarV: boolean;\n    /**\n     * Enable horz scrollbars\n     */\n    scrollbarH: boolean;\n    /**\n     * The row height; which is necessary\n     * to calculate the height for the lazy rendering.\n     */\n    rowHeight: number | 'auto' | ((row?: any) => number);\n    /**\n     * Type of column width distribution formula.\n     * Example: flex, force, standard\n     */\n    columnMode: ColumnMode | keyof typeof ColumnMode;\n    /**\n     * The minimum header height in pixels.\n     * Pass a falsey for no header\n     */\n    headerHeight: number;\n    /**\n     * The minimum footer height in pixels.\n     * Pass falsey for no footer\n     */\n    footerHeight: number;\n    /**\n     * If the table should use external paging\n     * otherwise its assumed that all data is preloaded.\n     */\n    externalPaging: boolean;\n    /**\n     * If the table should use external sorting or\n     * the built-in basic sorting.\n     */\n    externalSorting: boolean;\n    /**\n     * The page size to be shown.\n     * Default value: `undefined`\n     */\n    set limit(val: number | undefined);\n    /**\n     * Gets the limit.\n     */\n    get limit(): number | undefined;\n    /**\n     * The total count of all rows.\n     * Default value: `0`\n     */\n    set count(val: number);\n    /**\n     * Gets the count.\n     */\n    get count(): number;\n    /**\n     * The current offset ( page - 1 ) shown.\n     * Default value: `0`\n     */\n    set offset(val: number);\n    get offset(): number;\n    /**\n     * Show the linear loading bar.\n     * Default value: `false`\n     */\n    loadingIndicator: boolean;\n    /**\n     * Type of row selection. Options are:\n     *\n     *  - `single`\n     *  - `multi`\n     *  - `checkbox`\n     *  - `multiClick`\n     *  - `cell`\n     *\n     * For no selection pass a `falsey`.\n     * Default value: `undefined`\n     */\n    selectionType: SelectionType;\n    /**\n     * Enable/Disable ability to re-order columns\n     * by dragging them.\n     */\n    reorderable: boolean;\n    /**\n     * Swap columns on re-order columns or\n     * move them.\n     */\n    swapColumns: boolean;\n    /**\n     * The type of sorting\n     */\n    sortType: SortType;\n    /**\n     * Array of sorted columns by property and type.\n     * Default value: `[]`\n     */\n    sorts: any[];\n    /**\n     * Css class overrides\n     */\n    cssClasses: any;\n    /**\n     * Message overrides for localization\n     *\n     * emptyMessage     [default] = 'No data to display'\n     * totalMessage     [default] = 'total'\n     * selectedMessage  [default] = 'selected'\n     */\n    messages: any;\n    /**\n     * Row specific classes.\n     * Similar implementation to ngClass.\n     *\n     *  [rowClass]=\"'first second'\"\n     *  [rowClass]=\"{ 'first': true, 'second': true, 'third': false }\"\n     */\n    rowClass: any;\n    /**\n     * A boolean/function you can use to check whether you want\n     * to select a particular row based on a criteria. Example:\n     *\n     *    (selection) => {\n     *      return selection !== 'Ethel Price';\n     *    }\n     */\n    selectCheck: any;\n    /**\n     * A function you can use to check whether you want\n     * to show the checkbox for a particular row based on a criteria. Example:\n     *\n     *    (row, column, value) => {\n     *      return row.name !== 'Ethel Price';\n     *    }\n     */\n    displayCheck: (row: any, column?: any, value?: any) => boolean;\n    /**\n     * A boolean you can use to set the detault behaviour of rows and groups\n     * whether they will start expanded or not. If ommited the default is NOT expanded.\n     *\n     */\n    groupExpansionDefault: boolean;\n    /**\n     * Property to which you can use for custom tracking of rows.\n     * Example: 'name'\n     */\n    trackByProp: string;\n    /**\n     * Property to which you can use for determining select all\n     * rows on current page or not.\n     *\n     * @memberOf DatatableComponent\n     */\n    selectAllRowsOnPage: boolean;\n    /**\n     * A flag for row virtualization on / off\n     */\n    virtualization: boolean;\n    /**\n     * Tree from relation\n     */\n    treeFromRelation: string;\n    /**\n     * Tree to relation\n     */\n    treeToRelation: string;\n    /**\n     * A flag for switching summary row on / off\n     */\n    summaryRow: boolean;\n    /**\n     * A height of summary row\n     */\n    summaryHeight: number;\n    /**\n     * A property holds a summary row position: top/bottom\n     */\n    summaryPosition: string;\n    /**\n     * Body was scrolled typically in a `scrollbarV:true` scenario.\n     */\n    scroll: EventEmitter<any>;\n    /**\n     * A cell or row was focused via keyboard or mouse click.\n     */\n    activate: EventEmitter<any>;\n    /**\n     * A cell or row was selected.\n     */\n    select: EventEmitter<any>;\n    /**\n     * Column sort was invoked.\n     */\n    sort: EventEmitter<any>;\n    /**\n     * The table was paged either triggered by the pager or the body scroll.\n     */\n    page: EventEmitter<any>;\n    /**\n     * Columns were re-ordered.\n     */\n    reorder: EventEmitter<any>;\n    /**\n     * Column was resized.\n     */\n    resize: EventEmitter<any>;\n    /**\n     * The context menu was invoked on the table.\n     * type indicates whether the header or the body was clicked.\n     * content contains either the column or the row that was clicked.\n     */\n    tableContextmenu: EventEmitter<{\n        event: MouseEvent;\n        type: ContextmenuType;\n        content: any;\n    }>;\n    /**\n     * A row was expanded ot collapsed for tree\n     */\n    treeAction: EventEmitter<any>;\n    /**\n     * CSS class applied if the header height if fixed height.\n     */\n    get isFixedHeader(): boolean;\n    /**\n     * CSS class applied to the root element if\n     * the row heights are fixed heights.\n     */\n    get isFixedRow(): boolean;\n    /**\n     * CSS class applied to root element if\n     * vertical scrolling is enabled.\n     */\n    get isVertScroll(): boolean;\n    /**\n     * CSS class applied to root element if\n     * virtualization is enabled.\n     */\n    get isVirtualized(): boolean;\n    /**\n     * CSS class applied to the root element\n     * if the horziontal scrolling is enabled.\n     */\n    get isHorScroll(): boolean;\n    /**\n     * CSS class applied to root element is selectable.\n     */\n    get isSelectable(): boolean;\n    /**\n     * CSS class applied to root is checkbox selection.\n     */\n    get isCheckboxSelection(): boolean;\n    /**\n     * CSS class applied to root if cell selection.\n     */\n    get isCellSelection(): boolean;\n    /**\n     * CSS class applied to root if single select.\n     */\n    get isSingleSelection(): boolean;\n    /**\n     * CSS class added to root element if mulit select\n     */\n    get isMultiSelection(): boolean;\n    /**\n     * CSS class added to root element if mulit click select\n     */\n    get isMultiClickSelection(): boolean;\n    /**\n     * Column templates gathered from `ContentChildren`\n     * if described in your markup.\n     */\n    set columnTemplates(val: QueryList<DataTableColumnDirective>);\n    /**\n     * Returns the column templates.\n     */\n    get columnTemplates(): QueryList<DataTableColumnDirective>;\n    /**\n     * Row Detail templates gathered from the ContentChild\n     */\n    rowDetail: DatatableRowDetailDirective;\n    /**\n     * Group Header templates gathered from the ContentChild\n     */\n    groupHeader: DatatableGroupHeaderDirective;\n    /**\n     * Footer template gathered from the ContentChild\n     */\n    footer: DatatableFooterDirective;\n    /**\n     * Reference to the body component for manually\n     * invoking functions on the body.\n     */\n    bodyComponent: DataTableBodyComponent;\n    /**\n     * Reference to the header component for manually\n     * invoking functions on the header.\n     *\n     * @memberOf DatatableComponent\n     */\n    headerComponent: DataTableHeaderComponent;\n    /**\n     * Returns if all rows are selected.\n     */\n    get allRowsSelected(): boolean;\n    element: HTMLElement;\n    _innerWidth: number;\n    pageSize: number;\n    bodyHeight: number;\n    rowCount: number;\n    rowDiffer: KeyValueDiffer<{}, {}>;\n    _offsetX: BehaviorSubject<number>;\n    _limit: number | undefined;\n    _count: number;\n    _offset: number;\n    _rows: any[];\n    _groupRowsBy: string;\n    _internalRows: any[];\n    _internalColumns: TableColumn[];\n    _columns: TableColumn[];\n    _columnTemplates: QueryList<DataTableColumnDirective>;\n    _subscriptions: Subscription[];\n    constructor(scrollbarHelper: ScrollbarHelper, dimensionsHelper: DimensionsHelper, cd: ChangeDetectorRef, element: ElementRef, differs: KeyValueDiffers, columnChangesService: ColumnChangesService, configuration: INgxDatatableConfig);\n    /**\n     * Lifecycle hook that is called after data-bound\n     * properties of a directive are initialized.\n     */\n    ngOnInit(): void;\n    /**\n     * Lifecycle hook that is called after a component's\n     * view has been fully initialized.\n     */\n    ngAfterViewInit(): void;\n    /**\n     * Lifecycle hook that is called after a component's\n     * content has been fully initialized.\n     */\n    ngAfterContentInit(): void;\n    /**\n     * This will be used when displaying or selecting rows.\n     * when tracking/comparing them, we'll use the value of this fn,\n     *\n     * (`fn(x) === fn(y)` instead of `x === y`)\n     */\n    rowIdentity: (x: any) => any;\n    /**\n     * Translates the templates to the column objects\n     */\n    translateColumns(val: any): void;\n    /**\n     * Creates a map with the data grouped by the user choice of grouping index\n     *\n     * @param originalArray the original array passed via parameter\n     * @param groupByIndex  the index of the column to group the data by\n     */\n    groupArrayBy(originalArray: any, groupBy: any): {\n        key: any;\n        value: any;\n    }[];\n    ngDoCheck(): void;\n    /**\n     * Recalc's the sizes of the grid.\n     *\n     * Updated automatically on changes to:\n     *\n     *  - Columns\n     *  - Rows\n     *  - Paging related\n     *\n     * Also can be manually invoked or upon window resize.\n     */\n    recalculate(): void;\n    /**\n     * Window resize handler to update sizes.\n     */\n    onWindowResize(): void;\n    /**\n     * Recalulcates the column widths based on column width\n     * distribution mode and scrollbar offsets.\n     */\n    recalculateColumns(columns?: any[], forceIdx?: number, allowBleed?: boolean): any[] | undefined;\n    /**\n     * Recalculates the dimensions of the table size.\n     * Internally calls the page size and row count calcs too.\n     *\n     */\n    recalculateDims(): void;\n    /**\n     * Recalculates the pages after a update.\n     */\n    recalculatePages(): void;\n    /**\n     * Body triggered a page event.\n     */\n    onBodyPage({ offset }: any): void;\n    /**\n     * The body triggered a scroll event.\n     */\n    onBodyScroll(event: MouseEvent): void;\n    /**\n     * The footer triggered a page event.\n     */\n    onFooterPage(event: any): void;\n    /**\n     * Recalculates the sizes of the page\n     */\n    calcPageSize(val?: any[]): number;\n    /**\n     * Calculates the row count.\n     */\n    calcRowCount(val?: any[]): number;\n    /**\n     * The header triggered a contextmenu event.\n     */\n    onColumnContextmenu({ event, column }: any): void;\n    /**\n     * The body triggered a contextmenu event.\n     */\n    onRowContextmenu({ event, row }: any): void;\n    /**\n     * The header triggered a column resize event.\n     */\n    onColumnResize({ column, newValue }: any): void;\n    /**\n     * The header triggered a column re-order event.\n     */\n    onColumnReorder({ column, newValue, prevValue }: any): void;\n    /**\n     * The header triggered a column sort event.\n     */\n    onColumnSort(event: any): void;\n    /**\n     * Toggle all row selection\n     */\n    onHeaderSelect(event: any): void;\n    /**\n     * A row was selected from body\n     */\n    onBodySelect(event: any): void;\n    /**\n     * A row was expanded or collapsed for tree\n     */\n    onTreeAction(event: any): void;\n    ngOnDestroy(): void;\n    /**\n     * listen for changes to input bindings of all DataTableColumnDirective and\n     * trigger the columnTemplates.changes observable to emit\n     */\n    private listenForColumnInputChanges;\n    private sortInternalRows;\n}\n"]}