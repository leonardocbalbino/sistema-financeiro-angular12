/**
 * Returns the columns by pin.
 */
export function columnsByPin(cols) {
    const ret = {
        left: [],
        center: [],
        right: []
    };
    if (cols) {
        for (const col of cols) {
            if (col.frozenLeft) {
                ret.left.push(col);
            }
            else if (col.frozenRight) {
                ret.right.push(col);
            }
            else {
                ret.center.push(col);
            }
        }
    }
    return ret;
}
/**
 * Returns the widths of all group sets of a column
 */
export function columnGroupWidths(groups, all) {
    return {
        left: columnTotalWidth(groups.left),
        center: columnTotalWidth(groups.center),
        right: columnTotalWidth(groups.right),
        total: Math.floor(columnTotalWidth(all))
    };
}
/**
 * Calculates the total width of all columns and their groups
 */
export function columnTotalWidth(columns, prop) {
    let totalWidth = 0;
    if (columns) {
        for (const c of columns) {
            const has = prop && c[prop];
            const width = has ? c[prop] : c.width;
            totalWidth = totalWidth + parseFloat(width);
        }
    }
    return totalWidth;
}
/**
 * Calculates the total width of all columns and their groups
 */
export function columnsTotalWidth(columns, prop) {
    let totalWidth = 0;
    for (const column of columns) {
        const has = prop && column[prop];
        totalWidth = totalWidth + (has ? column[prop] : column.width);
    }
    return totalWidth;
}
export function columnsByPinArr(val) {
    const colsByPinArr = [];
    const colsByPin = columnsByPin(val);
    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });
    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });
    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });
    return colsByPinArr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3aW1sYW5lL25neC1kYXRhdGFibGUvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvY29sdW1uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFXO0lBQ3RDLE1BQU0sR0FBRyxHQUEyQztRQUNsRCxJQUFJLEVBQUUsRUFBRTtRQUNSLE1BQU0sRUFBRSxFQUFFO1FBQ1YsS0FBSyxFQUFFLEVBQUU7S0FDVixDQUFDO0lBRUYsSUFBSSxJQUFJLEVBQUU7UUFDUixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUN0QixJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3BCO2lCQUFNLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRTtnQkFDMUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDckI7aUJBQU07Z0JBQ0wsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEI7U0FDRjtLQUNGO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsTUFBVyxFQUFFLEdBQVE7SUFDckQsT0FBTztRQUNMLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ25DLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQ3JDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3pDLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBYyxFQUFFLElBQWE7SUFDNUQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRW5CLElBQUksT0FBTyxFQUFFO1FBQ1gsS0FBSyxNQUFNLENBQUMsSUFBSSxPQUFPLEVBQUU7WUFDdkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUN0QyxVQUFVLEdBQUcsVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QztLQUNGO0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGlCQUFpQixDQUFDLE9BQVksRUFBRSxJQUFVO0lBQ3hELElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVuQixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtRQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLFVBQVUsR0FBRyxVQUFVLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQy9EO0lBRUQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVELE1BQU0sVUFBVSxlQUFlLENBQUMsR0FBUTtJQUN0QyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDeEIsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hFLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWxFLE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJldHVybnMgdGhlIGNvbHVtbnMgYnkgcGluLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29sdW1uc0J5UGluKGNvbHM6IGFueVtdKSB7XG4gIGNvbnN0IHJldDogeyBsZWZ0OiBhbnk7IGNlbnRlcjogYW55OyByaWdodDogYW55IH0gPSB7XG4gICAgbGVmdDogW10sXG4gICAgY2VudGVyOiBbXSxcbiAgICByaWdodDogW11cbiAgfTtcblxuICBpZiAoY29scykge1xuICAgIGZvciAoY29uc3QgY29sIG9mIGNvbHMpIHtcbiAgICAgIGlmIChjb2wuZnJvemVuTGVmdCkge1xuICAgICAgICByZXQubGVmdC5wdXNoKGNvbCk7XG4gICAgICB9IGVsc2UgaWYgKGNvbC5mcm96ZW5SaWdodCkge1xuICAgICAgICByZXQucmlnaHQucHVzaChjb2wpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0LmNlbnRlci5wdXNoKGNvbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB3aWR0aHMgb2YgYWxsIGdyb3VwIHNldHMgb2YgYSBjb2x1bW5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbHVtbkdyb3VwV2lkdGhzKGdyb3VwczogYW55LCBhbGw6IGFueSkge1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGNvbHVtblRvdGFsV2lkdGgoZ3JvdXBzLmxlZnQpLFxuICAgIGNlbnRlcjogY29sdW1uVG90YWxXaWR0aChncm91cHMuY2VudGVyKSxcbiAgICByaWdodDogY29sdW1uVG90YWxXaWR0aChncm91cHMucmlnaHQpLFxuICAgIHRvdGFsOiBNYXRoLmZsb29yKGNvbHVtblRvdGFsV2lkdGgoYWxsKSlcbiAgfTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB0b3RhbCB3aWR0aCBvZiBhbGwgY29sdW1ucyBhbmQgdGhlaXIgZ3JvdXBzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2x1bW5Ub3RhbFdpZHRoKGNvbHVtbnM6IGFueVtdLCBwcm9wPzogc3RyaW5nKSB7XG4gIGxldCB0b3RhbFdpZHRoID0gMDtcblxuICBpZiAoY29sdW1ucykge1xuICAgIGZvciAoY29uc3QgYyBvZiBjb2x1bW5zKSB7XG4gICAgICBjb25zdCBoYXMgPSBwcm9wICYmIGNbcHJvcF07XG4gICAgICBjb25zdCB3aWR0aCA9IGhhcyA/IGNbcHJvcF0gOiBjLndpZHRoO1xuICAgICAgdG90YWxXaWR0aCA9IHRvdGFsV2lkdGggKyBwYXJzZUZsb2F0KHdpZHRoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdG90YWxXaWR0aDtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB0b3RhbCB3aWR0aCBvZiBhbGwgY29sdW1ucyBhbmQgdGhlaXIgZ3JvdXBzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2x1bW5zVG90YWxXaWR0aChjb2x1bW5zOiBhbnksIHByb3A/OiBhbnkpIHtcbiAgbGV0IHRvdGFsV2lkdGggPSAwO1xuXG4gIGZvciAoY29uc3QgY29sdW1uIG9mIGNvbHVtbnMpIHtcbiAgICBjb25zdCBoYXMgPSBwcm9wICYmIGNvbHVtbltwcm9wXTtcbiAgICB0b3RhbFdpZHRoID0gdG90YWxXaWR0aCArIChoYXMgPyBjb2x1bW5bcHJvcF0gOiBjb2x1bW4ud2lkdGgpO1xuICB9XG5cbiAgcmV0dXJuIHRvdGFsV2lkdGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2x1bW5zQnlQaW5BcnIodmFsOiBhbnkpIHtcbiAgY29uc3QgY29sc0J5UGluQXJyID0gW107XG4gIGNvbnN0IGNvbHNCeVBpbiA9IGNvbHVtbnNCeVBpbih2YWwpO1xuXG4gIGNvbHNCeVBpbkFyci5wdXNoKHsgdHlwZTogJ2xlZnQnLCBjb2x1bW5zOiBjb2xzQnlQaW5bJ2xlZnQnXSB9KTtcbiAgY29sc0J5UGluQXJyLnB1c2goeyB0eXBlOiAnY2VudGVyJywgY29sdW1uczogY29sc0J5UGluWydjZW50ZXInXSB9KTtcbiAgY29sc0J5UGluQXJyLnB1c2goeyB0eXBlOiAncmlnaHQnLCBjb2x1bW5zOiBjb2xzQnlQaW5bJ3JpZ2h0J10gfSk7XG5cbiAgcmV0dXJuIGNvbHNCeVBpbkFycjtcbn1cbiJdfQ==