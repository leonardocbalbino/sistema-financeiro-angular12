{"version":3,"file":"ngx-echarts.directive.d.ts","sources":["ngx-echarts.directive.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, DoCheck, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, InjectionToken } from '@angular/core';\nexport interface NgxEchartsConfig {\n    echarts: any;\n}\nexport declare const NGX_ECHARTS_CONFIG: InjectionToken<NgxEchartsConfig>;\nexport declare class NgxEchartsDirective implements OnChanges, OnDestroy, OnInit, DoCheck, AfterViewInit {\n    private el;\n    private ngZone;\n    options: any;\n    theme: string;\n    loading: boolean;\n    initOpts: {\n        devicePixelRatio?: number;\n        renderer?: string;\n        width?: number | string;\n        height?: number | string;\n    };\n    merge: any;\n    autoResize: boolean;\n    loadingType: string;\n    loadingOpts: object;\n    chartInit: EventEmitter<any>;\n    chartClick: EventEmitter<unknown>;\n    chartDblClick: EventEmitter<unknown>;\n    chartMouseDown: EventEmitter<unknown>;\n    chartMouseMove: EventEmitter<unknown>;\n    chartMouseUp: EventEmitter<unknown>;\n    chartMouseOver: EventEmitter<unknown>;\n    chartMouseOut: EventEmitter<unknown>;\n    chartGlobalOut: EventEmitter<unknown>;\n    chartContextMenu: EventEmitter<unknown>;\n    chartLegendSelectChanged: EventEmitter<unknown>;\n    chartLegendSelected: EventEmitter<unknown>;\n    chartLegendUnselected: EventEmitter<unknown>;\n    chartLegendScroll: EventEmitter<unknown>;\n    chartDataZoom: EventEmitter<unknown>;\n    chartDataRangeSelected: EventEmitter<unknown>;\n    chartTimelineChanged: EventEmitter<unknown>;\n    chartTimelinePlayChanged: EventEmitter<unknown>;\n    chartRestore: EventEmitter<unknown>;\n    chartDataViewChanged: EventEmitter<unknown>;\n    chartMagicTypeChanged: EventEmitter<unknown>;\n    chartPieSelectChanged: EventEmitter<unknown>;\n    chartPieSelected: EventEmitter<unknown>;\n    chartPieUnselected: EventEmitter<unknown>;\n    chartMapSelectChanged: EventEmitter<unknown>;\n    chartMapSelected: EventEmitter<unknown>;\n    chartMapUnselected: EventEmitter<unknown>;\n    chartAxisAreaSelected: EventEmitter<unknown>;\n    chartFocusNodeAdjacency: EventEmitter<unknown>;\n    chartUnfocusNodeAdjacency: EventEmitter<unknown>;\n    chartBrush: EventEmitter<unknown>;\n    chartBrushSelected: EventEmitter<unknown>;\n    chartRendered: EventEmitter<unknown>;\n    chartFinished: EventEmitter<unknown>;\n    private chart;\n    private echarts;\n    private currentOffsetWidth;\n    private currentOffsetHeight;\n    private currentWindowWidth;\n    private resizeSub;\n    constructor(config: NgxEchartsConfig, el: ElementRef, ngZone: NgZone);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngDoCheck(): void;\n    ngAfterViewInit(): void;\n    private dispose;\n    private resize;\n    private toggleLoading;\n    private setOption;\n    private refreshChart;\n    private createChart;\n    private initChart;\n    private onOptionsChange;\n    private createLazyEvent;\n}\n"]}