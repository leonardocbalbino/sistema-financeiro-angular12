{"version":3,"sources":["ng://ng2-file-upload/file-upload/file-like-object.class.ts","ng://ng2-file-upload/file-upload/file-item.class.ts","ng://ng2-file-upload/file-upload/file-type.class.ts","ng://ng2-file-upload/file-upload/file-uploader.class.ts","ng://ng2-file-upload/file-upload/file-select.directive.ts","ng://ng2-file-upload/file-upload/file-drop.directive.ts","ng://ng2-file-upload/file-upload/file-upload.module.ts"],"names":["FileLikeObject","fileOrInput","this","rawFile","node","fakePathOrObject","nodeName","prop","attr","find","value","prototype","_createFromFakePath","path","lastModifiedDate","size","type","slice","lastIndexOf","toLowerCase","name","_createFromObject","object","FileItem","uploader","some","options","url","headers","withCredentials","formData","isReady","isUploading","isUploaded","isSuccess","isCancel","isError","progress","index","file","_file","method","alias","itemAlias","upload","uploadItem","e","_onCompleteItem","_onErrorItem","cancel","cancelItem","remove","removeFromQueue","onBeforeUpload","onBuildForm","form","onProgress","onSuccess","response","status","onError","onCancel","onComplete","_onBeforeUpload","_onBuildForm","_onProgress","_onSuccess","_onError","_onCancel","_onComplete","removeAfterUpload","_prepareToUploading","_nextIndex","FileType","getMimeClass","mimeClass","mime_psd","indexOf","match","mime_compress","mime_doc","mime_xsl","mime_ppt","fileTypeDetection","inputFilename","types","jpg","jpeg","tif","psd","bmp","png","nef","tiff","cr2","dwg","cdr","ai","indd","pin","cdp","skp","stp","3dm","mp3","wav","wma","mod","m4a","compress","zip","rar","7z","lz","z01","bz2","gz","pdf","xls","xlsx","ods","mp4","avi","wmv","mpg","mts","flv","3gp","vob","m4v","mpeg","m2ts","mov","doc","docx","eps","txt","odt","rtf","ppt","pptx","pps","ppsx","odp","chunks","split","length","extension","undefined","FileUploader","queue","autoUpload","isHTML5","filters","disableMultipart","formatDataFunction","item","formatDataFunctionIsAsync","setOptions","EventEmitter","Object","assign","authToken","authTokenHeader","unshift","fn","_queueLimitFilter","maxFileSize","_fileSizeFilter","allowedFileType","_fileTypeFilter","allowedMimeType","_mimeTypeFilter","i","addToQueue","files","_this","list","files_1","__values","files_1_1","next","done","push","arrayOfFilters","_getFilters","count","addedFileItems","map","temp","_isValidFile","fileItem","_onAfterAddingFile","filter","_failFilterIndex","_onWhenAddingFileFailed","_onAfterAddingAll","_getTotalProgress","_render","uploadAll","getIndexOfItem","splice","clearQueue","transport","_xhr","_form","abort","items","getNotUploadedItems","cancelAll","isFile","File","isFileLikeObject","getReadyItems","sort","item1","item2","destroy","onAfterAddingAll","fileItems","onBuildItemForm","onAfterAddingFile","onWhenAddingFileFailed","onBeforeUploadItem","onProgressItem","onProgressAll","onSuccessItem","onErrorItem","onCancelItem","onCompleteItem","onCompleteAll","nextItem","_headersGetter","parsedHeaders","_xhrTransport","sendable","that","xhr","XMLHttpRequest","_onBeforeUploadItem","TypeError","FormData","_onBuildItemForm","appendFile","append","parametersBeforeFiles","additionalParameter","keys","forEach","key","paramVal","replace","onprogress","event","Math","round","lengthComputable","loaded","total","_onProgressItem","onload","_parseHeaders","getAllResponseHeaders","_transformResponse","gist","_isSuccessCode","onerror","onabort","_onCancelItem","open","_c","_d","header","setRequestHeader","_e","_f","onreadystatechange","readyState","DONE","emit","responseText","then","result","send","JSON","stringify","notUploaded","uploaded","ratio","current","Array","isArray","names_1","queueLimit","every","call","val","parsed","line","trim","_onSuccessItem","FileSelectDirective","element","onFileSelected","getOptions","getFilters","isEmptyAfterSelection","nativeElement","attributes","multiple","onChange","Directive","args","selector","ElementRef","Input","Output","HostListener","FileDropDirective","fileOver","onFileDrop","onDrop","transfer","_getTransfer","_preventAndStop","onDragOver","_haveFiles","dropEffect","onDragLeave","currentTarget","dataTransfer","originalEvent","preventDefault","stopPropagation","contains","FileUploadModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["function isElement(node: any): boolean {\n  return !!(node && (node.nodeName || node.prop && node.attr && node.find));\n}\n\nexport class FileLikeObject {\n  public lastModifiedDate: any;\n  public size: any;\n  public type: string;\n  public name: string;\n  public rawFile: string;\n\n  public constructor(fileOrInput: any) {\n    this.rawFile = fileOrInput;\n    let isInput = isElement(fileOrInput);\n    let fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;\n    let postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';\n    let method = '_createFrom' + postfix;\n    (this as any)[ method ](fakePathOrObject);\n  }\n\n  public _createFromFakePath(path: string): void {\n    this.lastModifiedDate = void 0;\n    this.size = void 0;\n    this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();\n    this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\\\') + 2);\n  }\n\n  public _createFromObject(object: { size: number, type: string, name: string }): void {\n    this.size = object.size;\n    this.type = object.type;\n    this.name = object.name;\n  }\n}\n","import { FileLikeObject } from './file-like-object.class';\nimport { FileUploader, ParsedResponseHeaders, FileUploaderOptions } from './file-uploader.class';\n\nexport class FileItem {\n  public file: FileLikeObject;\n  public _file: File;\n  public alias: string;\n  public url: string = '/';\n  public method: string;\n  public headers: any = [];\n  public withCredentials: boolean = true;\n  public formData: any = [];\n  public isReady: boolean = false;\n  public isUploading: boolean = false;\n  public isUploaded: boolean = false;\n  public isSuccess: boolean = false;\n  public isCancel: boolean = false;\n  public isError: boolean = false;\n  public progress: number = 0;\n  public index: number = void 0;\n  public _xhr: XMLHttpRequest;\n  public _form: any;\n\n  protected uploader: FileUploader;\n  protected some: File;\n  protected options: FileUploaderOptions;\n\n  public constructor(uploader: FileUploader, some: File, options: FileUploaderOptions) {\n    this.uploader = uploader;\n    this.some = some;\n    this.options = options;\n    this.file = new FileLikeObject(some);\n    this._file = some;\n    if (uploader.options) {\n      this.method = uploader.options.method || 'POST';\n      this.alias = uploader.options.itemAlias || 'file';\n    }\n    this.url = uploader.options.url;\n  }\n\n  public upload(): void {\n    try {\n      this.uploader.uploadItem(this);\n    } catch (e) {\n      this.uploader._onCompleteItem(this, '', 0, {});\n      this.uploader._onErrorItem(this, '', 0, {});\n    }\n  }\n\n  public cancel(): void {\n    this.uploader.cancelItem(this);\n  }\n\n  public remove(): void {\n    this.uploader.removeFromQueue(this);\n  }\n\n  public onBeforeUpload(): void {\n    return void 0;\n  }\n\n  public onBuildForm(form: any): any {\n    return { form };\n  }\n\n  public onProgress(progress: number): any {\n    return { progress };\n  }\n\n  public onSuccess(response: string, status: number, headers: ParsedResponseHeaders): any {\n    return { response, status, headers };\n  }\n\n  public onError(response: string, status: number, headers: ParsedResponseHeaders): any {\n    return { response, status, headers };\n  }\n\n  public onCancel(response: string, status: number, headers: ParsedResponseHeaders): any {\n    return { response, status, headers };\n  }\n\n  public onComplete(response: string, status: number, headers: ParsedResponseHeaders): any {\n    return { response, status, headers };\n  }\n\n  public _onBeforeUpload(): void {\n    this.isReady = true;\n    this.isUploading = true;\n    this.isUploaded = false;\n    this.isSuccess = false;\n    this.isCancel = false;\n    this.isError = false;\n    this.progress = 0;\n    this.onBeforeUpload();\n  }\n\n  public _onBuildForm(form: any): void {\n    this.onBuildForm(form);\n  }\n\n  public _onProgress(progress: number): void {\n    this.progress = progress;\n    this.onProgress(progress);\n  }\n\n  public _onSuccess(response: string, status: number, headers: ParsedResponseHeaders): void {\n    this.isReady = false;\n    this.isUploading = false;\n    this.isUploaded = true;\n    this.isSuccess = true;\n    this.isCancel = false;\n    this.isError = false;\n    this.progress = 100;\n    this.index = void 0;\n    this.onSuccess(response, status, headers);\n  }\n\n  public _onError(response: string, status: number, headers: ParsedResponseHeaders): void {\n    this.isReady = false;\n    this.isUploading = false;\n    this.isUploaded = true;\n    this.isSuccess = false;\n    this.isCancel = false;\n    this.isError = true;\n    this.progress = 0;\n    this.index = void 0;\n    this.onError(response, status, headers);\n  }\n\n  public _onCancel(response: string, status: number, headers: ParsedResponseHeaders): void {\n    this.isReady = false;\n    this.isUploading = false;\n    this.isUploaded = false;\n    this.isSuccess = false;\n    this.isCancel = true;\n    this.isError = false;\n    this.progress = 0;\n    this.index = void 0;\n    this.onCancel(response, status, headers);\n  }\n\n  public _onComplete(response: string, status: number, headers: ParsedResponseHeaders): void {\n    this.onComplete(response, status, headers);\n\n    if (this.uploader.options.removeAfterUpload) {\n      this.remove();\n    }\n  }\n\n  public _prepareToUploading(): void {\n    this.index = this.index || ++this.uploader._nextIndex;\n    this.isReady = true;\n  }\n}\n","import { FileLikeObject } from \"../index\";\n\nexport class FileType {\n  /*  MS office  */\n  public static mime_doc: string[] = [\n    'application/msword',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.template',\n    'application/vnd.ms-word.document.macroEnabled.12',\n    'application/vnd.ms-word.template.macroEnabled.12'\n  ];\n  public static mime_xsl: string[] = [\n    'application/vnd.ms-excel',\n    'application/vnd.ms-excel',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.template',\n    'application/vnd.ms-excel.sheet.macroEnabled.12',\n    'application/vnd.ms-excel.template.macroEnabled.12',\n    'application/vnd.ms-excel.addin.macroEnabled.12',\n    'application/vnd.ms-excel.sheet.binary.macroEnabled.12'\n  ];\n  public static mime_ppt: string[] = [\n    'application/vnd.ms-powerpoint',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.ms-powerpoint',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'application/vnd.openxmlformats-officedocument.presentationml.template',\n    'application/vnd.openxmlformats-officedocument.presentationml.slideshow',\n    'application/vnd.ms-powerpoint.addin.macroEnabled.12',\n    'application/vnd.ms-powerpoint.presentation.macroEnabled.12',\n    'application/vnd.ms-powerpoint.presentation.macroEnabled.12',\n    'application/vnd.ms-powerpoint.slideshow.macroEnabled.12'\n  ];\n\n  /* PSD */\n  public static mime_psd: string[] = [\n    'image/photoshop',\n    'image/x-photoshop',\n    'image/psd',\n    'application/photoshop',\n    'application/psd',\n    'zz-application/zz-winassoc-psd'\n  ];\n\n  /* Compressed files */\n  public static mime_compress: string[] = [\n    'application/x-gtar',\n    'application/x-gcompress',\n    'application/compress',\n    'application/x-tar',\n    'application/x-rar-compressed',\n    'application/octet-stream',\n    'application/x-zip-compressed',\n    'application/zip-compressed',\n    'application/x-7z-compressed',\n    'application/gzip',\n    'application/x-bzip2'\n  ];\n\n  public static getMimeClass(file: FileLikeObject): string {\n    let mimeClass = 'application';\n    if (this.mime_psd.indexOf(file.type) !== -1) {\n      mimeClass = 'image';\n    } else if (file.type.match('image.*')) {\n      mimeClass = 'image';\n    } else if (file.type.match('video.*')) {\n      mimeClass = 'video';\n    } else if (file.type.match('audio.*')) {\n      mimeClass = 'audio';\n    } else if (file.type === 'application/pdf') {\n      mimeClass = 'pdf';\n    } else if (this.mime_compress.indexOf(file.type) !== -1) {\n      mimeClass = 'compress';\n    } else if (this.mime_doc.indexOf(file.type) !== -1) {\n      mimeClass = 'doc';\n    } else if (this.mime_xsl.indexOf(file.type) !== -1) {\n      mimeClass = 'xls';\n    } else if (this.mime_ppt.indexOf(file.type) !== -1) {\n      mimeClass = 'ppt';\n    }\n    if (mimeClass === 'application') {\n      mimeClass = this.fileTypeDetection(file.name);\n    }\n\n    return mimeClass;\n  }\n\n  public static fileTypeDetection(inputFilename: string): string {\n    let types: { [ key: string ]: string } = {\n      'jpg': 'image',\n      'jpeg': 'image',\n      'tif': 'image',\n      'psd': 'image',\n      'bmp': 'image',\n      'png': 'image',\n      'nef': 'image',\n      'tiff': 'image',\n      'cr2': 'image',\n      'dwg': 'image',\n      'cdr': 'image',\n      'ai': 'image',\n      'indd': 'image',\n      'pin': 'image',\n      'cdp': 'image',\n      'skp': 'image',\n      'stp': 'image',\n      '3dm': 'image',\n      'mp3': 'audio',\n      'wav': 'audio',\n      'wma': 'audio',\n      'mod': 'audio',\n      'm4a': 'audio',\n      'compress': 'compress',\n      'zip': 'compress',\n      'rar': 'compress',\n      '7z': 'compress',\n      'lz': 'compress',\n      'z01': 'compress',\n      'bz2': 'compress',\n      'gz': 'compress',\n      'pdf': 'pdf',\n      'xls': 'xls',\n      'xlsx': 'xls',\n      'ods': 'xls',\n      'mp4': 'video',\n      'avi': 'video',\n      'wmv': 'video',\n      'mpg': 'video',\n      'mts': 'video',\n      'flv': 'video',\n      '3gp': 'video',\n      'vob': 'video',\n      'm4v': 'video',\n      'mpeg': 'video',\n      'm2ts': 'video',\n      'mov': 'video',\n      'doc': 'doc',\n      'docx': 'doc',\n      'eps': 'doc',\n      'txt': 'doc',\n      'odt': 'doc',\n      'rtf': 'doc',\n      'ppt': 'ppt',\n      'pptx': 'ppt',\n      'pps': 'ppt',\n      'ppsx': 'ppt',\n      'odp': 'ppt'\n    };\n\n    let chunks = inputFilename.split('.');\n    if (chunks.length < 2) {\n      return 'application';\n    }\n    let extension = chunks[ chunks.length - 1 ].toLowerCase();\n    if (types[ extension ] === undefined) {\n      return 'application';\n    } else {\n      return types[ extension ];\n    }\n  }\n}\n","import { EventEmitter } from '@angular/core';\nimport { FileLikeObject } from './file-like-object.class';\nimport { FileItem } from './file-item.class';\nimport { FileType } from './file-type.class';\n\nfunction isFile(value: any): boolean {\n  return (File && value instanceof File);\n}\n\nexport interface Headers {\n  name: string;\n  value: string;\n}\n\nexport type ParsedResponseHeaders = { [ headerFieldName: string ]: string };\n\nexport type FilterFunction = {\n  name: string,\n  fn: (item?: FileLikeObject, options?: FileUploaderOptions) => boolean\n};\n\nexport interface FileUploaderOptions {\n  allowedMimeType?: string[];\n  allowedFileType?: string[];\n  autoUpload?: boolean;\n  isHTML5?: boolean;\n  filters?: FilterFunction[];\n  headers?: Headers[];\n  method?: string;\n  authToken?: string;\n  maxFileSize?: number;\n  queueLimit?: number;\n  removeAfterUpload?: boolean;\n  url?: string;\n  disableMultipart?: boolean;\n  itemAlias?: string;\n  authTokenHeader?: string;\n  additionalParameter?: { [ key: string ]: any };\n  parametersBeforeFiles?: boolean;\n  formatDataFunction?: Function;\n  formatDataFunctionIsAsync?: boolean;\n}\n\nexport class FileUploader {\n\n  public authToken: string;\n  public isUploading: boolean = false;\n  public queue: FileItem[] = [];\n  public progress: number = 0;\n  public _nextIndex: number = 0;\n  public autoUpload: any;\n  public authTokenHeader: string;\n  public response: EventEmitter<any>;\n\n  public options: FileUploaderOptions = {\n    autoUpload: false,\n    isHTML5: true,\n    filters: [],\n    removeAfterUpload: false,\n    disableMultipart: false,\n    formatDataFunction: (item: FileItem) => item._file,\n    formatDataFunctionIsAsync: false\n  };\n\n  protected _failFilterIndex: number;\n\n  public constructor(options: FileUploaderOptions) {\n    this.setOptions(options);\n    this.response = new EventEmitter<any>();\n  }\n\n  public setOptions(options: FileUploaderOptions): void {\n    this.options = Object.assign(this.options, options);\n\n    this.authToken = this.options.authToken;\n    this.authTokenHeader = this.options.authTokenHeader || 'Authorization';\n    this.autoUpload = this.options.autoUpload;\n    this.options.filters.unshift({ name: 'queueLimit', fn: this._queueLimitFilter });\n\n    if (this.options.maxFileSize) {\n      this.options.filters.unshift({ name: 'fileSize', fn: this._fileSizeFilter });\n    }\n\n    if (this.options.allowedFileType) {\n      this.options.filters.unshift({ name: 'fileType', fn: this._fileTypeFilter });\n    }\n\n    if (this.options.allowedMimeType) {\n      this.options.filters.unshift({ name: 'mimeType', fn: this._mimeTypeFilter });\n    }\n\n    for (let i = 0; i < this.queue.length; i++) {\n      this.queue[ i ].url = this.options.url;\n    }\n  }\n\n  public addToQueue(files: File[], options?: FileUploaderOptions, filters?: FilterFunction[] | string): void {\n    let list: File[] = [];\n    for (let file of files) {\n      list.push(file);\n    }\n    let arrayOfFilters = this._getFilters(filters);\n    let count = this.queue.length;\n    let addedFileItems: FileItem[] = [];\n    list.map((some: File) => {\n      if (!options) {\n        options = this.options;\n      }\n\n      let temp = new FileLikeObject(some);\n      if (this._isValidFile(temp, arrayOfFilters, options)) {\n        let fileItem = new FileItem(this, some, options);\n        addedFileItems.push(fileItem);\n        this.queue.push(fileItem);\n        this._onAfterAddingFile(fileItem);\n      } else {\n        let filter = arrayOfFilters[ this._failFilterIndex ];\n        this._onWhenAddingFileFailed(temp, filter, options);\n      }\n    });\n    if (this.queue.length !== count) {\n      this._onAfterAddingAll(addedFileItems);\n      this.progress = this._getTotalProgress();\n    }\n    this._render();\n    if (this.options.autoUpload) {\n      this.uploadAll();\n    }\n  }\n\n  public removeFromQueue(value: FileItem): void {\n    let index = this.getIndexOfItem(value);\n    let item = this.queue[ index ];\n    if (item.isUploading) {\n      item.cancel();\n    }\n    this.queue.splice(index, 1);\n    this.progress = this._getTotalProgress();\n  }\n\n  public clearQueue(): void {\n    while (this.queue.length) {\n      this.queue[ 0 ].remove();\n    }\n    this.progress = 0;\n  }\n\n  public uploadItem(value: FileItem): void {\n    let index = this.getIndexOfItem(value);\n    let item = this.queue[ index ];\n    let transport = this.options.isHTML5 ? '_xhrTransport' : '_iframeTransport';\n    item._prepareToUploading();\n    if (this.isUploading) {\n      return;\n    }\n    this.isUploading = true;\n    (this as any)[ transport ](item);\n  }\n\n  public cancelItem(value: FileItem): void {\n    let index = this.getIndexOfItem(value);\n    let item = this.queue[ index ];\n    let prop = this.options.isHTML5 ? item._xhr : item._form;\n    if (item && item.isUploading) {\n      prop.abort();\n    }\n  }\n\n  public uploadAll(): void {\n    let items = this.getNotUploadedItems().filter((item: FileItem) => !item.isUploading);\n    if (!items.length) {\n      return;\n    }\n    items.map((item: FileItem) => item._prepareToUploading());\n    items[ 0 ].upload();\n  }\n\n  public cancelAll(): void {\n    let items = this.getNotUploadedItems();\n    items.map((item: FileItem) => item.cancel());\n  }\n\n  public isFile(value: any): boolean {\n    return isFile(value);\n  }\n\n  public isFileLikeObject(value: any): boolean {\n    return value instanceof FileLikeObject;\n  }\n\n  public getIndexOfItem(value: any): number {\n    return typeof value === 'number' ? value : this.queue.indexOf(value);\n  }\n\n  public getNotUploadedItems(): any[] {\n    return this.queue.filter((item: FileItem) => !item.isUploaded);\n  }\n\n  public getReadyItems(): any[] {\n    return this.queue\n      .filter((item: FileItem) => (item.isReady && !item.isUploading))\n      .sort((item1: any, item2: any) => item1.index - item2.index);\n  }\n\n  public destroy(): void {\n    return void 0;\n  }\n\n  public onAfterAddingAll(fileItems: any): any {\n    return { fileItems };\n  }\n\n  public onBuildItemForm(fileItem: FileItem, form: any): any {\n    return { fileItem, form };\n  }\n\n  public onAfterAddingFile(fileItem: FileItem): any {\n    return { fileItem };\n  }\n\n  public onWhenAddingFileFailed(item: FileLikeObject, filter: any, options: any): any {\n    return { item, filter, options };\n  }\n\n  public onBeforeUploadItem(fileItem: FileItem): any {\n    return { fileItem };\n  }\n\n  public onProgressItem(fileItem: FileItem, progress: any): any {\n    return { fileItem, progress };\n  }\n\n  public onProgressAll(progress: any): any {\n    return { progress };\n  }\n\n  public onSuccessItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): any {\n    return { item, response, status, headers };\n  }\n\n  public onErrorItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): any {\n    return { item, response, status, headers };\n  }\n\n  public onCancelItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): any {\n    return { item, response, status, headers };\n  }\n\n  public onCompleteItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): any {\n    return { item, response, status, headers };\n  }\n\n  public onCompleteAll(): any {\n    return void 0;\n  }\n\n  public _mimeTypeFilter(item: FileLikeObject): boolean {\n    return !(this.options.allowedMimeType && this.options.allowedMimeType.indexOf(item.type) === -1);\n  }\n\n  public _fileSizeFilter(item: FileLikeObject): boolean {\n    return !(this.options.maxFileSize && item.size > this.options.maxFileSize);\n  }\n\n  public _fileTypeFilter(item: FileLikeObject): boolean {\n    return !(this.options.allowedFileType &&\n      this.options.allowedFileType.indexOf(FileType.getMimeClass(item)) === -1);\n  }\n\n  public _onErrorItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void {\n    item._onError(response, status, headers);\n    this.onErrorItem(item, response, status, headers);\n  }\n\n  public _onCompleteItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void {\n    item._onComplete(response, status, headers);\n    this.onCompleteItem(item, response, status, headers);\n    let nextItem = this.getReadyItems()[ 0 ];\n    this.isUploading = false;\n    if (nextItem) {\n      nextItem.upload();\n      return;\n    }\n    this.onCompleteAll();\n    this.progress = this._getTotalProgress();\n    this._render();\n  }\n\n  protected _headersGetter(parsedHeaders: ParsedResponseHeaders): any {\n    return (name: any): any => {\n      if (name) {\n        return parsedHeaders[ name.toLowerCase() ] || void 0;\n      }\n      return parsedHeaders;\n    };\n  }\n\n  protected _xhrTransport(item: FileItem): any {\n    let that = this;\n    let xhr = item._xhr = new XMLHttpRequest();\n    let sendable: any;\n    this._onBeforeUploadItem(item);\n\n    if (typeof item._file.size !== 'number') {\n      throw new TypeError('The file specified is no longer valid');\n    }\n    if (!this.options.disableMultipart) {\n      sendable = new FormData();\n      this._onBuildItemForm(item, sendable);\n\n      const appendFile = () => sendable.append(item.alias, item._file, item.file.name);\n      if (!this.options.parametersBeforeFiles) {\n        appendFile();\n      }\n\n      // For AWS, Additional Parameters must come BEFORE Files\n      if (this.options.additionalParameter !== undefined) {\n        Object.keys(this.options.additionalParameter).forEach((key: string) => {\n          let paramVal = this.options.additionalParameter[ key ];\n          // Allow an additional parameter to include the filename\n          if (typeof paramVal === 'string' && paramVal.indexOf('{{file_name}}') >= 0) {\n            paramVal = paramVal.replace('{{file_name}}', item.file.name);\n          }\n          sendable.append(key, paramVal);\n        });\n      }\n\n      if (this.options.parametersBeforeFiles) {\n        appendFile();\n      }\n    } else {\n      sendable = this.options.formatDataFunction(item);\n    }\n\n    xhr.upload.onprogress = (event: any) => {\n      let progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);\n      this._onProgressItem(item, progress);\n    };\n    xhr.onload = () => {\n      let headers = this._parseHeaders(xhr.getAllResponseHeaders());\n      let response = this._transformResponse(xhr.response, headers);\n      let gist = this._isSuccessCode(xhr.status) ? 'Success' : 'Error';\n      let method = '_on' + gist + 'Item';\n      (this as any)[ method ](item, response, xhr.status, headers);\n      this._onCompleteItem(item, response, xhr.status, headers);\n    };\n    xhr.onerror = () => {\n      let headers = this._parseHeaders(xhr.getAllResponseHeaders());\n      let response = this._transformResponse(xhr.response, headers);\n      this._onErrorItem(item, response, xhr.status, headers);\n      this._onCompleteItem(item, response, xhr.status, headers);\n    };\n    xhr.onabort = () => {\n      let headers = this._parseHeaders(xhr.getAllResponseHeaders());\n      let response = this._transformResponse(xhr.response, headers);\n      this._onCancelItem(item, response, xhr.status, headers);\n      this._onCompleteItem(item, response, xhr.status, headers);\n    };\n    xhr.open(item.method, item.url, true);\n    xhr.withCredentials = item.withCredentials;\n    if (this.options.headers) {\n      for (let header of this.options.headers) {\n        xhr.setRequestHeader(header.name, header.value);\n      }\n    }\n    if (item.headers.length) {\n      for (let header of item.headers) {\n        xhr.setRequestHeader(header.name, header.value);\n      }\n    }\n    if (this.authToken) {\n      xhr.setRequestHeader(this.authTokenHeader, this.authToken);\n    }\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState == XMLHttpRequest.DONE) {\n        that.response.emit(xhr.responseText)\n      }\n    }\n    if (this.options.formatDataFunctionIsAsync) {\n      sendable.then(\n        (result: any) => xhr.send(JSON.stringify(result))\n      );\n    } else {\n      xhr.send(sendable);\n    }\n    this._render();\n  }\n\n  protected _getTotalProgress(value: number = 0): number {\n    if (this.options.removeAfterUpload) {\n      return value;\n    }\n    let notUploaded = this.getNotUploadedItems().length;\n    let uploaded = notUploaded ? this.queue.length - notUploaded : this.queue.length;\n    let ratio = 100 / this.queue.length;\n    let current = value * ratio / 100;\n    return Math.round(uploaded * ratio + current);\n  }\n\n  protected _getFilters(filters: FilterFunction[] | string): FilterFunction[] {\n    if (!filters) {\n      return this.options.filters;\n    }\n    if (Array.isArray(filters)) {\n      return filters;\n    }\n    if (typeof filters === 'string') {\n      let names = filters.match(/[^\\s,]+/g);\n      return this.options.filters\n        .filter((filter: any) => names.indexOf(filter.name) !== -1);\n    }\n    return this.options.filters;\n  }\n\n  protected _render(): any {\n    return void 0;\n  }\n\n  protected _queueLimitFilter(): boolean {\n    return this.options.queueLimit === undefined || this.queue.length < this.options.queueLimit;\n  }\n\n  protected _isValidFile(file: FileLikeObject, filters: FilterFunction[], options: FileUploaderOptions): boolean {\n    this._failFilterIndex = -1;\n    return !filters.length ? true : filters.every((filter: FilterFunction) => {\n      this._failFilterIndex++;\n      return filter.fn.call(this, file, options);\n    });\n  }\n\n  protected _isSuccessCode(status: number): boolean {\n    return (status >= 200 && status < 300) || status === 304;\n  }\n\n  protected _transformResponse(response: string, headers: ParsedResponseHeaders): string {\n    return response;\n  }\n\n  protected _parseHeaders(headers: string): ParsedResponseHeaders {\n    let parsed: any = {};\n    let key: any;\n    let val: any;\n    let i: any;\n    if (!headers) {\n      return parsed;\n    }\n    headers.split('\\n').map((line: any) => {\n      i = line.indexOf(':');\n      key = line.slice(0, i).trim().toLowerCase();\n      val = line.slice(i + 1).trim();\n      if (key) {\n        parsed[ key ] = parsed[ key ] ? parsed[ key ] + ', ' + val : val;\n      }\n    });\n    return parsed;\n  }\n\n  protected _onWhenAddingFileFailed(item: FileLikeObject, filter: any, options: any): void {\n    this.onWhenAddingFileFailed(item, filter, options);\n  }\n\n  protected _onAfterAddingFile(item: FileItem): void {\n    this.onAfterAddingFile(item);\n  }\n\n  protected _onAfterAddingAll(items: any): void {\n    this.onAfterAddingAll(items);\n  }\n\n  protected _onBeforeUploadItem(item: FileItem): void {\n    item._onBeforeUpload();\n    this.onBeforeUploadItem(item);\n  }\n\n  protected _onBuildItemForm(item: FileItem, form: any): void {\n    item._onBuildForm(form);\n    this.onBuildItemForm(item, form);\n  }\n\n  protected _onProgressItem(item: FileItem, progress: any): void {\n    let total = this._getTotalProgress(progress);\n    this.progress = total;\n    item._onProgress(progress);\n    this.onProgressItem(item, progress);\n    this.onProgressAll(total);\n    this._render();\n  }\n\n  protected _onSuccessItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void {\n    item._onSuccess(response, status, headers);\n    this.onSuccessItem(item, response, status, headers);\n  }\n\n  protected _onCancelItem(item: FileItem, response: string, status: number, headers: ParsedResponseHeaders): void {\n    item._onCancel(response, status, headers);\n    this.onCancelItem(item, response, status, headers);\n  }\n}\n","import { Directive, EventEmitter, ElementRef, Input, HostListener, Output } from '@angular/core';\n\nimport { FileUploader } from './file-uploader.class';\n\n@Directive({ selector: '[ng2FileSelect]' })\nexport class FileSelectDirective {\n  @Input() public uploader: FileUploader;\n  @Output() public onFileSelected: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n  protected element: ElementRef;\n\n  public constructor(element: ElementRef) {\n    this.element = element;\n  }\n\n  public getOptions(): any {\n    return this.uploader.options;\n  }\n\n  public getFilters(): any {\n    return {};\n  }\n\n  public isEmptyAfterSelection(): boolean {\n    return !!this.element.nativeElement.attributes.multiple;\n  }\n\n  @HostListener('change')\n  public onChange(): any {\n    let files = this.element.nativeElement.files;\n    let options = this.getOptions();\n    let filters = this.getFilters();\n\n    this.uploader.addToQueue(files, options, filters);\n    this.onFileSelected.emit(files);\n\n    if (this.isEmptyAfterSelection()) {\n      this.element.nativeElement.value = '';\n    }\n  }\n}\n","import { Directive, EventEmitter, ElementRef, HostListener, Input, Output } from '@angular/core';\n\nimport { FileUploader, FileUploaderOptions } from './file-uploader.class';\n\n@Directive({ selector: '[ng2FileDrop]' })\nexport class FileDropDirective {\n  @Input() public uploader: FileUploader;\n  @Output() public fileOver: EventEmitter<any> = new EventEmitter();\n  @Output() public onFileDrop: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n  protected element: ElementRef;\n\n  public constructor(element: ElementRef) {\n    this.element = element;\n  }\n\n  public getOptions(): FileUploaderOptions {\n    return this.uploader.options;\n  }\n\n  public getFilters(): any {\n    return {};\n  }\n\n  @HostListener('drop', [ '$event' ])\n  public onDrop(event: any): void {\n    let transfer = this._getTransfer(event);\n    if (!transfer) {\n      return;\n    }\n\n    let options = this.getOptions();\n    let filters = this.getFilters();\n    this._preventAndStop(event);\n    this.uploader.addToQueue(transfer.files, options, filters);\n    this.fileOver.emit(false);\n    this.onFileDrop.emit(transfer.files);\n  }\n\n  @HostListener('dragover', [ '$event' ])\n  public onDragOver(event: any): void {\n    let transfer = this._getTransfer(event);\n    if (!this._haveFiles(transfer.types)) {\n      return;\n    }\n\n    transfer.dropEffect = 'copy';\n    this._preventAndStop(event);\n    this.fileOver.emit(true);\n  }\n\n  @HostListener('dragleave', [ '$event' ])\n  public onDragLeave(event: any): any {\n    if ((this as any).element) {\n      if (event.currentTarget === (this as any).element[ 0 ]) {\n        return;\n      }\n    }\n\n    this._preventAndStop(event);\n    this.fileOver.emit(false);\n  }\n\n  protected _getTransfer(event: any): any {\n    return event.dataTransfer ? event.dataTransfer : event.originalEvent.dataTransfer; // jQuery fix;\n  }\n\n  protected _preventAndStop(event: any): any {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n\n  protected _haveFiles(types: any): any {\n    if (!types) {\n      return false;\n    }\n\n    if (types.indexOf) {\n      return types.indexOf('Files') !== -1;\n    } else if (types.contains) {\n      return types.contains('Files');\n    } else {\n      return false;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { FileDropDirective } from './file-drop.directive';\nimport { FileSelectDirective } from './file-select.directive';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ FileDropDirective, FileSelectDirective ],\n  exports: [ FileDropDirective, FileSelectDirective ]\n})\nexport class FileUploadModule {\n}\n"]}